{"pageContext":{"group":[{"node":{"id":"93ac6946-5a46-59e3-94da-6475dfb3dd82","html":"<h4>log4j.properties配置如下：</h4>\n<pre><code class=\"language-xml\">log4j.rootLogger = debug,CONSOLE\nlog4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender\nlog4j.appender.Threshold = debug\nlog4j.appender.CONSOLE.Target = System.out\nlog4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern =&#x26;gt;&#x26;gt; %p &#x26;lt;&#x26;gt; %d{yyyy-MM-dd HH\\:mm\\:ss}%n&#x26;gt;&#x26;gt; %m%n%n\n</code></pre>\n<p>其中显示级别一定要选择 debug，因为在静态实现的时候也会设定。</p>\n<!--more-->\n<h4>静态log4j实现代码如下：</h4>\n<pre><code class=\"language-java\">package com.winux;\n\nimport org.apache.log4j.Logger;\n\npublic class logs {\n    private static Logger logger = Logger.getLogger(logs.class);\n    private static final String thisClassName = logs.class.getName();\n    //信息分隔符\n    private static final String msgSplit = \":\";\n    //是否要定位服务\n    private static boolean showLocSrc = true;\n    //是否显示日志\n    private static final boolean enabled = true;\n    //显示等级\n    private static int level = 1;\n    private static final int debug = 1;\n    private static final int info = 2;\n    private static final int warn = 3;\n    private static final int error = 4;\n\n    public static final void debug(Object message) {\n        if (!enabled || debug &#x26;lt; level)\n            return;\n        if (showLocSrc) {\n            log(debug, message, Thread.currentThread().getStackTrace());\n        } else {\n            log(debug, message, null);\n        }\n    }\n\n    public static final void info(Object message) {\n        if (!enabled || info &#x26;lt; level)\n            return;\n        if (showLocSrc) {\n            log(info, message, Thread.currentThread().getStackTrace());\n        } else {\n            log(info, message, null);\n        }\n    }\n\n    public static final void warn(Object message) {\n        if (!enabled || warn &#x26;lt; level)\n            return;\n        if (showLocSrc) {\n            log(warn, message, Thread.currentThread().getStackTrace());\n        } else {\n            log(warn, message, null);\n        }\n    }\n\n    public static final void error(Object message) {\n        if (!enabled || error &#x26;lt; level)\n            return;\n        if (showLocSrc) {\n            log(error, message, Thread.currentThread().getStackTrace());\n        } else {\n            log(error, message, null);\n        }\n    }\n\n    private static String getStackMsg(StackTraceElement[] ste) {\n        if (ste == null)\n            return null;\n\n        boolean srcFlag = false;\n        for (int i = 0; i &#x26;lt; ste.length; i++) {\n            StackTraceElement s = ste[i];\n\n            // 如果上一行堆栈代码是本类的堆栈，则该行代码则为源代码的最原始堆栈。\n            if (srcFlag) {\n                return s == null ? \"\" : s.toString();\n            }\n\n            // 定位本类的堆栈\n            if (thisClassName.equals(s.getClassName())) {\n                srcFlag = true;\n            }\n        }\n        return null;\n    }\n\n    private static void log(int level, Object message, StackTraceElement[] ste) {\n        if (ste != null) {\n            message = getStackMsg(ste) + msgSplit + message;\n        }\n\n        switch (level) {\n        case info:\n            logger.info(message);\n            break;\n        case debug:\n            logger.debug(message);\n            break;\n        case warn:\n            logger.warn(message);\n            break;\n        case error:\n            logger.error(message);\n            break;\n        default:\n            logger.debug(message);\n        }\n    }\n\n    public static void main(String[] args) {\n        logs.debug(\"测试输出\");\n        logs.info(\"测试输出\");\n    }\n}\n</code></pre>\n<hr>","frontmatter":{"path":"/NWmM10nSXfwe2snC1E6M8o9J","title":"Log4j静态使用","date":"2011-04-16 12:58:33 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["java","log4j"]},"excerpt":"log4j.properties配置如下： 其中显示级别一定要选择 debug，因为在静态实现的时候也会设定。 静态log4j实现代码如下："}}],"pathPrefix":"programming","first":false,"last":true,"index":8,"pageCount":8,"additionalContext":{}}}
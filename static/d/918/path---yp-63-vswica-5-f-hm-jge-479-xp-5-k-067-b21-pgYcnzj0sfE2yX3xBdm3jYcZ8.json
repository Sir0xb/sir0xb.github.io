{"data":{"markdownRemark":{"html":"<p>前几天跟老铁们聊天，有位老铁说想弄一个博客只靠 SEO 被搜索，想再次回归曾经那份朴素。于是我又想起了我那放置许久的博客。</p>\n<p>闲聊之余网上找了找有没有不错的静态博客框架可用，毕竟好久没有更新博客的框架了。\n机缘巧合，看到的文章推荐使用的第一项就是 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/\">Gatsby</a>，上官网看了看貌似还不错。后来才知道 React 官网也是用这个框架搭建的 😝。</p>\n<p>正好年前有点闲暇时间，着手弄了弄。从 jekyll、hexo、octopress，现在更新到了 Gatsby。以下是一点点经验，分享给大家。</p>\n<hr>\n<h2>1. 项目初建</h2>\n<p>先安装项目工具：</p>\n<pre><code class=\"language-bash\">npm i -g gatsby-cli\n</code></pre>\n<!--more-->\n<p>生成项目：</p>\n<pre><code class=\"language-bash\">npm new [your project name]\n</code></pre>\n<p>可以查看目录下的 <code>package.json</code> 了解项目命令。</p>\n<p>运行如下命令，就能看到项目工具生成的基础博客站。</p>\n<pre><code class=\"language-bash\">gatsby develop\n</code></pre>\n<p>简单说明一下项目结构：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录/文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">src/components</td>\n<td>放置组件的目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/pages</td>\n<td>基础方式渲染的页面目录(根据文件名形成路由)</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-config.js</td>\n<td>中间件配置及网站基本信息配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-node.js</td>\n<td>高级方式渲染页面(根据路径配置方式生成路由)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td>&#x3C;以下是后续添加的部分></td>\n</tr>\n<tr>\n<td align=\"center\">src/queries</td>\n<td>Graphql 查询语句放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/templates</td>\n<td>高级方式渲染页面所用的模版放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">static</td>\n<td>发布时自动合并到发布目录的静态文件放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">deploy.sh</td>\n<td>正式发布站点的脚本</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>2. 修改导航栏</h2>\n<p>先把文件 <code>src/components/header</code> 转成目录 <code>src/components/Header/</code>。</p>\n<p>将原文件里的代码拷入 <code>index.jsx</code> 再适当的修改修改。</p>\n<pre><code class=\"language-js\">...\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentMenu: 'home'\n        }\n    }\n\n    componentDidMount() {\n        const { pathname } = window.location\n\n        const extract = pathname.split('/')[1]\n\n        this.setState({ currentMenu: extract === '' ? 'home' : extract })\n\n        if (extract === '' || /^[0-9]+$/.test(extract)) {\n            this.setState({ currentMenu: 'home' })\n        } else if (extract === 'about') {\n            this.setState({ currentMenu: 'about' })\n        } else if (extract === 'blog' || extract.length === 24) {\n            this.setState({ currentMenu: 'blog' })\n        } else {\n            this.setState({ currentMenu: 'null' })\n        }\n    }\n\n    render() {\n        const { siteTitle } = this.props\n        const { currentMenu } = this.state\n\n        return &#x3C;div className=\"header\">\n            &#x3C;div className=\"container\">\n                &#x3C;ul>\n                    &#x3C;li className=\"site-title\">\n                        &#x3C;h1>&#x3C;Link to=\"/\">{siteTitle}&#x3C;/Link>&#x3C;/h1>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'home' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/\">Home&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'blog' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/blog\">Blog&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'about' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/about\">About&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                &#x3C;/ul>\n            &#x3C;/div>\n        &#x3C;/div>\n    }\n}\n...\n</code></pre>\n<p>增加了当前菜单的 state 进行菜单状态管理。</p>\n<p>ul > li 横向序列化，第一个用作网站标题，其他的作为菜单项使用。</p>\n<p><font color=\"red\">注：</font><br>\n<font color=\"red\">1. 首页判断部分，后续要增加首页翻页功能，所以增加了数字判断。</font><br>\n<font color=\"red\">2. 博文判断部分，准备用24位随机码作为每个文章的地址。所以除了 blog 还增加了随机码长度的判断。</font></p>\n<p>样式部分就根据个人喜好开发就好了。</p>\n<hr>\n<h2>3. 博文列表</h2>\n<p>作为博客，最主要的还是博文部分，先把博文部分弄出来再说。</p>\n<p>之前的博文都是用 markdown 写的，先安装 markdown 解析工具并进行配置。</p>\n<pre><code class=\"language-bash\">npm i gatsby-source-filesystem\nnpm i gatsby-transformer-remark\nnpm i gatsby-plugin-catch-links\n</code></pre>\n<p>修改 gatsby 插件配置 <code>gatsby-config.js</code>:</p>\n<pre><code class=\"language-js\">...\nplugins: [\n...\n{\n    resolve: 'gatsby-source-filesystem',\n    options: {\n        name: 'pages',\n        path: `${__dirname}/src/pages`\n    }\n},\n'gatsby-transformer-remark',\n'gatsby-plugin-catch-links',\n...\n]\n...\n</code></pre>\n<p>配置好之后，在 <code>src/pages</code> 目录里直接创建 md 文件或是创建目录并在里边创建 md 文件都可以。markdown 解析部分完成了。</p>\n<p>如果留意观察过启动时控制台的提示，就知道访问 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a> 就能够进行 GraphiQL 查询了。</p>\n<p>先看一下博文头部信息：</p>\n<pre><code class=\"language-markdown\">---\npath       : '/yp63Vswica5FHmJGE479XP5k'\ntitle      : '用 Gatsby 搭建静态博客 1'\ndate       : 2019-01-31 18:56:00  +0800\ncomments   : true\ncategories : programing\nauthor     : Sir0xb\ntags       : [Gatsby, React]\n---\n</code></pre>\n<p>这些信息很重要，都是一会儿要被查询的字段。</p>\n<p>打开 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a>，在左侧搜索条件输入：</p>\n<pre><code class=\"language-js\">{\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n        edges {\n            node {\n                id\n                html\n                frontmatter {\n                    path\n                    title\n                    date\n                    comments\n                    author\n                    tags\n                }\n                excerpt\n            }\n        }\n    }\n}\n</code></pre>\n<p>看到查询结果大概就明白各个字段代表什么意思，不做过多解释。</p>\n<p>有了能够正常运行的查询表达式，可以开始我们的渲染工作了。</p>\n<p>还记得改造菜单时候添加了一个路径 <code>/blog</code> 吗？\n在 <code>src/pages</code> 里创建一个 <code>blog.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nconst BlogPage = ({ data }) => (\n    &#x3C;div>\n        &#x3C;h1>This is the blog page&#x3C;/h1>\n        {data.allMarkdownRemark.edges.map(post => (\n            &#x3C;div key={ post.node.id }>\n                &#x3C;h3>{post.node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {post.node.frontmatter.author} on {post.node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={post.node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;hr/>\n            &#x3C;/div>\n        ))}\n    &#x3C;/div>\n)\n\nexport const pageQuery = graphql`\n    {\n        allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        path\n                        title\n                        date\n                        comments\n                        author\n                        tags\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n`\n\nexport default BlogPage\n</code></pre>\n<p>Gatsby 用 GraphiQL 查询文件的逻辑就是，通过导出 pageQuery 进行数据查询，并把结果注入到当前 Component 的 props 的 data 里。</p>\n<p>重新启动之后，点击菜单 <code>blog</code> 看到所有文章列表了。</p>\n<hr>\n<h2>4. 博文预览</h2>\n<p>点击博文发现页面 404 了。原因是在 <code>src/pages</code> 里没有找到我们24位随机码路径对应的文件。</p>\n<p>这时候我们就要用到高级方式渲染页面的功能了。</p>\n<p>我们先做一个博文预览的模版文件 <code>src/templates/post.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './style.css'\n\nconst Template = ({ data }) => {\n    const post = data.markdownRemark\n\n    return &#x3C;Layout>\n        &#x3C;SEO title={post.frontmatter.title} />\n        &#x3C;button\n            className=\"go-back\"\n            onClick={() => { window.history.back() }}\n        >Go back&#x3C;/button>\n        &#x3C;div className=\"blog-post\">\n            &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\n            &#x3C;h4>Posted by {post.frontmatter.author} on {post.frontmatter.date}&#x3C;/h4>\n            &#x3C;div dangerouslySetInnerHTML={{__html: post.html}}>&#x3C;/div>\n        &#x3C;/div>\n    &#x3C;/Layout>\n}\n\nexport const postQuery = graphql`\n    query BlogxxxPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter {\n                path\n                title\n                author\n                date\n            }\n        }\n    }\n`\n\nexport default Template\n</code></pre>\n<p>我们把 <code>blog.js</code> 里面的查询抽离到 <code>src/queries/queryAll.js</code> 里。\n<code>blog.js</code> 文件里的查询先不动。(<code>blog.js</code> 文件后续就放弃不用了)</p>\n<p>打开 <code>gatsby-node.js</code> 文件。</p>\n<pre><code class=\"language-js\">const path = require('path')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ boundActionCreators, graphql }) => {\n    const { createPage } = boundActionCreators\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p>重启之后再点开文章，是不是可以正常渲染了。</p>\n<hr>\n<h2>5. 增加翻页器</h2>\n<p>写了多年的博客那么多的博文，如果一次性全部显示出来就不友好了。</p>\n<p>解决方案就是加个翻页器，先把 gatsby 的翻页器工具安上。</p>\n<pre><code class=\"language-bash\">npm i gatsby-paginate\n</code></pre>\n<p>翻页器功能可以使用官网 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/packages/gatsby-paginate/?=gatsby-paginate#create-the-template\">Demo</a> 里提供的代码，当然也可以自己开发。</p>\n<p>我比较喜欢前后都有《最前》、《最后》以及《上一页》、《下一页》按钮，页码部分低位至少留有两个页码，高位也至少留有两个页码，并且当前页码的前后各留有两个页码的翻页方式。</p>\n<p>那我们先把翻页器组件实现一下。<code>src/components/Paginator/index.jsx</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './style.css'\n\nconst getRandomStr = (len = 15) => {\n    let text = ''\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    for (let i = 0; i &#x3C; len; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\n    }\n    return text\n}\n\nconst Paginator = ({ index, pageCount, relativeUrl }) => {\n    let result = []\n\n    result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'«'}&#x3C;/Link>)\n    if (index &#x3C;= 2) {\n        result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'&#x3C;'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{'&#x3C;'}&#x3C;/Link>)\n    }\n\n    if (pageCount &#x3C; 11) {\n        Object.keys(Array.from({ length: pageCount })).forEach((item, listIndex) => {\n            result.push(\n                &#x3C;Link\n                    key={getRandomStr()}\n                    className={listIndex + 1 === index ? 'currentPage' : ''}\n                    to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                >{listIndex + 1}&#x3C;/Link>\n            )\n        })\n    } else {\n        if (index &#x3C;= 5) {\n            // 低数 index + 2   高位两个\n            Object.keys(Array.from({ length: index + 2 })).forEach((item, listIndex) => {\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={listIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                    >{listIndex + 1}&#x3C;/Link>\n                )\n            })\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        } else if (index >= pageCount - 4) {\n            // 低位两个   高位 index - 2 到顶\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            // pageCount - (index - 2) + 1 = pageCount - index + 3\n            Object.keys(Array.from({ length: pageCount - index + 3  })).forEach((item, listIndex) => {\n                let newIndex = listIndex + index - 3\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={newIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${newIndex === 0 ? '' : newIndex + 1}`}\n                    >{newIndex + 1}&#x3C;/Link>\n                )\n            })\n        } else {\n            // 低位两个  中间 index - 2 ~ index + 2  高位两个\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 2}`}>{index - 2}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{index - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} className=\"currentPage\" to={`${relativeUrl}/${index}`}>{index}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{index + 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 2}`}>{index + 2}&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        }\n    }\n\n    if (index === pageCount) {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'>'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{'>'}&#x3C;/Link>)\n    }\n    result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'»'}&#x3C;/Link>)\n\n    return &#x3C;div className=\"paginator\">\n        {result}\n    &#x3C;/div>\n}\n\nexport default Paginator\n</code></pre>\n<p><font color=\"red\">注：因为翻页器可能会用在首页，也可能用在博文页，所以传入了相对路径 <code>relativeUrl</code>。</font></p>\n<p>将 <code>src/pages/blog.js</code> 更名或删除。我们要通过高级方式生成博文页面，不再使用原来的页面了。</p>\n<p>再做一个带翻页器的博文页面渲染模版。<code>src/templates/posts.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Link from 'gatsby-link'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Paginator from '../components/Paginator'\n\nconst Template = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Layout>\n        &#x3C;SEO title=\"Blog\" />\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>{node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n    &#x3C;/Layout>\n}\n\nexport default Template\n</code></pre>\n<p>有了翻页器组件，有了模版，就差数据了。</p>\n<p>修改下 <code>gatsby-node.js</code></p>\n<pre><code class=\"language-js\">const path = require('path')\nconst createPaginatedPages = require('gatsby-paginate')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ actions, graphql }) => {\n    const { createPage } = actions\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 生成博文翻页\n                const PostsTemplate = path.resolve('./src/templates/posts.js')\n                createPaginatedPages({\n                    edges        : result.data.allMarkdownRemark.edges,\n                    createPage   : createPage,\n                    pageTemplate : PostsTemplate,\n                    pageLength   : 10,\n                    pathPrefix   : 'blog'\n                })\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p><font color=\"red\">注：由于 <code>gatsby-paginate</code> 要求的 Gatsby 版本要比默认的高，所以我把 Gatsby 版本升级到了最高。于是这里有了点变化。原先的 <code>boundActionCreators</code> 变成了 <code>actions</code>。</font></p>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/yp63Vswica5FHmJGE479XP5k","title":"用 Gatsby 搭建静态博客 1","author":"Sir0xb","date":"2019-01-31 18:56:00  +0800"}}},"pageContext":{}}
{"pageContext":{"group":[{"node":{"id":"6529f711-9320-5845-a3b6-43d4172b8cd9","html":"<h3>类的定义：</h3>\n<pre><code class=\"language-javascript\">var Clazz = (function () {\n    var Clazz = function () { },\n        initializing = false\n        superPattern = /xyz/.test(function() { xyz; }) ? /\\b_super\\b/ : /.*/;\n\n    Clazz.create = function (properties) {\n        var _super = this.prototype;\n        initializing = true;\n        var proto = new this();\n        initializing = false;\n\n        for (var name in properties) {\n            proto[name] = typeof properties[name] == \"function\" &#x26;&#x26;\n            typeof _super[name] == \"function\" &#x26;&#x26; superPattern.test(properties[name]) ?\n                (function(name, fn) {\n                    return function() {\n                        var tmp     = this._super;\n                        this._super = _super[name];\n                        var ret     = fn.apply(this, arguments);\n                        this._super = tmp;\n                        return ret;\n                    };\n                })(name, properties[name]) : properties[name];\n        }\n\n        function _Clazz() {\n            if (!initializing &#x26;&#x26; this.init) {\n                this.init.apply(this, arguments);\n            }\n        }\n\n        _Clazz.prototype     = proto;\n        _Clazz.constructor   = Clazz;\n        _Clazz.create        = arguments.callee;\n\n        return _Clazz;\n    }\n\n    return Clazz;\n}());\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>类的使用：</h3>\n<pre><code class=\"language-javascript\">var Person = Clazz.create({\n    init: function (isDancing) {\n        this.dancing = isDancing;\n    },\n    dance: function () {\n        return this.dancing;\n    }\n});\n\nvar Child = Person.create({\n    init: function () {\n        this._super(false);\n    },\n    dance: function () {\n        return this._super();\n    },\n    swiming: function () {\n        return true;\n    }\n});\n\nvar person = new Person(true);\nvar child = new Child();\n\nconsole.log('家长能跳舞.');\nconsole.log(person.dance());\n\nconsole.log('孩子能游泳');\nconsole.log(child.swiming());\n\nconsole.log('孩子不会跳舞.');\nconsole.log(child.dance());\n\nconsole.log('家长是人类.');\nconsole.log(person instanceof Person);\n\nconsole.log('孩子也是人类.');\nconsole.log(child instanceof Child &#x26;&#x26; child instanceof Person);\n</code></pre>\n<hr>","frontmatter":{"path":"/ZFR4s3OTFvgwRvL50hiVwpY5","title":"JavaScript实现类效果","date":"2016-01-27 11:00:00 +0800","comments":true,"author":"Sir0xb","tags":["javascript"]},"excerpt":"类的定义：   类的使用："}},{"node":{"id":"38fa7528-73f5-544e-95e1-4ebad7e3a1c5","html":"<h3>js 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nconcat = require \"gulp-concat\"\nuglify = require \"gulp-uglify\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe jshint()\n    .pipe concat \"base.min.js\"\n    .pipe uglify()   # 混淆\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>js 压缩不合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nsourcemaps = require \"gulp-sourcemaps\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx.js\", \"!xxx.min.js\", \"yyy.js\", \"!yyy.min.js\"]\n    .pipe sourcemaps.init()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        mangle: no  # 不混淆\n    .pipe sourcemaps.write \"./\"\n    .pipe gulp.dest \"./\"\n</code></pre>\n<h2> </h2>\n<h3>js 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nrev = require \"gulp-rev\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxxx.js\", \"!xxx.min.js\"]\n    .pipe plumber()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        managle: no\n    .pipe rev()          # 加版本号\n    .pipe gulp.dest \"压缩文件\"\n    .pipe rev.manifest   # 这部分解决 js html 同时压缩时映射文件被覆盖问题\n        path    : path.join __dirname, \"映射文件目录/#{appName}/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>css 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nrename = require \"gulp-rename\"\ncssImport = require \"gulp-cssimport\"\ncssmin = require \"gulp-cssmin\"\n\ngulp.task \"css\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe rename\n        extname: \".min.css\"\n    .pipe cssImport()\n    .pipe cssmin\n        compatibility: \"ie7\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\nrev = require \"gulp-rev\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe rev()\n    .pipe gulp.dest \"压缩文件输出目录\"\n    .pipe rev.manifest\n        path    : path.join __dirname, \"映射文件输出目录/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件输出目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<blockquote>\n<p>基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理</p>\n</blockquote>\n<hr>","frontmatter":{"path":"/fnrdoaUSK7UChWUhYSpxHPqg","title":"Gulp常用脚本","date":"2016-01-26 14:20:38 +0800","comments":true,"author":"Sir0xb","tags":["coffee","gulp"]},"excerpt":"js 压缩合并   js 压缩不合并   js 压缩加版本号   css 压缩合并   html 压缩   html 压缩加版本号 基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理"}}],"pathPrefix":"blog","first":false,"last":true,"index":7,"pageCount":7,"additionalContext":{}}}
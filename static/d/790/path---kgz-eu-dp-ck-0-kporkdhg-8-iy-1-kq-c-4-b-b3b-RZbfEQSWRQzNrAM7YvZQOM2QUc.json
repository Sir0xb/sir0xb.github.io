{"data":{"markdownRemark":{"html":"<p>上一篇做了导航菜单、弄出了博文列表、博文预览及翻页器。</p>\n<p>基本的功能弄的差不多了，不过还需要用这些基本功能再完善一下博客。</p>\n<p>首页也需要改改、返回顶部的按钮、还有本人比较喜欢的滚动条进度条、统计、Google被搜索等等。</p>\n<hr>\n<h2>6. 改版首页</h2>\n<p>博客首页的传统实现方式是显示部分博文，下方再加个 Read More 的按钮。</p>\n<p>只有一种首页是不是太单调了，在特殊节日我想搞个特效页面什么的展示在首页。\n所以，我弄了个配置，如果是普通日子，就默认用传统的有分页，博文部分显示的首页。\n如果是特殊节日，根据开发的特效页面不同，也能很快的进行切换。</p>\n<!--more-->\n<p>首先，我们把原先的入口文件 <code>src/pages/index.js</code> 更名或删除。</p>\n<p>并创建模板文件 <code>src/templates/home.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport Layout from '../components/layout'\nimport HomePage from '../components/Home'\nimport SEO from '../components/seo'\n\nconst Template = ({ pageContext }) => (\n    &#x3C;Layout>\n        &#x3C;SEO title=\"Boliball\" />\n        &#x3C;HomePage type=\"normal\" pageContext={pageContext} />\n    &#x3C;/Layout>\n)\n\nexport default Template\n</code></pre>\n<p>通过这种方式，我们可以把给入模板文件的页面上下文转移到 <code>src/components/Home/index.jsx</code> 里。</p>\n<p>我们再改下高级渲染方式 <code>gatsby-node.js</code>，把组织数据部分弄一弄。</p>\n<pre><code class=\"language-js\">...\n// 生成首页\nconst HomeTemplate = path.resolve('./src/templates/home.js')\ncreatePaginatedPages({\n    edges        : result.data.allMarkdownRemark.edges,\n    createPage   : createPage,\n    pageTemplate : HomeTemplate,\n    pageLength   : 5,\n    pathPrefix   : ''\n})\n...\n</code></pre>\n<p>上下文数据有了，模板也有了，弄一弄首页 Component 吧。</p>\n<p>先弄一个组件路由。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport NormalHomePage from './normal'\nimport HolidayHomePage from './holiday'\n\nconst HomeComponentMapping = {\n    normal  : NormalHomePage,\n    holiday : HolidayHomePage\n}\n\nconst HomePage = ({ type, pageContext }) => {\n    const TheHomePage = HomeComponentMapping[type]\n\n    return &#x3C;TheHomePage pageContext={pageContext} />\n}\n\nHomePage.propTypes = {\n    type: PropTypes.string\n}\n\nHomePage.defaultProps = {\n    type: 'normal'\n}\n\nexport default HomePage\n</code></pre>\n<p>再把带分页的首页弄一弄。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Paginator from '../Paginator'\n\nimport './style.css'\n\nconst { Fragment } = React\n\nconst NormalHomePage = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Fragment>\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>&#x3C;Link className=\"title\" to={node.frontmatter.path}>{node.frontmatter.title}&#x3C;/Link>&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;div dangerouslySetInnerHTML={{__html: node.html.split('&#x3C;!--more-->')[0]}}>&#x3C;/div>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"\" />\n    &#x3C;/Fragment>\n}\n\nexport default NormalHomePage\n</code></pre>\n<p><font color=\"red\">注：博文里需要有识别符 <code>&#x3C;!--more--></code>。之所以首页能只显示一部分，是因为使用这个识别符做了拆分。</font></p>\n<hr>\n<h2>7. 返回顶部</h2>\n<p>返回顶部的实现方式有很多种，这里只作为示例。</p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass BackToTop extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false\n        }\n\n        this.timer = undefined\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        clearTimeout(this.timer)\n        this.timer = setTimeout(() => {\n            this.setState({\n                show: document.body.scrollTop > 700 || document.documentElement.scrollTop > 700\n            })\n        }, 100)\n    }\n\n    render() {\n        return this.state.show &#x26;&#x26; &#x3C;div className=\"back-to-top\">\n            &#x3C;button onClick={() => { window.scrollTo(0, 0) }}>⬆︎&#x3C;/button>\n        &#x3C;/div>\n    }\n}\n\nexport default BackToTop\n</code></pre>\n<hr>\n<h2>8. 滚动条进度条</h2>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass ScrollIndicator extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        let winScroll = document.body.scrollTop || document.documentElement.scrollTop\n        let height = document.documentElement.scrollHeight - document.documentElement.clientHeight\n        let scrolled = (winScroll / height) * 100\n        this.refs.progress_bar.style.width = `${scrolled}%`\n    }\n\n    render() {\n        return &#x3C;div className=\"scroll-indicator\">\n            &#x3C;div ref=\"progress_bar\" className=\"progress-bar\">&#x3C;/div>\n        &#x3C;/div>\n    }\n}\n\nexport default ScrollIndicator\n</code></pre>\n<hr>\n<h2>9. 百度统计 &#x26; 被 Google 搜索</h2>\n<p>Google统计的脚本在国内有时候加载不成功，都懂得。</p>\n<p>不废话，安装百度统计的中间件。</p>\n<pre><code class=\"language-bash\">npm i gatsby-plugin-baidu-tongji\n</code></pre>\n<p>修改下配置文件 <code>gatsby-config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    ...\n    {\n        resolve: 'gatsby-plugin-baidu-tongji',\n        options: {\n            siteid: 'FiJx5NYvSMLLCLCO9Ep9AmCEYpnhLZEo',\n            head: false\n        }\n    }\n    ...\n]\n...\n</code></pre>\n<p>被 Google 搜索需要在 <a href=\"https://search.google.com/search-console\">search.google.com</a> 上注册自己的站点。</p>\n<p>站点的验证方式很多，这里用举例 meta 方式。修改 <code>src/components/seo.js</code>。</p>\n<pre><code class=\"language-js\">...\nmeta={[\n    ...\n    {\n        name: `google-site-verification`,\n        content: 'axWre5Mc1WeCJHuCSLAALonVYdzjco_Ao__dvd3CsYX'\n    }\n    ...\n]}\n...\n`\n</code></pre>\n<hr>\n<h2>10. 发布站点脚本 &#x26; CNAME 文件</h2>\n<p>运行如下命令：</p>\n<pre><code class=\"language-bash\">gatsby build\n</code></pre>\n<p>待发布的站点就在 <code>public</code> 目录里了</p>\n<p>为了发布方便做了个发布脚本 <code>deploy.sh</code></p>\n<pre><code class=\"language-sh\">#!/bin/bash\nrm -rf ./.cache\nrm -rf ./public/*\n\ngatsby build\n\necho \"\"\necho \"====>> publish version: $1 &#x3C;&#x3C;====\"\necho \"\"\n\ncd ./public\ngit add .\ngit commit -m \"$1\"\ngit push\n</code></pre>\n<p><font color=\"red\">注：发布前最好清理一下 <code>public</code> 目录，因为总是增量发布，所以会有很多历史文件，同一个功能只是 hash 有变化。</font></p>\n<p>配置 <code>package.json</code></p>\n<pre><code class=\"language-json\">...\n\"scripts\": {\n    ...\n    \"deploy\": \"sh deploy.sh\"\n    ...\n}\n...\n</code></pre>\n<p>使用方法如下：</p>\n<pre><code class=\"language-bash\">npm run deploy -- v0.0.1\n</code></pre>\n<p>另：如果自己有独立域名，还需要将 CNAME 文件放入发布目录。</p>\n<p>只需要将 CNAME 文件放入 <code>static/</code> 目录即可，脚本编译的时候会自动同步过去。</p>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/KGZEuDpCK0Kporkdhg8iy1KQ","title":"用 Gatsby 搭建静态博客 2","author":"Sir0xb","date":"2019-02-01 10:28:00  +0800"}}},"pageContext":{}}
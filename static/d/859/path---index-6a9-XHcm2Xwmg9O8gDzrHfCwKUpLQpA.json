{"pageContext":{"group":[{"node":{"id":"ca86e23b-8866-5b95-98bd-4a3f74994836","html":"<p>上一篇做了导航菜单、弄出了博文列表、博文预览及翻页器。</p>\n<p>基本的功能弄的差不多了，不过还需要用这些基本功能再完善一下博客。</p>\n<p>首页也需要改改、返回顶部的按钮、还有本人比较喜欢的滚动条进度条、统计、Google被搜索等等。</p>\n<hr>\n<h2>6. 改版首页</h2>\n<p>博客首页的传统实现方式是显示部分博文，下方再加个 Read More 的按钮。</p>\n<p>只有一种首页是不是太单调了，在特殊节日我想搞个特效页面什么的展示在首页。\n所以，我弄了个配置，如果是普通日子，就默认用传统的有分页，博文部分显示的首页。\n如果是特殊节日，根据开发的特效页面不同，也能很快的进行切换。</p>\n<!--more-->\n<p>首先，我们把原先的入口文件 <code>src/pages/index.js</code> 更名或删除。</p>\n<p>并创建模板文件 <code>src/templates/home.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport Layout from '../components/layout'\nimport HomePage from '../components/Home'\nimport SEO from '../components/seo'\n\nconst Template = ({ pageContext }) => (\n    &#x3C;Layout>\n        &#x3C;SEO title=\"Boliball\" />\n        &#x3C;HomePage type=\"normal\" pageContext={pageContext} />\n    &#x3C;/Layout>\n)\n\nexport default Template\n</code></pre>\n<p>通过这种方式，我们可以把给入模板文件的页面上下文转移到 <code>src/components/Home/index.jsx</code> 里。</p>\n<p>我们再改下高级渲染方式 <code>gatsby-node.js</code>，把组织数据部分弄一弄。</p>\n<pre><code class=\"language-js\">...\n// 生成首页\nconst HomeTemplate = path.resolve('./src/templates/home.js')\ncreatePaginatedPages({\n    edges        : result.data.allMarkdownRemark.edges,\n    createPage   : createPage,\n    pageTemplate : HomeTemplate,\n    pageLength   : 5,\n    pathPrefix   : ''\n})\n...\n</code></pre>\n<p>上下文数据有了，模板也有了，弄一弄首页 Component 吧。</p>\n<p>先弄一个组件路由。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport NormalHomePage from './normal'\nimport HolidayHomePage from './holiday'\n\nconst HomeComponentMapping = {\n    normal  : NormalHomePage,\n    holiday : HolidayHomePage\n}\n\nconst HomePage = ({ type, pageContext }) => {\n    const TheHomePage = HomeComponentMapping[type]\n\n    return &#x3C;TheHomePage pageContext={pageContext} />\n}\n\nHomePage.propTypes = {\n    type: PropTypes.string\n}\n\nHomePage.defaultProps = {\n    type: 'normal'\n}\n\nexport default HomePage\n</code></pre>\n<p>再把带分页的首页弄一弄。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Paginator from '../Paginator'\n\nimport './style.css'\n\nconst { Fragment } = React\n\nconst NormalHomePage = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Fragment>\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>&#x3C;Link className=\"title\" to={node.frontmatter.path}>{node.frontmatter.title}&#x3C;/Link>&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;div dangerouslySetInnerHTML={{__html: node.html.split('&#x3C;!--more-->')[0]}}>&#x3C;/div>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"\" />\n    &#x3C;/Fragment>\n}\n\nexport default NormalHomePage\n</code></pre>\n<p><font color=\"red\">注：博文里需要有识别符 <code>&#x3C;!--more--></code>。之所以首页能只显示一部分，是因为使用这个识别符做了拆分。</font></p>\n<hr>\n<h2>7. 返回顶部</h2>\n<p>返回顶部的实现方式有很多种，这里只作为示例。</p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass BackToTop extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false\n        }\n\n        this.timer = undefined\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        clearTimeout(this.timer)\n        this.timer = setTimeout(() => {\n            this.setState({\n                show: document.body.scrollTop > 700 || document.documentElement.scrollTop > 700\n            })\n        }, 100)\n    }\n\n    render() {\n        return this.state.show &#x26;&#x26; &#x3C;div className=\"back-to-top\">\n            &#x3C;button onClick={() => { window.scrollTo(0, 0) }}>⬆︎&#x3C;/button>\n        &#x3C;/div>\n    }\n}\n\nexport default BackToTop\n</code></pre>\n<hr>\n<h2>8. 滚动条进度条</h2>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass ScrollIndicator extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        let winScroll = document.body.scrollTop || document.documentElement.scrollTop\n        let height = document.documentElement.scrollHeight - document.documentElement.clientHeight\n        let scrolled = (winScroll / height) * 100\n        this.refs.progress_bar.style.width = `${scrolled}%`\n    }\n\n    render() {\n        return &#x3C;div className=\"scroll-indicator\">\n            &#x3C;div ref=\"progress_bar\" className=\"progress-bar\">&#x3C;/div>\n        &#x3C;/div>\n    }\n}\n\nexport default ScrollIndicator\n</code></pre>\n<hr>\n<h2>9. 百度统计 &#x26; 被 Google 搜索</h2>\n<p>Google统计的脚本在国内有时候加载不成功，都懂得。</p>\n<p>不废话，安装百度统计的中间件。</p>\n<pre><code class=\"language-bash\">npm i gatsby-plugin-baidu-tongji\n</code></pre>\n<p>修改下配置文件 <code>gatsby-config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    ...\n    {\n        resolve: 'gatsby-plugin-baidu-tongji',\n        options: {\n            siteid: 'FiJx5NYvSMLLCLCO9Ep9AmCEYpnhLZEo',\n            head: false\n        }\n    }\n    ...\n]\n...\n</code></pre>\n<p>被 Google 搜索需要在 <a href=\"https://search.google.com/search-console\">search.google.com</a> 上注册自己的站点。</p>\n<p>站点的验证方式很多，这里用举例 meta 方式。修改 <code>src/components/seo.js</code>。</p>\n<pre><code class=\"language-js\">...\nmeta={[\n    ...\n    {\n        name: `google-site-verification`,\n        content: 'axWre5Mc1WeCJHuCSLAALonVYdzjco_Ao__dvd3CsYX'\n    }\n    ...\n]}\n...\n`\n</code></pre>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/KGZEuDpCK0Kporkdhg8iy1KQ","title":"用 Gatsby 搭建静态博客 2","date":"2019-02-01 10:28:00  +0800","comments":true,"author":"Sir0xb","tags":["Gatsby","React"]},"excerpt":"上一篇做了导航菜单、弄出了博文列表、博文预览及翻页器。 基本的功能弄的差不多了，不过还需要用这些基本功能再完善一下博客。 首页也需要改改、返回顶部的按钮、还有本人比较喜欢的滚动条进度条、统计、Google被搜索等等。…"}},{"node":{"id":"85cdfe96-de0d-5a68-9833-5f07496d33bb","html":"<p>前几天跟老铁们聊天，有位老铁说想弄一个博客只靠 SEO 被搜索，想再次回归曾经那份朴素。于是我又想起了我那放置许久的博客。</p>\n<p>闲聊之余网上找了找有没有不错的静态博客框架可用，毕竟好久没有更新博客的框架了。\n机缘巧合，看到的文章推荐使用的第一项就是 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/\">Gatsby</a>，上官网看了看貌似还不错。后来才知道 React 官网也是用这个框架搭建的 😝。</p>\n<p>正好年前有点闲暇时间，着手弄了弄。从 jekyll、hexo、octopress，现在更新到了 Gatsby。以下是一点点经验，分享给大家。</p>\n<hr>\n<h2>1. 项目初建</h2>\n<p>先安装项目工具：</p>\n<pre><code class=\"language-bash\">npm i -g gatsby-cli\n</code></pre>\n<!--more-->\n<p>生成项目：</p>\n<pre><code class=\"language-bash\">npm new [your project name]\n</code></pre>\n<p>可以查看目录下的 <code>package.json</code> 了解项目命令。</p>\n<p>运行如下命令，就能看到项目工具生成的基础博客站。</p>\n<pre><code class=\"language-bash\">gatsby develop\n</code></pre>\n<p>简单说明一下项目结构：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录/文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">src/components</td>\n<td>放置组件的目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/pages</td>\n<td>基础方式渲染的页面目录(根据文件名形成路由)</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-config.js</td>\n<td>中间件配置及网站基本信息配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-node.js</td>\n<td>高级方式渲染页面(根据路径配置方式生成路由)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td>&#x3C;以下是后续添加的部分></td>\n</tr>\n<tr>\n<td align=\"center\">src/queries</td>\n<td>Graphql 查询语句放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/templates</td>\n<td>高级方式渲染页面所用的模版放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">static</td>\n<td>发布时自动合并到发布目录的静态文件放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">deploy.sh</td>\n<td>正式发布站点的脚本</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>2. 修改导航栏</h2>\n<p>先把文件 <code>src/components/header</code> 转成目录 <code>src/components/Header/</code>。</p>\n<p>将原文件里的代码拷入 <code>index.jsx</code> 再适当的修改修改。</p>\n<pre><code class=\"language-js\">...\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentMenu: 'home'\n        }\n    }\n\n    componentDidMount() {\n        const { pathname } = window.location\n\n        const extract = pathname.split('/')[1]\n\n        this.setState({ currentMenu: extract === '' ? 'home' : extract })\n\n        if (extract === '' || /^[0-9]+$/.test(extract)) {\n            this.setState({ currentMenu: 'home' })\n        } else if (extract === 'about') {\n            this.setState({ currentMenu: 'about' })\n        } else if (extract === 'blog' || extract.length === 24) {\n            this.setState({ currentMenu: 'blog' })\n        } else {\n            this.setState({ currentMenu: 'null' })\n        }\n    }\n\n    render() {\n        const { siteTitle } = this.props\n        const { currentMenu } = this.state\n\n        return &#x3C;div className=\"header\">\n            &#x3C;div className=\"container\">\n                &#x3C;ul>\n                    &#x3C;li className=\"site-title\">\n                        &#x3C;h1>&#x3C;Link to=\"/\">{siteTitle}&#x3C;/Link>&#x3C;/h1>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'home' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/\">Home&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'blog' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/blog\">Blog&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'about' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/about\">About&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                &#x3C;/ul>\n            &#x3C;/div>\n        &#x3C;/div>\n    }\n}\n...\n</code></pre>\n<p>增加了当前菜单的 state 进行菜单状态管理。</p>\n<p>ul > li 横向序列化，第一个用作网站标题，其他的作为菜单项使用。</p>\n<p><font color=\"red\">注：</font><br>\n<font color=\"red\">1. 首页判断部分，后续要增加首页翻页功能，所以增加了数字判断。</font><br>\n<font color=\"red\">2. 博文判断部分，准备用24位随机码作为每个文章的地址。所以除了 blog 还增加了随机码长度的判断。</font></p>\n<p>样式部分就根据个人喜好开发就好了。</p>\n<hr>\n<h2>3. 博文列表</h2>\n<p>作为博客，最主要的还是博文部分，先把博文部分弄出来再说。</p>\n<p>之前的博文都是用 markdown 写的，先安装 markdown 解析工具并进行配置。</p>\n<pre><code class=\"language-bash\">npm i gatsby-source-filesystem\nnpm i gatsby-transformer-remark\nnpm i gatsby-plugin-catch-links\n</code></pre>\n<p>修改 gatsby 插件配置 <code>gatsby-config.js</code>:</p>\n<pre><code class=\"language-js\">...\nplugins: [\n...\n{\n    resolve: 'gatsby-source-filesystem',\n    options: {\n        name: 'pages',\n        path: `${__dirname}/src/pages`\n    }\n},\n'gatsby-transformer-remark',\n'gatsby-plugin-catch-links',\n...\n]\n...\n</code></pre>\n<p>配置好之后，在 <code>src/pages</code> 目录里直接创建 md 文件或是创建目录并在里边创建 md 文件都可以。markdown 解析部分完成了。</p>\n<p>如果留意观察过启动时控制台的提示，就知道访问 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a> 就能够进行 GraphiQL 查询了。</p>\n<p>先看一下博文头部信息：</p>\n<pre><code class=\"language-markdown\">---\npath       : '/yp63Vswica5FHmJGE479XP5k'\ntitle      : '用 Gatsby 搭建静态博客 1'\ndate       : 2019-01-31 18:56:00  +0800\ncomments   : true\ncategories : programing\nauthor     : Sir0xb\ntags       : [Gatsby, React]\n---\n</code></pre>\n<p>这些信息很重要，都是一会儿要被查询的字段。</p>\n<p>打开 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a>，在左侧搜索条件输入：</p>\n<pre><code class=\"language-js\">{\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n        edges {\n            node {\n                id\n                html\n                frontmatter {\n                    path\n                    title\n                    date\n                    comments\n                    author\n                    tags\n                }\n                excerpt\n            }\n        }\n    }\n}\n</code></pre>\n<p>看到查询结果大概就明白各个字段代表什么意思，不做过多解释。</p>\n<p>有了能够正常运行的查询表达式，可以开始我们的渲染工作了。</p>\n<p>还记得改造菜单时候添加了一个路径 <code>/blog</code> 吗？\n在 <code>src/pages</code> 里创建一个 <code>blog.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nconst BlogPage = ({ data }) => (\n    &#x3C;div>\n        &#x3C;h1>This is the blog page&#x3C;/h1>\n        {data.allMarkdownRemark.edges.map(post => (\n            &#x3C;div key={ post.node.id }>\n                &#x3C;h3>{post.node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {post.node.frontmatter.author} on {post.node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={post.node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;hr/>\n            &#x3C;/div>\n        ))}\n    &#x3C;/div>\n)\n\nexport const pageQuery = graphql`\n    {\n        allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        path\n                        title\n                        date\n                        comments\n                        author\n                        tags\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n`\n\nexport default BlogPage\n</code></pre>\n<p>Gatsby 用 GraphiQL 查询文件的逻辑就是，通过导出 pageQuery 进行数据查询，并把结果注入到当前 Component 的 props 的 data 里。</p>\n<p>重新启动之后，点击菜单 <code>blog</code> 看到所有文章列表了。</p>\n<hr>\n<h2>4. 博文预览</h2>\n<p>点击博文发现页面 404 了。原因是在 <code>src/pages</code> 里没有找到我们24位随机码路径对应的文件。</p>\n<p>这时候我们就要用到高级方式渲染页面的功能了。</p>\n<p>我们先做一个博文预览的模版文件 <code>src/templates/post.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './style.css'\n\nconst Template = ({ data }) => {\n    const post = data.markdownRemark\n\n    return &#x3C;Layout>\n        &#x3C;SEO title={post.frontmatter.title} />\n        &#x3C;button\n            className=\"go-back\"\n            onClick={() => { window.history.back() }}\n        >Go back&#x3C;/button>\n        &#x3C;div className=\"blog-post\">\n            &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\n            &#x3C;h4>Posted by {post.frontmatter.author} on {post.frontmatter.date}&#x3C;/h4>\n            &#x3C;div dangerouslySetInnerHTML={{__html: post.html}}>&#x3C;/div>\n        &#x3C;/div>\n    &#x3C;/Layout>\n}\n\nexport const postQuery = graphql`\n    query BlogxxxPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter {\n                path\n                title\n                author\n                date\n            }\n        }\n    }\n`\n\nexport default Template\n</code></pre>\n<p>我们把 <code>blog.js</code> 里面的查询抽离到 <code>src/queries/queryAll.js</code> 里。\n<code>blog.js</code> 文件里的查询先不动。(<code>blog.js</code> 文件后续就放弃不用了)</p>\n<p>打开 <code>gatsby-node.js</code> 文件。</p>\n<pre><code class=\"language-js\">const path = require('path')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ boundActionCreators, graphql }) => {\n    const { createPage } = boundActionCreators\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p>重启之后再点开文章，是不是可以正常渲染了。</p>\n<hr>\n<h2>5. 增加翻页器</h2>\n<p>写了多年的博客那么多的博文，如果一次性全部显示出来就不友好了。</p>\n<p>解决方案就是加个翻页器，先把 gatsby 的翻页器工具安上。</p>\n<pre><code class=\"language-bash\">npm i gatsby-paginate\n</code></pre>\n<p>翻页器功能可以使用官网 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/packages/gatsby-paginate/?=gatsby-paginate#create-the-template\">Demo</a> 里提供的代码，当然也可以自己开发。</p>\n<p>我比较喜欢前后都有《最前》、《最后》以及《上一页》、《下一页》按钮，页码部分低位至少留有两个页码，高位也至少留有两个页码，并且当前页码的前后各留有两个页码的翻页方式。</p>\n<p>那我们先把翻页器组件实现一下。<code>src/components/Paginator/index.jsx</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './style.css'\n\nconst getRandomStr = (len = 15) => {\n    let text = ''\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    for (let i = 0; i &#x3C; len; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\n    }\n    return text\n}\n\nconst Paginator = ({ index, pageCount, relativeUrl }) => {\n    let result = []\n\n    result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'«'}&#x3C;/Link>)\n    if (index &#x3C;= 2) {\n        result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'&#x3C;'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{'&#x3C;'}&#x3C;/Link>)\n    }\n\n    if (pageCount &#x3C; 11) {\n        Object.keys(Array.from({ length: pageCount })).forEach((item, listIndex) => {\n            result.push(\n                &#x3C;Link\n                    key={getRandomStr()}\n                    className={listIndex + 1 === index ? 'currentPage' : ''}\n                    to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                >{listIndex + 1}&#x3C;/Link>\n            )\n        })\n    } else {\n        if (index &#x3C;= 5) {\n            // 低数 index + 2   高位两个\n            Object.keys(Array.from({ length: index + 2 })).forEach((item, listIndex) => {\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={listIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                    >{listIndex + 1}&#x3C;/Link>\n                )\n            })\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        } else if (index >= pageCount - 4) {\n            // 低位两个   高位 index - 2 到顶\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            // pageCount - (index - 2) + 1 = pageCount - index + 3\n            Object.keys(Array.from({ length: pageCount - index + 3  })).forEach((item, listIndex) => {\n                let newIndex = listIndex + index - 3\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={newIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${newIndex === 0 ? '' : newIndex + 1}`}\n                    >{newIndex + 1}&#x3C;/Link>\n                )\n            })\n        } else {\n            // 低位两个  中间 index - 2 ~ index + 2  高位两个\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 2}`}>{index - 2}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{index - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} className=\"currentPage\" to={`${relativeUrl}/${index}`}>{index}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{index + 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 2}`}>{index + 2}&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        }\n    }\n\n    if (index === pageCount) {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'>'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{'>'}&#x3C;/Link>)\n    }\n    result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'»'}&#x3C;/Link>)\n\n    return &#x3C;div className=\"paginator\">\n        {result}\n    &#x3C;/div>\n}\n\nexport default Paginator\n</code></pre>\n<p><font color=\"red\">注：因为翻页器可能会用在首页，也可能用在博文页，所以传入了相对路径 <code>relativeUrl</code>。</font></p>\n<p>将 <code>src/pages/blog.js</code> 更名或删除。我们要通过高级方式生成博文页面，不再使用原来的页面了。</p>\n<p>再做一个带翻页器的博文页面渲染模版。<code>src/templates/posts.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Link from 'gatsby-link'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Paginator from '../components/Paginator'\n\nconst Template = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Layout>\n        &#x3C;SEO title=\"Blog\" />\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>{node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n    &#x3C;/Layout>\n}\n\nexport default Template\n</code></pre>\n<p>有了翻页器组件，有了模版，就差数据了。</p>\n<p>修改下 <code>gatsby-node.js</code></p>\n<pre><code class=\"language-js\">const path = require('path')\nconst createPaginatedPages = require('gatsby-paginate')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ actions, graphql }) => {\n    const { createPage } = actions\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 生成博文翻页\n                const PostsTemplate = path.resolve('./src/templates/posts.js')\n                createPaginatedPages({\n                    edges        : result.data.allMarkdownRemark.edges,\n                    createPage   : createPage,\n                    pageTemplate : PostsTemplate,\n                    pageLength   : 10,\n                    pathPrefix   : 'blog'\n                })\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p><font color=\"red\">注：由于 <code>gatsby-paginate</code> 要求的 Gatsby 版本要比默认的高，所以我把 Gatsby 版本升级到了最高。于是这里有了点变化。原先的 <code>boundActionCreators</code> 变成了 <code>actions</code>。</font></p>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/yp63Vswica5FHmJGE479XP5k","title":"用 Gatsby 搭建静态博客 1","date":"2019-01-31 18:56:00  +0800","comments":true,"author":"Sir0xb","tags":["Gatsby","React"]},"excerpt":"前几天跟老铁们聊天，有位老铁说想弄一个博客只靠 SEO 被搜索，想再次回归曾经那份朴素。于是我又想起了我那放置许久的博客。 闲聊之余网上找了找有没有不错的静态博客框架可用，毕竟好久没有更新博客的框架了。\n机缘巧合，看到的文章推荐使用的第一项就是  Gatsby…"}},{"node":{"id":"52b8bf60-2969-5799-9c26-4f3c578042e5","html":"<img src=\"https://i.imgur.com/42HYnDK.jpg\" width=\"650\" />\n<blockquote>\n<p>“婚姻会让人生更幸福”——这真是现实中最具杀伤力的谎言之一。文 | 宽宽</p>\n</blockquote>\n<!--more-->\n<p>对于婚姻，我从来抱持着一种近乎悲观主义的态度。</p>\n<p>谈恋爱时，从没想过一定要结婚，结婚后，从没期待能一起过多少年，更不曾痴想“执子之手与子偕老”的浪漫终老。</p>\n<p>却一不小心，在一段关系中度过了17个年头。</p>\n<p>前几天结婚纪念日，两个人盘点这些年的成长，都自觉在关系里获得了极大的滋养。</p>\n<p>比起浪漫和乐观的期待，我想更重要的，是这些年一定做对过什么，这篇文即是凭借此种心念来思考和总结的。</p>\n<img src=\"https://i.imgur.com/ku1pYcM.jpg\" width=\"650\" />\n<p>关于婚姻，最基本的态度，我极其赞成阿兰.德波顿对婚姻的观察：</p>\n<blockquote>\n<p>“婚姻早已成了现代社会制度安排中，最充满悲伤的领域之一。世俗世界断言，人们主要是为了幸福的缘故才进入婚姻殿堂，而此种令人瞠目结舌的论断，更让婚姻制度变得雪上加霜。”</p>\n</blockquote>\n<p>一言以蔽之，“婚姻会让人生更幸福”——这真是现实中最具杀伤力的谎言之一。</p>\n<p>幸福是部分婚姻的结果，不幸福也是部分婚姻的结果，不能因此断言，婚姻会让人幸福，这只是人们的一厢情愿。</p>\n<p>不如说，婚姻有时让人觉得幸福，有时觉得痛苦，有时让人充满安全感，有时让人更没安全感。婚姻有时可以让你奋发于工作成就，有时让你根本无法安心工作。</p>\n<p>婚姻有时让你觉得人生值回票价，但也有很多时候，让你悔不当初。</p>\n<blockquote>\n<p>既然婚姻不能确保幸福，那人们为什么还要结婚？</p>\n</blockquote>\n<p>我的看法，婚姻作为一种普遍而强大的社会制度，对于大部分人，提供了一个“顺其自然”的活法。</p>\n<p>目前来看，不结婚（不包含想结婚但暂时或一直没有结婚对象的群体）是需要人们做出一个决定，或许还需要做出一些抗争。</p>\n<p>而结婚，是顺其自然的、约定俗成的。也就是说，大部分人结婚，不为什么，大家都结，就结喽。</p>\n<p>这一点，可以类比生育。</p>\n<p>我想，没有父母敢说，生孩子是为了让孩子来世上过一次幸福人生。那么不能确保他一生幸福，又为什么要生他？</p>\n<p>“总要经历一下”，这是我听过最多的说法。</p>\n<p>结婚也是，总要经历一下，于是就结了。虽然事实上，这意味着两个人从此创造出一个问题集中营。</p>\n<p>可没有人在你结婚时对你实话实说：祝你们能经历各种打怪升级，偶尔品尝到一点幸福。</p>\n<p>我们只会千百遍地重复谎言：祝你们幸福！</p>\n<p>我丝毫没有控诉婚姻制度的意思，毕竟我也算是这种制度的既得利益者。</p>\n<p>我是想说，对婚姻抱持着理性的看法，比抱持着浪漫主义的期待，对后面的路更有帮助。</p>\n<p>十几年婚姻生活，如大多数人经历过的一样，那些痛哭流涕的漫漫长夜，旷日持久的冷战，半夜里去下载离婚协议书的冲动，以及更多的，不悲不喜琐碎冗杂的平淡日常。</p>\n<p>“9个基本”，是在不断觉察中总结出的一点心得：</p>\n<h4>01、所有选对人的婚姻，都基于相对清晰的了解自我</h4>\n<p>一个有趣的现象：</p>\n<p>女性在选择结婚对象时，往往期待面面俱到，并且以为可以面面俱到，比如，经济不错+长得不错+家境不错+人品不错+各方面都还不错。</p>\n<p>更可怕的是，对方不太达标的某些方面，我们竟会期待婚后通过爱的调教来完成改造。</p>\n<p>男性则全然相反，更可能为了一个突出的优点做出结婚的决定，比如漂亮/会照顾人/善良/孝顺等等。</p>\n<p>这两种选择动机往往都成为婚姻中巨大的隐患，因为两者都带来失望，不存在面面俱到，试图改变一个人，也难如登天；而一招鲜吃几天就腻了。</p>\n<p>对的选择基于十分了解自己的内在，和坦诚面对自己上：</p>\n<blockquote>\n<p>我最看重的方面有哪些？\n我可以承受的对方的毛病有哪些？\n我完全不能接受的毛病是什么？\n我试图改变他的什么吗？\n在一起，我大部分时候的感觉是？</p>\n</blockquote>\n<p>诸如此类。</p>\n<p>很多朋友说，这样了解自己一圈后，很多婚都结不成了。那不也挺好的嘛！</p>\n<h4>02、准备好一起承受，而不止一起享受</h4>\n<p>结婚后，难题不是变少了，而是变多了。过年回哪边啊，是丁克呢还是尽快生孩子，两人的工作是否需要为彼此做出调整，谁理财，家务怎么分工，审美差异好大啊，等等。</p>\n<p>如果只是想宝贵的生命能多在一起腻歪会儿，周末看看电影，假期旅旅行，一起做做喜欢的事，那完全没必要结婚，把简单的事搞复杂。</p>\n<h4>03、只抱最低的期待，得到了说声“谢谢”</h4>\n<p>有人与你立黄昏，有人问你粥可温，有人为你留盏灯，婚姻中，享受到这些并不难，难的是，享受了之后觉得很不够，还想要更多。</p>\n<p>人最大的敌人，是自己的欲望，婚姻最大的敌人，是任何一方永不满足的坑洞。</p>\n<h4>04、放弃在对方身上找自己没有的</h4>\n<p>人的本性决定了，我们总想从他人身上，找寻我们自身所缺乏的至善至美。所以有偶像崇拜。它的另一面，是我们在亲密关系中索求完美，或者崇拜。</p>\n<p>大部分婚姻失和与亲子关系障碍，都来自于要求对方满足自己认为的“更好”。</p>\n<p>阿兰德波顿在《写给无神论者》中说：</p>\n<blockquote>\n<p>“在大多数的世俗争吵中，实际上总是埋伏着一个情绪激烈的问题：‘你怎么就不能更加完美些？’”</p>\n</blockquote>\n<p>伴侣间吵架，我们总是相互指责“你怎么这样？”言外之意，“你怎么就不能做的更好些？”婚姻的头几年，所磨合的大部分问题不会超出这个范畴。</p>\n<p>度过磨合期的伴侣，往往是决定接受在这一问题上的失败，在接纳“不够”中继续往前走。</p>\n<img src=\"https://i.imgur.com/Kr7GR3b.jpg\" width=\"650\" />\n<h4>05、所有想要改变对方的诉求，先从改变自己开始</h4>\n<p>这一点至关重要，我是在第一个七年之痒时才学会的。</p>\n<p>十几年里，在婚姻中不断觉察发现：</p>\n<p>大部分对伴侣的抱怨，是对自己不满的显现。大部分对伴侣的挑剔，是自我质疑的显现。大部分对伴侣的冷漠，是没有呵护好自己的结果。以及，总想要对方改变，其实是恐惧自己做出改变。</p>\n<h4>06、婚姻的正向升级，是家庭</h4>\n<p>（这些词写出来总有一种“知音体”的感觉，没办法，想不到新词，忍一忍）</p>\n<p>结婚头几年，两个人还时有彼此独立的感觉，自由自在，觉得结不结婚没那么大不同。</p>\n<p>越往后，两个人共同生活累积的时光和空间，一起往这个空间里收罗的宝贝，甚至一起生了个孩子，让两个人向陌生的领域拓展，所拓展之处，就叫家庭。</p>\n<p>从此，家庭氛围，就成了关键元素，可以滋养关系，也可以消磨关系。</p>\n<p>杨绛写：</p>\n<blockquote>\n<p>“我们这个家，很朴素；我们三个人，很单纯。我们与世无争，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”</p>\n</blockquote>\n<blockquote>\n<p>这是我最羡慕的一种家庭氛围。</p>\n</blockquote>\n<p>好的家庭氛围，来自善于对情绪做出表达和疏导，来自花大把时间陪伴，来自对客观问题的理性分析和处理，来自遭遇挫折时不互相指责。</p>\n<p>更重要的，来自为了家庭事务一起学习和成长，怎么解决财务问题，怎么教育孩子，怎么平衡工作和家庭，这些难题都需要一起学习讨论，彼此都要做出改变。</p>\n<p>有人一直处在婚姻中，却始终没有创造出好的家庭氛围。从不自省学习，各自抱持着自以为是的固执观念，彼此折磨。</p>\n<p>家庭成型之初，需要两人倾注心血滋养，一旦形成了彼此都认同且享受的家庭氛围，它就成了世上最能疗愈你的地方。</p>\n<h4>07、除了说爱，也要说规则</h4>\n<p>所有宗教都有戒律和仪轨，所有公司都有规章制度，即便是松散的社团组织，也要定期开个会，讨论下分工。</p>\n<p>可是回到家庭里，就少见有运用理性工具来有效管理家庭生活的。</p>\n<p>许多争吵，都在反复同一点鸡毛蒜皮，屡吵不改，就上升为“你还想不想过了”或者“你根不就不爱我”这样的原则性问题，纯属混淆视听。</p>\n<p>所有引发冲突的客观问题、主观诉求，通过理智地沟通分析然后一起商讨规则，来尝试解决。</p>\n<p>相信大部分人在职场中，都愿意也能够寻找解决问题的工具，但一进入亲密关系，就失调了。</p>\n<p>这不是能力的问题，而是意愿的问题。或者不如说，是某些关于婚姻的错误论断所致。比如，爱的话一切都对，不爱了一切都错。</p>\n<p>可现实是，不是不爱，是许多爱都被不停做错事给消磨光了。</p>\n<img src=\"https://i.imgur.com/Ye7U133.jpg\" width=\"650\" />\n<h4>08、把对方当作镜子，映照、完善自己</h4>\n<p>这世上没有谁比伴侣更了解我们，尤其是那些自己都不愿面对的缺点，这些是吵架时会造成伤害的原因，即最善于捅到对方的痛处。</p>\n<p>佛法说，当我们有强烈的情绪反应出现时，说明我们内在有一个未经检视与抚慰的坑洞。</p>\n<p>别无他法，利用每一次强烈的情绪反应，获得检视自己的机会，从而变得更加完善。</p>\n<p>也因此，能处理好亲密关系的人，也更善于处理其他的社交关系，因为一个不断完善的自我，是一切关系的核心。</p>\n<blockquote>\n<p>在这一点上，我深深地认同，结婚带来的最大好处，是一个合理合法的、复杂而有用的修行道场。\n没有谁的婚姻更容易些，在这个层面上人人平等，但凭此获得的成长却是云泥之别。</p>\n</blockquote>\n<p>婚姻中，不念过去，不畏将来。不念过去，是不去执着当初的选择是对是错，不畏将来，也不去计划和期待未来一起走多久。</p>\n<p>活在现状里，把选择变成最适合自己的，这是我们唯一可把握的。</p>\n<h4>09、熬不下去时，保留自己放弃的权利</h4>\n<p>如果努力过了，尝试过了，关系依然恶化，或者在婚姻中长时间觉得无趣窒息没意思，丧失了生活的大部分乐趣，那不如放弃。</p>\n<p>始终需要抱持一个达观的态度，婚姻只是人类自己发明出来的一种制度，就像人类先天存在百分之一到十的同性恋群体，那么一定有为数不少的人，并不适合婚姻这种制度，这本身没什么大不了的。</p>\n<p>人生苦短，必要时先放过自己。</p>\n<img src=\"https://i.imgur.com/2FbC6JF.jpg\" width=\"650\" />\n<p>最后想说，在我自己的婚姻中，作为一个佛教徒的世界观和修行方法，带给我极大的帮助。</p>\n<p>简单地说，相信人生皆苦，那么就愿意承受婚姻中的挫折和难题（深知换个人也一样要面对这些难题）。</p>\n<p>其次，让亲密关系受困的大部分情绪问题，通过日常的打坐冥想来标记和检视，而不是陷在情绪中去逼迫对方。</p>\n<p>深信无常，所以珍惜眼前的时光。</p>\n<p>愿我们在婚姻中一直有成长。</p>\n<img src=\"https://i.imgur.com/TCOKz0l.jpg\" width=\"650\" />\n<h4>- THE END -</h4>\n<p>[<a target=\"_blank\" href=\"https://mp.weixin.qq.com/s/sxpQJeWvLNT8c2t1ShXzMg\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/qh15rvq7JVeTiksp2e8qKSsG","title":"结婚12年，让我受益的“9个基本”","date":"2018-11-19 14:17:00 +0800","comments":true,"author":"宽宽","tags":["思考","领悟"]},"excerpt":"“婚姻会让人生更幸福”——这真是现实中最具杀伤力的谎言之一。文  |  宽宽 对于婚姻，我从来抱持着一种近乎悲观主义的态度。 谈恋爱时，从没想过一定要结婚，结婚后，从没期待能一起过多少年，更不曾痴想“执子之手与子偕老”的浪漫终老。 却一不小心，在一段关系中度过了1…"}},{"node":{"id":"da604cc0-bb1a-5db1-9d1b-e8317847e6f3","html":"<img src=\"https://i.imgur.com/tfc14Pz.png\" width=\"650\" />\n<p>发现自己的网站突然开始报 522 错误，之前查资料遇到过好多回，没想到这次轮到自己了。</p>\n<!--more-->\n<h2>错误做法</h2>\n<p>一开始以为是转载了些不和谐的文章被屏蔽了。</p>\n<p>后来以为是阿里相应号召严格把控信息关，国外服务器不给解析过去了。</p>\n<p>最后发现，其实是 github 更新，地址信息变更了。</p>\n<h2>问题解决方式</h2>\n<p>命令行运行</p>\n<pre><code class=\"language-bash\">dig xxx.github.io +nostats +nocomments +nocmd | grep xxx.github.io\n</code></pre>\n<p>得到</p>\n<pre><code class=\"language-bash\">dig xxx.github.io +nostats +nocomments +nocmd | grep xxx.github.io\n; &#x3C;&#x3C;>> DiG 9.10.6 &#x3C;&#x3C;>> xxx.github.io +nostats +nocomments +nocmd\n;xxx.github.io.      IN  A\nxxx.github.io.   3089    IN  A   185.199.a.yyy\nxxx.github.io.   3089    IN  A   185.199.b.yyy\nxxx.github.io.   3089    IN  A   185.199.c.yyy\nxxx.github.io.   3089    IN  A   185.199.d.yyy\n</code></pre>\n<font color=\"red\">\nxxx 换成自己的域名开头；185.199.a.yyy 得到的是数字，此处随便换成了字母，参考即可；\n</font>\n<p>将得到的IP地址配到DNS解析里，问题解决。</p>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/2N1lWmx8tQlaEPDQKX06Txib","title":"Github 静态站报 522 错误","date":"2018-09-27 10:29:00 +0800","comments":true,"author":"Sir0xb","tags":["github","blog"]},"excerpt":"发现自己的网站突然开始报 522 错误，之前查资料遇到过好多回，没想到这次轮到自己了。 错误做法 一开始以为是转载了些不和谐的文章被屏蔽了。 后来以为是阿里相应号召严格把控信息关，国外服务器不给解析过去了。 最后发现，其实是 github…"}},{"node":{"id":"9edbd6ae-c7c6-56c0-a6a6-d602cf0231b1","html":"<p>注意，官方已经说明过，以前的发布方法不再适用，需要按以下的流程，才可以发布成功。</p>\n<h2>前言</h2>\n<p>之所以有这么多开发者使用Sublime Text来作为开发工具，归根到底是其有完善的生态系统。而Package Control在其中扮演着重要的角色，不仅下载插件便捷，还能快速查找需要的插件。\n如果你已经开发了插件，可以考虑把插件发布到Package Control channel平台上，让全球的开发者都可以轻松的下载到你的插件。</p>\n<h2>1.检查已存在的插件</h2>\n<ul>\n<li>浏览[<a target=\"_blank\" href=\"https://packagecontrol.io/search\">Search page</a>]，查找是否有已经存在相似的插件名</li>\n<li>在添加插件之前，尝试改善已存在的插件。我们强烈建议你可以在已存在的插件上添加新功能或者修改，总比增加许多相似的名字好。</li>\n</ul>\n<h2>2.包名</h2>\n<p>这里的包名指的是在官方列表查看到的插件名。</p>\n<!--more-->\n<ul>\n<li>不要使用单词Sublime作为包名。这是因为插件都是通过Package Control获得的，如果使用了Sublime会让用户误会或混淆。</li>\n<li>不要使用于其他插件特别相似的名字。例如我们不希望有SublimeTodo 和 Sublime T0d0的情况。</li>\n<li>请使用驼峰命名或下划线命名。</li>\n<li>不能包含. \\ &#x3C;, >, :, \", /, , |, ?等特殊符号。</li>\n<li>只能使用 ASCII编码命名，不能使用中文。</li>\n</ul>\n<h2>3.创建版本库</h2>\n<ul>\n<li>使用 GitHub 或 BitBucket创建版本库。每一个库只能包含一个插件包，并且要确保包的根目录与库的根目录同级。把包内容提交到主干。</li>\n<li>现在可以不用再添加packages.json文件。</li>\n</ul>\n<h2>4.添加你的插件地址到Package Control Channel</h2>\n<ul>\n<li>在Package Control Channel的版本库中，fork一个到你自己的GitHub中，目的是为了添加你自己的插件。</li>\n<li>复制你fork的项目到本地。</li>\n<li>在Sublime Text中打开你fork的package<em>control</em>channel。</li>\n<li>\n<p>添加插件信息，如下：</p>\n<ul>\n<li>打开repository文件夹，你会看到有很多json文件，根据你的包名头个字符来选择对应的json文件，例如我的包名叫做LuaJumpDefinition,那么我就选择l.json这个文件。然后打开json文件，在适当地方添加：</li>\n</ul>\n</li>\n</ul>\n<p>使用GitHub：</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Alignment\",\n    \"details\": \"https://github.com/wbond/sublime_alignment\",\n    \"releases\": [\n        {\n            \"sublime_text\": \"*\",\n            \"tags\": true\n        }\n    ]\n}\n</code></pre>\n<p>使用BitBucket：</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Alignment\",\n    \"details\": \"https://bitbucket.org/wbond/sublime_alignment\",\n    \"releases\": [\n        {\n            \"sublime_text\": \"*\",\n            \"tags\": true\n        }\n    ]\n}\n</code></pre>\n<blockquote>\n<p>需要注意一下几点：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wbond/sublime_alignment/tags\">https://github.com/wbond/sublime_alignment/tags</a> <font color=\"red\">Git地址加上tag，打上 v1.0.0 等tag。v一定要小写。</font></li>\n<li>需要根据 json 里的 name 找到字母排序位置。</li>\n</ul>\n<p>键名说明：</p>\n<ul>\n<li>name：插件名。</li>\n<li>details：你插件的版本库地址。</li>\n<li>release：发布信息。一般包括sublime<em>text，tags，platforms。sublime</em>text表示Sublime Text的版本，如果都可适配则填\n*，如果需要3以上的，则填>=3000。以前的branch现在已经不可用了，必须以tags来代替。platforms表示平台，如果所有系统都适配则可用不用填。</li>\n</ul>\n<h2>5.测试</h2>\n<ul>\n<li>通过Package Control安装 <a target=\"_blank\" href=\"https://packagecontrol.io/packages/ChannelRepositoryTools\">ChannelRepositoryTools</a>插件。</li>\n<li>通过Tools->Command Palette打开控制面板，执行ChannelRepositoryTools: Test Default Channel command，等待测试结果。</li>\n</ul>\n<h2>6.提交到主干</h2>\n<ul>\n<li>浏览你fork出来的package<em>control</em>channel项目</li>\n<li>点击项目的Pull Requests，点击New Pull Request，创建合并主干请求。</li>\n<li>编辑请求信息。</li>\n<li>点击Create pull request button。</li>\n</ul>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/Z8r3O8d6bkxBF8XEKmBfqAIZ","title":"Sublime Text3 插件发布","date":"2018-02-07 22:10:00 +0800","comments":true,"author":"Sir0xb","tags":["Sublime Text3"]},"excerpt":"注意，官方已经说明过，以前的发布方法不再适用，需要按以下的流程，才可以发布成功。 前言 之所以有这么多开发者使用Sublime Text来作为开发工具，归根到底是其有完善的生态系统。而Package Control…"}}],"pathPrefix":"","first":true,"last":false,"index":1,"pageCount":29,"additionalContext":{}}}
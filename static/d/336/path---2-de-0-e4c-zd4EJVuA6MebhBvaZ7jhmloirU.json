{"pageContext":{"group":[{"node":{"id":"60a282ee-ab11-5076-a608-9d10cd9a7036","html":"<h3># 搭建项目</h3>\n<pre><code class=\"language-bash\">mkdir brick &#x26;&#x26; cd brick\n</code></pre>\n<h3># 创建页面</h3>\n<pre><code class=\"language-bash\">mkdir src\ntouch src/index.html\n</code></pre>\n<p>编辑 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<!--more-->\n<p>浏览器控制台看到日志输出。</p>\n<h3># 引入 webpack</h3>\n<h6>1. 初始化node环境</h6>\n<pre><code class=\"language-bash\">npm init\n</code></pre>\n<h6>2. 引入webpack</h6>\n<pre><code class=\"language-bash\">npm i -D webapck\ntouch webpack.config.js\n</code></pre>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path from \"path\";\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist/index.js\"),\n        filename: \"bundle.js\"\n    }\n};\n</code></pre>\n<p>webpack 编译生成输出文件</p>\n<pre><code class=\"language-bash\"># 需要全局安装 webpack。安装命令: npm i -g webpack\nwebpack\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">console.log(\"webpack 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>查看浏览器控制台，输出内容变了。说明webpack开始工作了。</p>\n<h3># 搭建babel环境</h3>\n<pre><code class=\"language-bash\">npm i -D babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0\n\ntouch .babelrc\n</code></pre>\n<p>编辑 <code>.babelrc</code></p>\n<pre><code class=\"language-json\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": []\n}\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">const func = (str) => {\n    document.getElementById(\"app\").innerHTML = str;\n};\n\nfunc(\"Babel 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>重新 webpack 编译文件，刷新页面看到字串已经打入页面。</p>\n<h3># 搭建服务器环境</h3>\n<pre><code class=\"language-bash\">npm i -D webapck-dev-server\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\ndevServer: {\n    port: 3000\n}\n...\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>这时访问 <code>http://localhost:3000</code> 能看到项目目录结构，当访问 <code>http://localhost:3000/src</code> 目录就能看到我们做的页面了。</p>\n<blockquote>\n<p>虽然开始 Work 了，还是有几个问题</p>\n</blockquote>\n<ol>\n<li>代码目录里的代码，没能自动生成到 dist 目录中。</li>\n<li>服务启动之后，希望能直接访问到 html 页面。</li>\n</ol>\n<p>引入 webpack 插件 <code>html-webpack-plugin</code></p>\n<pre><code class=\"language-bash\">npm i -D html-webpack-plugin\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\n// new\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n// /new\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    // new\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>访问 <code>http://localhost:3000</code> 工作正常。</p>\n<h3># 引入 React</h3>\n<pre><code class=\"language-bash\">npm i -S react react-dom\n</code></pre>\n<p>编辑 <code>webpack.config.js</code> 添加 jsx 解析</p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // new\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>运行服务器，看到 React 开始工作。</p>\n<h3># 优化：分目录管理资源、动态解析</h3>\n<blockquote>\n<p>到目前有一下几个问题：</p>\n</blockquote>\n<ol>\n<li>js静态资源和html都输出到了一个目录，没有分目录。</li>\n<li>静态资源名字固定，会有缓存问题。</li>\n<li>每次修改都要重启服务器，最好能热加载。</li>\n</ol>\n<h6>1）静态资源目录配置修改</h6>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\noutput: {\n    path: path.join(__dirname, \"./dist\"),\n    filename: \"./js/bundle.js\"\n},\n...\n</code></pre>\n<p>浏览器 Network 能看到 js 文件已经有独立目录了。</p>\n<h6>2) 添加文件 hash</h6>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        // new: 第一种方法 - 文件名直接 hash\n        filename: \"./js/[name].[hash].js\"\n        // /new\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n            // new: 第二种方法 - 文件后参数形式 hash\n            hash: true\n            // /new\n        })\n    ],\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>浏览器 Network 看到 hash 值已经添加进去了。</p>\n<h6>3) 配置热加载</h6>\n<p>修改 <code>webpack.config.js</code> 添加两处配置</p>\n<p>plugins 添加配置</p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    // new\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n    // /new\n],\n...\n</code></pre>\n<p>devServer 添加配置</p>\n<pre><code class=\"language-js\">...\nhot: true\n...\n</code></pre>\n<p>运行服务器修改文件内容，可以看到不用刷新浏览器也能看到效果了。</p>\n<h3># 添加网站 favicon.ico</h3>\n<p>设计ico文件，放入 <code>./src/assets/images/</code> 文件夹下</p>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        // new\n        favicon: path.join(__dirname, \"./src/assets/images/favicon.ico\"),\n        // /new\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n],\n...\n</code></pre>\n<h3># 添加sass加载器</h3>\n<pre><code class=\"language-bash\">npm i -D style-loader css-loader sass-loader node-sass\n</code></pre>\n<p><code>webpack.config.js</code> 的 module 添加配置</p>\n<pre><code class=\"language-js\">...\nrules: [{\n    test: /\\.(js|jsx)$/,\n    loader: \"babel-loader\",\n    exclude: \"/node_modules\"\n}, { // new\n    test: /\\.(scss|sass)$/,\n    use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n}] // /new\n...\n</code></pre>\n<p>创建 sass 文件 <code>./src/assets/styles/main.scss</code></p>\n<pre><code class=\"language-sass\">body {\n    background-color: gray;\n}\n</code></pre>\n<p>修改 index.js 文件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\n// new\nimport \"./assets/styles/main.scss\";\n// /new\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React~~!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>在看页面整个变灰了。</p>\n<h3># 添加 React 路由</h3>\n<pre><code class=\"language-bash\">npm i -S react-router react-router-dom\n</code></pre>\n<p>添加测试文件</p>\n<pre><code class=\"language-bash\">mkdir src/containers\nmkdir src/containers/Home\nmkdir src/containers/Users\ntouch src/containers/Home/index.js\ntouch src/containers/Users/index.js\n</code></pre>\n<p>编辑 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是首页&#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是用户页面&#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"./containers/Users\";\nimport HomePage from \"./containers/Home\";\n\nimport \"./assets/styles/main.scss\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>进入页面看到页面地址变成了 <code>http://localhost:3000/#/</code> ，内容也match到了home的代码。修改hash地址到 /users 也能正确match到users代码。</p>\n<h3># 添加 antd UI 库</h3>\n<p>antd 依赖 less 解析，所以需要先配置好less</p>\n<pre><code class=\"language-bash\">npm i -D less less-loader\n</code></pre>\n<p>修改 webpack 配置(module -> rules添加下面的配置)</p>\n<pre><code class=\"language-js\">...\n{\n    test: /\\.less$/,\n    use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n}\n...\n</code></pre>\n<p>安装 antd</p>\n<pre><code class=\"language-bash\">npm i -S antd\n</code></pre>\n<p>修改 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>这是首页&#x3C;/span>\n                &#x3C;Button type=\"primary\">Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>看到蓝色《Button测试》按钮，说明antd正常工作</p>\n<blockquote>\n<p>每次输入运行服务器命令很麻烦，可以配置到 package.json 命令里</p>\n</blockquote>\n<pre><code class=\"language-json\">\"dev\": \"webpack-dev-server --config webpack.config.js --color --progress\"\n</code></pre>\n<p>既可以看到生成进度，颜色也比以前好看了。</p>\n<h3># React hot reload</h3>\n<p>修改 <code>Home/index.js</code> ，增加一个 state React状态值</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n    countPlus () {\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>目前计数器: { this.state.count }&#x3C;/span>\n                &#x3C;br />\n                &#x3C;Button type=\"primary\" onClick={ this.countPlus.bind(this) }>Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>浏览器看到页面效果。点击按钮几次，计数器增加。\n再修改文案看看，浏览器自动更新，但是计数器状态又被重置了。\n如果我们在开发一个购物车功能，那么我们之前挑选好的货物，因为一个文案的修改就会被清空。</p>\n</blockquote>\n<p>安装 react-hot-loader 加载器</p>\n<pre><code class=\"language-bash\">npm i -D react-hot-loader\n</code></pre>\n<p>修改 <code>.babelrc</code> 增加 hot reload 插件配置</p>\n<pre><code class=\"language-text\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": [\n        \"react-hot-loader/babel\"\n    ]\n}\n</code></pre>\n<p>修改 webpack 配置</p>\n<pre><code class=\"language-js\">...\nentry: [\n    \"react-hot-loader/patch\",\n    path.join(__dirname, \"./src/index.js\")\n],\n...\n</code></pre>\n<p>将路由代码提取到独立文件中</p>\n<pre><code class=\"language-bash\">mkdir ./src/config\ntouch ./src/config/routers.js\n</code></pre>\n<p><code>routers.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"../containers/Users\";\nimport HomePage from \"../containers/Home\";\n\nclass Routers extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nexport default Routers;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport Routers from \"./config/routers\";\n\nimport \"./assets/styles/main.scss\";\n\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(&#x3C;Routers />, document.getElementById(\"app\"));\n};\n\nrenderWithHotReload(Routers);\n\nif (module.hot) {\n    module.hot.accept(\"./config/routers\", () => {\n        let Routers = require(\"./config/routers\").default;\n        renderWithHotReload(Routers);\n    });\n}\n</code></pre>\n<p>重新跑一下项目。页面点击几次按钮，修改文案，Cool！React 状态没有被刷。</p>\n<h3># Rudex: Reducer -> Store -> Provider -> Components</h3>\n<p>先安装依赖包</p>\n<pre><code class=\"language-bash\">npm i -S redux react-redux\n</code></pre>\n<p>官方文档对 store 的定义是一个大的js对象。那么先创建一个。\n<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\n// 引入 store 构造函数\nimport { createStore } from \"redux\";\n...\nconst store = createStore();\n...\n</code></pre>\n<p>先弄一个静态数据，等redux结构搭建好了再动态获取。\n<code>src/reducers/reducer-users.js</code></p>\n<pre><code class=\"language-js\">export default () => {\n    return [{\n        id: 1,\n        first: \"Bucky\",\n        last: \"Roberts\",\n        age: 71,\n        description: \"Bucky is a React developer and YouTuBer\",\n        thumbnail: \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        id: 2,\n        first: \"Joby\",\n        last: \"Wasilenko\",\n        age: 27,\n        description: \"Joby loves the Packers, cheese, and turtles.\",\n        thumbnail: \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        id: 3,\n        first: \"Madison\",\n        last: \"Williams\",\n        age: 24,\n        description: \"Madi likes her dog but it is really annoying.\",\n        thumbnail: \"http://i.imgur.com/4EMtxHB.png\"\n    }];\n};\n</code></pre>\n<p>store本身是一个对象，如果返回列表就多个对象了。加载home等其他的container加载数据，肯定不能直接将这些reducer提交给store。\n整合一下数据<code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport UserReducer from \"./reducer-users\";\n// 其他的 container数据，可以继续添加\n\nconst allReducers = combineReducers({\n    users: UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>修改<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport allReducers from \"./reducers\"; // 引入 reducers\n...\nconst store = createStore(allReducers);\n...\n</code></pre>\n<p>到此，数据已经送到app入口。怎么传递给 containers 呢？\n引入 provider <code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { Provider } from \"react-redux\";\n...\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(\n        &#x3C;Provider store={ store }>\n            &#x3C;Routers />\n        &#x3C;/Provider>, document.getElementById(\"app\"));\n};\n...\n</code></pre>\n<p>数据现在提交到了 container 里，页面怎么从上下文获取呢？\n我们需要一个redux提供的包装器（React经常会用到这种技术，用函数返回一个包装过的component）\n<code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { connect } from \"react-redux\";\n...\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>好，数据已经在 container 的 prop 里了。\n修改一下 <code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                {this.props.users.map((user) => (\n                    &#x3C;div key={ user.id }>{ user.first } { user.last }&#x3C;/div>\n                ))}\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>浏览器访问下 <code>http://localhost:3000/#/users</code>，是不是我们定义的静态数据出来了？</p>\n<h3># Redux: Component -> action -> store</h3>\n<p>简单实现一下交互效果。\n先把用户界面做成上列表，下详情的结构。</p>\n<pre><code class=\"language-bash\">touch src/containers/Users/userList.js\ntouch src/containers/Users/userDetail.js\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nimport UserList from \"./userList\";\nimport UserDetail from \"./userDetail\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;h1>用户列表:&#x3C;/h1>\n                &#x3C;hr />\n                &#x3C;UserList />\n                &#x3C;br />\n                &#x3C;br />\n                &#x3C;h2>用户详情:&#x3C;/h2>\n                &#x3C;hr />\n                &#x3C;UserDetail />\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>编辑 <code>Users/userDetail.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass UserDetail extends React.Component {\n    render() {\n        return (\n            &#x3C;div>&#x3C;/div>\n        );\n    }\n}\n\nexport default UserDetail;\n</code></pre>\n<p>编辑 <code>Users/userList.js</code> 其实就是原本 index 里的代码</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(UserList);\n</code></pre>\n<p>添加单击事件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>处理下事件逻辑\n<code>actions/index.js</code></p>\n<pre><code class=\"language-js\">export const selectUser = (user) => {\n    console.log(\"Click on user\", user.first);\n    return {\n        type    : \"USER_SELECTED\",\n        payload : user\n    };\n};\n</code></pre>\n<p>点击事件是不是有响应了？</p>\n<p>继续...</p>\n<p>现在有了如下的事件，我们还需要reducer去处理此类型的事件。</p>\n<pre><code class=\"language-json\">{\n    type    : \"USER_SELECTED\",\n    payload : user\n}\n</code></pre>\n<p>创建 <code>src/reducers/reducer-active-user.js</code></p>\n<pre><code class=\"language-js\">export default (state = null, action) => {\n    switch (action.type) {\n        case \"USER_SELECTED\":\n            return action.payload;\n    }\n    return state;\n};\n</code></pre>\n<p>同样在 <code>Users/userDetail.js</code> 里添加上下文转 props 的逻辑</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass UserDetail extends React.Component {\n    render() {\n        if (this.props.user === null) {\n            return (&#x3C;h4>请选择用户&#x3C;/h4>);\n        }\n        return (\n            &#x3C;div>\n                &#x3C;img src={ this.props.user.thumbnail } />\n                &#x3C;h2>{ this.props.user.first } { this.props.user.last }&#x3C;/h2>\n                &#x3C;h3>{ this.props.user.age }&#x3C;/h3>\n                &#x3C;h3>{ this.props.user.description }&#x3C;/h3>\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.activeUser\n    };\n};\n\nexport default connect(mapStateToProps)(UserDetail);\n</code></pre>\n<p>简单交互完成。redux事件流闭环了。</p>\n<h3># 搭建 api 服务器</h3>\n<p>创建一个简单的json服务器</p>\n<pre><code class=\"language-bash\">npm i -S json-server\n</code></pre>\n<p>创建数据库</p>\n<pre><code class=\"language-bash\">mkdir server\ntouch server/db.json\n</code></pre>\n<p>编辑 <code>db.json</code></p>\n<pre><code class=\"language-json\">{\n    \"users\": [{\n        \"id\": 1,\n        \"first\": \"Bucky\",\n        \"last\": \"Roberts\",\n        \"age\": 71,\n        \"description\": \"Bucky is a React developer and YouTuBer\",\n        \"thumbnail\": \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        \"id\": 2,\n        \"first\": \"Joby\",\n        \"last\": \"Wasilenko\",\n        \"age\": 27,\n        \"description\": \"Joby loves the Packers, cheese, and turtles.\",\n        \"thumbnail\": \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        \"id\": 3,\n        \"first\": \"Madison\",\n        \"last\": \"Williams\",\n        \"age\": 24,\n        \"description\": \"Madi likes her dog but it is really annoying.\",\n        \"thumbnail\": \"http://i.imgur.com/4EMtxHB.png\"\n    }]\n}\n</code></pre>\n<p>修改 <code>package.json</code> scripts 属性添加如下命令</p>\n<pre><code class=\"language-json\">...\n\"server\": \"json-server server/db.json -w -p 3030\"\n...\n</code></pre>\n<p><code>npm run server</code> 之后访问 <code>http://localhost:3030/db</code> 是不是看到我们的数据了。</p>\n<h3># 数据从 json 服务器上获取</h3>\n<p>先创建 reducer。<code>src/reducers/userReducer.js</code></p>\n<pre><code class=\"language-js\">import {\n    GET_USER_LIST,\n    GET_USER_LIST_SUCCESS,\n    GET_USER_LIST_ERROR\n} from \"../actions/userActions\";\n\nconst initState = {\n    isLoading: false,\n    userList: [],\n    errorMsg: \"\"\n};\n\nexport default (state = initState, action) => {\n    switch (action.type) {\n        case GET_USER_LIST:\n            console.log(\"GET_USER_LIST\");\n            return {\n                ...state,\n                isLoading: true,\n                userList: [],\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_SUCCESS:\n            console.log(\"GET_USER_LIST_SUCCESS\");\n            console.log(action.userList);\n            return {\n                ...state,\n                isLoading: false,\n                userList: action.userList,\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_ERROR:\n            console.log(\"GET_USER_LIST_ERROR\");\n            return {\n                ...state,\n                isLoading: false,\n                userList: [],\n                errorMsg: \"数据请求失败...\"\n            };\n        default:\n            return state;\n    }\n};\n</code></pre>\n<p>修改 <code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport User__Reducer from \"./reducer-users\";\nimport ActiveUserReducer from \"./reducer-active-user\";\n\nimport UserReducer from \"./userReducer\";\n\nconst allReducers = combineReducers({\n    users        : User__Reducer,\n    activeUser   : ActiveUserReducer,\n    userState    : UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>添加 <code>src/actions/userActions.js</code></p>\n<pre><code class=\"language-js\">export const GET_USER_LIST         = \"users/GET_USER_LIST\";\nexport const GET_USER_LIST_SUCCESS = \"users/GET_USER_LIST_SUCCESS\";\nexport const GET_USER_LIST_ERROR   = \"users/GET_USER_LIST_ERROR\";\n\nexport const getUserList = () => ({ type: GET_USER_LIST });\nexport const getUserListSuccess = (payload) => ({ type: GET_USER_LIST_SUCCESS, userList: payload });\nexport const getUserListError = () => ({ type: GET_USER_LIST_ERROR });\n\nexport const initUserList = () => {\n    return dispatch => {\n        dispatch(getUserList());\n\n        // 延时查看界面效果\n        setTimeout(function () {\n            fetch(\"http://localhost:3030/users\")\n                .then(res => res.json())\n                .then(list => dispatch(getUserListSuccess(list)))\n                .catch((err) => dispatch(getUserListError()));\n        }, 1000);\n\n        // return fetch(\"http://localhost:3030/users\")\n        //      .then(res => res.json())\n        //      .then(list => dispatch(getUserListSuccess(list)))\n        //      .catch((err) => dispatch(getUserListError()));\n    };\n};\n</code></pre>\n<p>就此，数据部分准备好了。该修改界面了。</p>\n<p>修改用户列表加载逻辑 <code>src/container/Users/userList.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nimport { initUserList } from \"../../actions/userActions\";\nimport { store } from \"../../index\";\n\nclass UserList extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = this.props.userState;\n        this.props.initUserList();\n    }\n    componentWillReceiveProps (newProps) {\n        this.setState(newProps.userState);\n    }\n    reloadDate () {\n        this.props.initUserList();\n    }\n    render() {\n        if (this.state.isLoading) {\n            return (&#x3C;h4>数据加载中&#x3C;/h4>);\n        }\n        return (\n            &#x3C;ul>\n                {this.state.userList.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n                &#x3C;li>\n                    &#x3C;br />\n                    &#x3C;button onClick={ this.reloadDate.bind(this) }>从新请求数据&#x3C;/button>\n                &#x3C;/li>\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users     : state.users,\n        userState : state.userState\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser,\n        initUserList: initUserList\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>刷新浏览器。首先会看到“数据加载中”，过1秒之后，数据加载出来。用户名的点击效果还是上一节的内容，没有变化。</p>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/zZDqsfQ1PK8UNWIktSnZWnIF","title":"从零开始搭建 React 项目","date":"2018-02-07 21:08:25 +0800","comments":true,"author":"Sir0xb","tags":["React"]},"excerpt":"# 搭建项目 # 创建页面 编辑  src/index.html 浏览器控制台看到日志输出。 # 引入 webpack 1. 初始化node环境 2. 引入webpack 编辑  webpack.config.js webpack 编译生成输出文件 修改  src/index…"}},{"node":{"id":"a646b734-95ce-5afe-ab58-19c35ee965ee","html":"<img src=\"https://i.imgur.com/K4XPuli.jpg\" width=\"650\" />\n<blockquote>\n<p>赫弗南：若把企业看作网络，而非阶梯或金字塔，那就应让信息毫无阻碍地快速流动到它能发挥最大效用的地方。</p>\n</blockquote>\n<!--more-->\n<p>“你是共产主义者吗？” 这个问题来自一位首席执行官。他对我支持更扁平的组织结构感到极度困惑，以至于他想当然地认为，我这种主张的背后一定有政治动机。他想知道，等级制度到底有什么不好的呢？</p>\n<p>这是个好问题。</p>\n<p>眼下许多组织正努力为员工创造一个更公平的竞争环境，然而如果不理解这种努力事实上是对逾 10 年的制度失败做出的回应，将没有几家组织能够成功。制度失败包括做了不应当做的事——比如不当销售、操纵伦敦银行间同业拆借利率 (Libor) 和外汇市场，或者滥用市场和损害客户。制度失败还包括未做应当做的事：尤其是老牌企业未进行创新或者未回应颠覆者对其竞争力的威胁。</p>\n<p>为何大型酒店公司当初没把爱彼迎 (Airbnb) 当回事？为何汽车制造企业当初对开发电动汽车或无人驾驶汽车不上心？</p>\n<p>工作场所根深蒂固的等级制度很可能是导致此类视而不见的主要原因。这种视而不见造成了扭曲的后果。研究等级制度影响的先驱海尔特 • 霍夫斯泰德 (Geert Hofstede) 曾经是效力于 IBM 的社会心理学家。他发现，在一家公司里，等级越多，腐败就越严重。处于顶端的那些人想做什么都可以，几乎不受制约；底层员工则感到没办法（或畏惧）通过正规流程做成任何事。</p>\n<p>在权力层级很多的企业里，底层员工很容易把责任交给级别更高的人去承担；较低级别的员工感到他们无权自作主张。那些人微言轻的员工根本不相信（也没有这份自信）：自己的警告、甚至是一个好想法能够安全地抵达更高级别的领导耳中。他们很容易认为，如果真的存在问题或者重大机遇，那么老板应该已经知晓了。所以顶层的视而不见状况持续存在。</p>\n<p>把皮球踢出去很有吸引力。谁也不想被贴上麻烦制造者、甚至更严重的告密者的标签。保持缄默既服从了等级制度，又避免了对抗。这甚至可能会得到奖赏：不告密的好士兵被认为是忠诚可靠的。</p>\n<p>几十年来，经理们一直想当然地认为，企业晋升阶梯很有激励作用，沿着阶梯往上爬的梦想将推动员工表现得更好。这种假设支撑了强迫排名，就是指对所有员工进行评定、然后把他们安排在阶梯的某一级的制度。让该制度出名的是通用电气 (GE) 的杰克 • 韦尔奇(Jack Welch)，但实际上，这项制度并没有实现不同级别间的人员流动。大多数人都停留在中层，在这个级别上，只要表现得过得去，就能坐稳位置；而那些处于顶层的人相互竞争，彼此提防。结果是大家不相互分享想法——如果帮助一名同事可能让她级别上升、让自己级别下降的话，我可能会把自己的关键信息私藏起来，作为自己的筹码。绝妙的主意和至关重要的问题都无法亮相，在权力斗争和地盘争夺中丢失或被耽误了。</p>\n<p>当今天的机构努力创新之际，它们遇到了一个令人尴尬的事实：创新的成功是不顾及地位的。最好的主意可能、也确实来自任何地方。开源软件开发之所以快速且绝妙，就是因为一条简单的规则：胜利属于最好的方案——而不管方案提出者的资历、地位或头衔如何。</p>\n<p>在我的一家公司里，一个严重技术故障被一名没有技术专长的高管解决了——她提出了解决问题的一种不同思路。</p>\n<p>如果你把一家机构看作一个网络，而非一部阶梯或一座金字塔，那么关键的一点是让信息毫无阻碍地快速流动到它能发挥最大效用的地方。在一个所有人都感到能够畅所欲言、有安全感的环境中，创新、诚信和责任感才更容易涌现。</p>\n<p>所以，不，我不是共产主义者，但经验向我证明，领导层的最艰难工作之一就是打造这样一种环境，让最好的想法和计划自由地流向那些对它们持最开放态度的人。打破等级制度本身不会创造这些有益的东西——但可以确保这些东西能够及时到来。</p>\n<p>本文作者为创业家、演说家，著有《盲目心理学》(Wilful Blindness) 一书</p>\n<p>译者 / 何黎</p>\n<p>[<a target=\"_blank\" href=\"http://www.ftchinese.com/story/001075517\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/2XXJiI7mFTUSUSVlV4Y6EjOr","title":"公司衰败之根在于等级制度","date":"2017-12-18 18:01:20 +0800","comments":true,"author":"玛格丽特•赫弗南","tags":["思考"]},"excerpt":"…"}},{"node":{"id":"e9681baa-58b1-5191-9070-a0f0c6263829","html":"<img src=\"https://i.imgur.com/lN9vW2K.jpg\" width=\"650\" />\n<blockquote>\n<p>马利德：中国和日本这两个亚洲强国之间的天然竞争，与令人耿耿于怀的战争历史纠缠了在一起，同时还被嵌入国内政治。</p>\n</blockquote>\n<!--more-->\n<p>假设你是一位中国战略家，正在想办法（就像他们几十年来所做的那样）遏止和削弱美国自太平洋战争结束以来在东亚保持的主导地位。</p>\n<p>北京方面现在已经有很多选择，打造海军在海洋挑战美国、在南中国海建设军事基地，以及拦截美国沿着中国海岸的侦察飞行。</p>\n<p>正如 8 月初中国在马尼拉东盟年会上所做的那样，中国试图让一个又一个地区邻国（最近是菲律宾）脱离联盟，转而加入一个以中国为中心的新俱乐部。</p>\n<p>但有一种举措有可能摧毁美国在该地区乃至整个世界的地位，而北京方面从未真正尝试过：让日本脱离其与美国的长期同盟。</p>\n<p>毕竟，日本是美国最重要的双边军事盟友，美国以外的美国最大海军基地就位于日本的横须贺。假设中国能够向日本保证安全，并使日本与美国稍微疏远一些。美国自 1945 年以来作为亚洲超级大国的地位将毁于一旦。</p>\n<p>那么中国为什么没有引诱日本，而是与这个邻国有如此敌对的关系呢？</p>\n<p>这是我的新书的主题，该书追溯了日本、中国和美国自上世纪 50 年代以来的三向关系，在亚洲以外，这个实力三角几乎无人关注。</p>\n<p>传统的解释站不住脚：中国不敢与日本交好，因为中国人集体对日本拒绝为战争暴行道歉感到愤怒。</p>\n<p><font color=\"red\">在战后几十年期间，中国从未寻求日本的正式道歉</font>，只是随着中国地缘政治实力壮大、随着日本在尖阁诸岛（Senkaku，中国称为钓鱼岛及其附属岛屿）领土争端等问题上拒绝让步后才改变论调。</p>\n<p><font color=\"red\">现代中国的创始人毛泽东曾在战后不久对访华的一个日本代表团表示：“不能天天赔不是，是不是？一个民族成天怄气是不好的，这一点，我们很可以谅解。”（1955 年 10 月 15 日毛泽东同日本国会议员访华团的谈话——译者注）</font></p>\n<p><font color=\"blue\">上世纪 80 年代，在要求道歉变得流行起来后，中方开始要求日本道歉，日本曾多次表示歉意，但收效甚微。</font><font color=\"red\">当然还有其他因素，比如日本右翼力量推广否认战时历史的教科书，由此激怒中国。</font>\n<span></span>\n但中国与日本走向和解的真正障碍在于其他因素，这两个亚洲强国之间的天然竞争被与至今让人耿耿于怀的战争历史扯在一起，并嵌入国内政治。</p>\n<p>中国的反日立场（反日情绪高涨开始于上世纪 90 年代初）对这个共产党国家的国内政治产生了明显影响。在中国国内，对日本政策如此敏感，以至于任何官员如果提出要真正缓和两国关系，都可能葬送自己的仕途。改变只能从最高层开始。</p>\n<p>根据中国知名反日活动人士童增的传记，中国外交官表示，中国官员 “在接触西方文化和文明后，不可避免地变成了仆人，丧失对亚洲价值观的自豪感”。</p>\n<p>中国外交官和学者都知道支持与日本交好的危险。“如果你说日本的好话，你就会得到学生们的愤怒反应，” 中国一流学府清华大学的楚树龙表示，“作为一个研究美国的学者，我从不担心公共舆论。人们可能不认同我的观点，但他们永远不会把我称作汉奸。”</p>\n<p>在网络空间，对日本的敌意成为固定节目，其形式是互联网上列出的 “中国十大汉奸”，其中多数人的过错与日本有关。上榜人物包括北京和上海学术界的中坚力量以及中国学校教科书的编写者。</p>\n<p>[<a target=\"_blank\" href=\"http://www.ftchinese.com/story/001075431\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/rRFgYArcukJMUYgYLGOKmuHC","title":"如何解开中日之间的心结？","date":"2017-12-12 11:49:26 +0800","comments":true,"author":"马利德","tags":["思考"]},"excerpt":"…"}},{"node":{"id":"c5ce6312-0b9f-56ba-9ba3-a50fd066d216","html":"<img src=\"https://i.imgur.com/y8Vq4cj.jpg\" width=\"650\" />\n<blockquote>\n<p>张千帆：按 “功能” 将各种城市和农村分为三六九等，经过计划年代的人应感觉似曾相识，本质上是新的城乡隔离。</p>\n</blockquote>\n<!--more-->\n<p>近日，北京大兴一把大火不仅夺走了 19 条生命，也在短短几天内把几十万 “低端人口” 赶到冰天雪地的回家路上。火灾发生后，北京市政府对城乡结合部等 “低端人口” 聚集地区实施了地毯式清查，强制关闭了大量合法修建和出租的公寓。</p>\n<p>日常的安全检查和环境治理本是政府的应尽职责，事故的发生本身已表明政府失职，未曾想政府不仅不反思自身存在的治理缺失，却借此 “契机” 大规模清理 “低端人口”、加速落实首都“核心功能”。如果说 2008 年奥运期间，一句“首都欢迎您” 表达了改革三十年的开放共识，暗地里却已经开启了驱赶各种 “剩余人口” 的临时政策，那么随着 “核心功能” 等概念的强化，人口清理似已成为既定国策。</p>\n<p>这种政策的远景是按 “功能” 将各种城市和农村分为三六九等，其中有的是政治中心、文化中心、教育中心、商业金融中心、科技创新中心…… 有的则集中承担工业制造、能源生产、钢铁冶炼等不那么高大上的功能，有的就只能作为粮食生产基地，说白了就是城市的粮袋、菜篮、肉仓。围绕这一思路论证的各种课题可以很时新、令人很憧憬，但经过计划年代的人都应感觉似曾相识。本质上，这就是一种新的城乡隔离，在一个表面统一的国家内部建立诸多“国中之国”，在其中生活的个人也按其履行的经济社会功能而被赋予相应的等级。</p>\n<p>遥想当年，户籍制度、收容遣送等一系列恶法都是城乡隔离大战略下生成的计划体制产物。城里待遇好，农民自然源源不断要进城，由此产生了清理驱返并把他们牢牢绑在自己该呆的地方好好种田的制度性需求。到 “三年自然灾害” 闹饥荒的时候，种粮却吃不上粮的农民大规模逃荒要饭；地方官怕事情泄露丢了乌纱帽，派民兵卡住出村要道，把隔离落实到田间地头，让许多农民饿死在自己家里。相比之下，城里人虽不种粮，却几乎没听说有人饿死的。那个年代，虽然城市居民特权不大，也很穷、也吃不饱，有的地方甚至出现了浮肿病，却还是搭了城市特权的便车，那一点点特权即足以决定人的生死。这些事情现在听起来很夸张，但要说遥远也并非如此遥远，因为户籍等旧制度还在。</p>\n<p>1978 年开始改革，农村相继恢复 “包产到户”，中国从此告别了粮食危机，饿死人的事情极少有了。改革的主旋律是开放，农地向农民开放，城市向农村开放。城乡二元体制一直存在，户籍制度从未取消，迁徙自由也未写入 82 宪法，但事实上的迁徙自由、择业自由和居住自由逐渐成为中国社会的共识。只要有一份相对稳定的工作，获得合法“暂住” 的权利并非难事。2003 年孙志刚事件发生后，很快取消了收容遣送制度，算是对改革共识的迟到承认。</p>\n<p>当然，既然户籍制度还在，许多城市特权和户籍捆绑在一起，平等待遇是不可以有的。众所周知，农民工干的是最苦最脏的活，拿的是最低的工资，甚至这样的工资都可能被长期拖欠。哪怕你做到了高级白领，月薪相当于北京 “土著” 的年薪，只要没有本地户籍，你的孩子照样是“随迁子女”，读完高中照样要回原籍高考，现在甚至到中考就要被学校劝退。有老外一语道破本质：中国的户籍就是护照！其实和欧盟等区域共同体相比，户籍还不如护照，因为其成员国的国民虽然持有不同护照，但不仅迁徙是自由的，而且求职谋生的机会和待遇是平等的，否则可以起诉。然而，在城乡二元体制造成的长期封闭之后，农村早已留不住年轻人，发展机会都在城市；即便来城里受剥削，也比呆在老家留守一亩三分地要强。毕竟，城市为他们提供了就业和居住的机会；即便这种机会再不平等，也被默认和接受了。</p>\n<p>[<a target=\"_blank\" href=\"http://www.ftchinese.com/story/001075244#adchannelID=1600\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/Setu4UbkWfc2qskvni6WE9hY","title":"中国回到城乡隔离时代？","date":"2017-12-07 11:05:47 +0800","comments":true,"author":"北京大学宪法学教授 张千帆","tags":["思考"]},"excerpt":"张千帆：按 “功能” 将各种城市和农村分为三六九等，经过计划年代的人应感觉似曾相识，本质上是新的城乡隔离。 近日，北京大兴一把大火不仅夺走了 1…"}},{"node":{"id":"76022271-119e-5afc-bd2b-35470ecbd6ca","html":"<img src=\"https://i.imgur.com/l89yr4r.jpg\" width=\"650\" />\n<blockquote>\n<p>周健：慈善公益关注平等，应该从 “最小防范成本原则” 出发，更多地研究如何从强势一方去寻找解决问题的办法。</p>\n</blockquote>\n<!--more-->\n<p>本文为作者 “中国公益的重建与转型” 系列之五</p>\n<p>三十年前，有个老人说：让一部分人先富起来，然后再帮助落后地区的人，先进地区帮助落后地区是一个义务。他没说，让一部分人先富起来，先富起来的人把穷人当问题解决了，就实现了共同富裕；他也没说，要解决贫困问题，要从穷人入手，把穷人教育好了，就实现了共同富裕。他知道，小岗村的农民从贫困到富有，教育的不是农民是官员，改变的不是农民是制度。</p>\n<p>不管贫困的人口有多少，解决贫困问题都该从先富起来的人入手。富起来的人有钱、有权、有技术、有资源，他们如果把穷人当成 “六十一个阶级兄弟”，他们把游戏规则改得对穷人有利一些，把社会公共福利政策改得对穷人有利一些，穷人深陷贫困的状态就会有根本低改变。这样的慈善公益形态，就是常说的政策倡导型公益项目。</p>\n<p>“政策倡导型公益项目” 是从改变贫困的社会环境出发，进行探索性、规范性的项目实践，从而对公共政策的制定和调整产生影响。受政治环境、公民意识等多方面的影响，中国的政策倡导型公益项目无论是从公共认知、倡导途径还是倡导策略方面看来，往往是消费成分多于公民性社会参与，其中不少项目的内核依然是从改变个体行为入手，很容易落入政府扩权的陷阱。</p>\n<p>不知道从什么时候开始，这个时代变成了，很多事情开始从人入手，解决不了问题就解决人，解决不了贫困就解决穷人，解决不了虐童就解决儿童。把解决问题的源头放到人的身上的时代，往往是一个急功近利的世界，往往是一个生活得极端表面的世界。在这样的世界里，大家没有耐心去深究事情后面的真相，大家也都不愿意去触及问题的真相，那样做很容易牵一发而动全身，拔处萝卜带出泥。但是，如果一个社会长期把解决问题的劲都使在弱者身上，绕着问题核心走，嘴巴上说起来爱心满满，桌子下却暗流涌动，其结果往往是这边按下葫芦那边又起了瓢。</p>\n<p>最近几年，在 “女童性侵”、“幼儿园虐童” 等社会问题上，不少人也是从事件中的弱者儿童入手，寻求解决方案。温州幼师虐童案、携程亲子园虐童案、红黄蓝幼儿园虐童案等等，这些 “虐童事件” 一被曝光之后，不少人站出来教育我们应该让孩子如何学会自保；他们开始给妈妈和孩子上“防性侵教程”，甚至还有不少人对这样的做法翘起大拇指点赞。</p>\n<p>“儿童被虐”、“女童性侵”这些问题的制造者明明是成年人，过去大家都是万众一心打 “流氓”，现在大家连“流氓” 都不打了，直接教育女童改如何防止性侵。说实话，这些幼小的孩子，一个个都是手无缚鸡之力，你怎么让她去防止被性侵，她知道被性侵又能怎样？她能反抗得了么？从弱者入手解决社会问题，说起来爱心满满，做起来热泪盈眶，实事上对问题的根本解决没有太多价值。</p>\n<p>也许有人会说，这是对公益人的道德绑架，这是 “明于知礼义而陋于知人心”，只懂得大道理，却对世态人心不够理解。实际上，我的观点并非是单纯地从个人道德的传统出发，而是从社会政策的角度，从社会供给在整个社会范围内实现效率最大化的思考。现代慈善公益公益组织的每一个具体行动，都应当在可预见的范围内推动整个社会产生最大的善行。</p>\n<p>[<a target=\"_blank\" href=\"http://www.ftchinese.com/story/001075349\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/4rFXcuawHHvlOaY4CZ3EAnxx","title":"慈善组织花了那么多钱，为什么孩子还被虐待？","date":"2017-12-05 15:57:03 +0800","comments":true,"author":"北京感恩公益基金会发起人 周健","tags":["思考"]},"excerpt":"…"}}],"pathPrefix":"","first":false,"last":false,"index":2,"pageCount":15,"additionalContext":{}}}
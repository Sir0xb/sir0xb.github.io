{"data":{"markdownRemark":{"html":"<h3># 搭建项目</h3>\n<pre><code class=\"language-bash\">mkdir brick &#x26;&#x26; cd brick\n</code></pre>\n<h3># 创建页面</h3>\n<pre><code class=\"language-bash\">mkdir src\ntouch src/index.html\n</code></pre>\n<p>编辑 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<!--more-->\n<p>浏览器控制台看到日志输出。</p>\n<h3># 引入 webpack</h3>\n<h6>1. 初始化node环境</h6>\n<pre><code class=\"language-bash\">npm init\n</code></pre>\n<h6>2. 引入webpack</h6>\n<pre><code class=\"language-bash\">npm i -D webapck\ntouch webpack.config.js\n</code></pre>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path from \"path\";\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist/index.js\"),\n        filename: \"bundle.js\"\n    }\n};\n</code></pre>\n<p>webpack 编译生成输出文件</p>\n<pre><code class=\"language-bash\"># 需要全局安装 webpack。安装命令: npm i -g webpack\nwebpack\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">console.log(\"webpack 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>查看浏览器控制台，输出内容变了。说明webpack开始工作了。</p>\n<h3># 搭建babel环境</h3>\n<pre><code class=\"language-bash\">npm i -D babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0\n\ntouch .babelrc\n</code></pre>\n<p>编辑 <code>.babelrc</code></p>\n<pre><code class=\"language-json\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": []\n}\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">const func = (str) => {\n    document.getElementById(\"app\").innerHTML = str;\n};\n\nfunc(\"Babel 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>重新 webpack 编译文件，刷新页面看到字串已经打入页面。</p>\n<h3># 搭建服务器环境</h3>\n<pre><code class=\"language-bash\">npm i -D webapck-dev-server\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\ndevServer: {\n    port: 3000\n}\n...\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>这时访问 <code>http://localhost:3000</code> 能看到项目目录结构，当访问 <code>http://localhost:3000/src</code> 目录就能看到我们做的页面了。</p>\n<blockquote>\n<p>虽然开始 Work 了，还是有几个问题</p>\n</blockquote>\n<ol>\n<li>代码目录里的代码，没能自动生成到 dist 目录中。</li>\n<li>服务启动之后，希望能直接访问到 html 页面。</li>\n</ol>\n<p>引入 webpack 插件 <code>html-webpack-plugin</code></p>\n<pre><code class=\"language-bash\">npm i -D html-webpack-plugin\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\n// new\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n// /new\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    // new\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>访问 <code>http://localhost:3000</code> 工作正常。</p>\n<h3># 引入 React</h3>\n<pre><code class=\"language-bash\">npm i -S react react-dom\n</code></pre>\n<p>编辑 <code>webpack.config.js</code> 添加 jsx 解析</p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // new\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>运行服务器，看到 React 开始工作。</p>\n<h3># 优化：分目录管理资源、动态解析</h3>\n<blockquote>\n<p>到目前有一下几个问题：</p>\n</blockquote>\n<ol>\n<li>js静态资源和html都输出到了一个目录，没有分目录。</li>\n<li>静态资源名字固定，会有缓存问题。</li>\n<li>每次修改都要重启服务器，最好能热加载。</li>\n</ol>\n<h6>1）静态资源目录配置修改</h6>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\noutput: {\n    path: path.join(__dirname, \"./dist\"),\n    filename: \"./js/bundle.js\"\n},\n...\n</code></pre>\n<p>浏览器 Network 能看到 js 文件已经有独立目录了。</p>\n<h6>2) 添加文件 hash</h6>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        // new: 第一种方法 - 文件名直接 hash\n        filename: \"./js/[name].[hash].js\"\n        // /new\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n            // new: 第二种方法 - 文件后参数形式 hash\n            hash: true\n            // /new\n        })\n    ],\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>浏览器 Network 看到 hash 值已经添加进去了。</p>\n<h6>3) 配置热加载</h6>\n<p>修改 <code>webpack.config.js</code> 添加两处配置</p>\n<p>plugins 添加配置</p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    // new\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n    // /new\n],\n...\n</code></pre>\n<p>devServer 添加配置</p>\n<pre><code class=\"language-js\">...\nhot: true\n...\n</code></pre>\n<p>运行服务器修改文件内容，可以看到不用刷新浏览器也能看到效果了。</p>\n<h3># 添加网站 favicon.ico</h3>\n<p>设计ico文件，放入 <code>./src/assets/images/</code> 文件夹下</p>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        // new\n        favicon: path.join(__dirname, \"./src/assets/images/favicon.ico\"),\n        // /new\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n],\n...\n</code></pre>\n<h3># 添加sass加载器</h3>\n<pre><code class=\"language-bash\">npm i -D style-loader css-loader sass-loader node-sass\n</code></pre>\n<p><code>webpack.config.js</code> 的 module 添加配置</p>\n<pre><code class=\"language-js\">...\nrules: [{\n    test: /\\.(js|jsx)$/,\n    loader: \"babel-loader\",\n    exclude: \"/node_modules\"\n}, { // new\n    test: /\\.(scss|sass)$/,\n    use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n}] // /new\n...\n</code></pre>\n<p>创建 sass 文件 <code>./src/assets/styles/main.scss</code></p>\n<pre><code class=\"language-sass\">body {\n    background-color: gray;\n}\n</code></pre>\n<p>修改 index.js 文件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\n// new\nimport \"./assets/styles/main.scss\";\n// /new\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React~~!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>在看页面整个变灰了。</p>\n<h3># 添加 React 路由</h3>\n<pre><code class=\"language-bash\">npm i -S react-router react-router-dom\n</code></pre>\n<p>添加测试文件</p>\n<pre><code class=\"language-bash\">mkdir src/containers\nmkdir src/containers/Home\nmkdir src/containers/Users\ntouch src/containers/Home/index.js\ntouch src/containers/Users/index.js\n</code></pre>\n<p>编辑 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是首页&#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是用户页面&#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"./containers/Users\";\nimport HomePage from \"./containers/Home\";\n\nimport \"./assets/styles/main.scss\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>进入页面看到页面地址变成了 <code>http://localhost:3000/#/</code> ，内容也match到了home的代码。修改hash地址到 /users 也能正确match到users代码。</p>\n<h3># 添加 antd UI 库</h3>\n<p>antd 依赖 less 解析，所以需要先配置好less</p>\n<pre><code class=\"language-bash\">npm i -D less less-loader\n</code></pre>\n<p>修改 webpack 配置(module -> rules添加下面的配置)</p>\n<pre><code class=\"language-js\">...\n{\n    test: /\\.less$/,\n    use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n}\n...\n</code></pre>\n<p>安装 antd</p>\n<pre><code class=\"language-bash\">npm i -S antd\n</code></pre>\n<p>修改 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>这是首页&#x3C;/span>\n                &#x3C;Button type=\"primary\">Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>看到蓝色《Button测试》按钮，说明antd正常工作</p>\n<blockquote>\n<p>每次输入运行服务器命令很麻烦，可以配置到 package.json 命令里</p>\n</blockquote>\n<pre><code class=\"language-json\">\"dev\": \"webpack-dev-server --config webpack.config.js --color --progress\"\n</code></pre>\n<p>既可以看到生成进度，颜色也比以前好看了。</p>\n<h3># React hot reload</h3>\n<p>修改 <code>Home/index.js</code> ，增加一个 state React状态值</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n    countPlus () {\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>目前计数器: { this.state.count }&#x3C;/span>\n                &#x3C;br />\n                &#x3C;Button type=\"primary\" onClick={ this.countPlus.bind(this) }>Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>浏览器看到页面效果。点击按钮几次，计数器增加。\n再修改文案看看，浏览器自动更新，但是计数器状态又被重置了。\n如果我们在开发一个购物车功能，那么我们之前挑选好的货物，因为一个文案的修改就会被清空。</p>\n</blockquote>\n<p>安装 react-hot-loader 加载器</p>\n<pre><code class=\"language-bash\">npm i -D react-hot-loader\n</code></pre>\n<p>修改 <code>.babelrc</code> 增加 hot reload 插件配置</p>\n<pre><code class=\"language-text\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": [\n        \"react-hot-loader/babel\"\n    ]\n}\n</code></pre>\n<p>修改 webpack 配置</p>\n<pre><code class=\"language-js\">...\nentry: [\n    \"react-hot-loader/patch\",\n    path.join(__dirname, \"./src/index.js\")\n],\n...\n</code></pre>\n<p>将路由代码提取到独立文件中</p>\n<pre><code class=\"language-bash\">mkdir ./src/config\ntouch ./src/config/routers.js\n</code></pre>\n<p><code>routers.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"../containers/Users\";\nimport HomePage from \"../containers/Home\";\n\nclass Routers extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nexport default Routers;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport Routers from \"./config/routers\";\n\nimport \"./assets/styles/main.scss\";\n\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(&#x3C;Routers />, document.getElementById(\"app\"));\n};\n\nrenderWithHotReload(Routers);\n\nif (module.hot) {\n    module.hot.accept(\"./config/routers\", () => {\n        let Routers = require(\"./config/routers\").default;\n        renderWithHotReload(Routers);\n    });\n}\n</code></pre>\n<p>重新跑一下项目。页面点击几次按钮，修改文案，Cool！React 状态没有被刷。</p>\n<h3># Rudex: Reducer -> Store -> Provider -> Components</h3>\n<p>先安装依赖包</p>\n<pre><code class=\"language-bash\">npm i -S redux react-redux\n</code></pre>\n<p>官方文档对 store 的定义是一个大的js对象。那么先创建一个。\n<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\n// 引入 store 构造函数\nimport { createStore } from \"redux\";\n...\nconst store = createStore();\n...\n</code></pre>\n<p>先弄一个静态数据，等redux结构搭建好了再动态获取。\n<code>src/reducers/reducer-users.js</code></p>\n<pre><code class=\"language-js\">export default () => {\n    return [{\n        id: 1,\n        first: \"Bucky\",\n        last: \"Roberts\",\n        age: 71,\n        description: \"Bucky is a React developer and YouTuBer\",\n        thumbnail: \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        id: 2,\n        first: \"Joby\",\n        last: \"Wasilenko\",\n        age: 27,\n        description: \"Joby loves the Packers, cheese, and turtles.\",\n        thumbnail: \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        id: 3,\n        first: \"Madison\",\n        last: \"Williams\",\n        age: 24,\n        description: \"Madi likes her dog but it is really annoying.\",\n        thumbnail: \"http://i.imgur.com/4EMtxHB.png\"\n    }];\n};\n</code></pre>\n<p>store本身是一个对象，如果返回列表就多个对象了。加载home等其他的container加载数据，肯定不能直接将这些reducer提交给store。\n整合一下数据<code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport UserReducer from \"./reducer-users\";\n// 其他的 container数据，可以继续添加\n\nconst allReducers = combineReducers({\n    users: UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>修改<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport allReducers from \"./reducers\"; // 引入 reducers\n...\nconst store = createStore(allReducers);\n...\n</code></pre>\n<p>到此，数据已经送到app入口。怎么传递给 containers 呢？\n引入 provider <code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { Provider } from \"react-redux\";\n...\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(\n        &#x3C;Provider store={ store }>\n            &#x3C;Routers />\n        &#x3C;/Provider>, document.getElementById(\"app\"));\n};\n...\n</code></pre>\n<p>数据现在提交到了 container 里，页面怎么从上下文获取呢？\n我们需要一个redux提供的包装器（React经常会用到这种技术，用函数返回一个包装过的component）\n<code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { connect } from \"react-redux\";\n...\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>好，数据已经在 container 的 prop 里了。\n修改一下 <code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                {this.props.users.map((user) => (\n                    &#x3C;div key={ user.id }>{ user.first } { user.last }&#x3C;/div>\n                ))}\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>浏览器访问下 <code>http://localhost:3000/#/users</code>，是不是我们定义的静态数据出来了？</p>\n<h3># Redux: Component -> action -> store</h3>\n<p>简单实现一下交互效果。\n先把用户界面做成上列表，下详情的结构。</p>\n<pre><code class=\"language-bash\">touch src/containers/Users/userList.js\ntouch src/containers/Users/userDetail.js\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nimport UserList from \"./userList\";\nimport UserDetail from \"./userDetail\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;h1>用户列表:&#x3C;/h1>\n                &#x3C;hr />\n                &#x3C;UserList />\n                &#x3C;br />\n                &#x3C;br />\n                &#x3C;h2>用户详情:&#x3C;/h2>\n                &#x3C;hr />\n                &#x3C;UserDetail />\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>编辑 <code>Users/userDetail.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass UserDetail extends React.Component {\n    render() {\n        return (\n            &#x3C;div>&#x3C;/div>\n        );\n    }\n}\n\nexport default UserDetail;\n</code></pre>\n<p>编辑 <code>Users/userList.js</code> 其实就是原本 index 里的代码</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(UserList);\n</code></pre>\n<p>添加单击事件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>处理下事件逻辑\n<code>actions/index.js</code></p>\n<pre><code class=\"language-js\">export const selectUser = (user) => {\n    console.log(\"Click on user\", user.first);\n    return {\n        type    : \"USER_SELECTED\",\n        payload : user\n    };\n};\n</code></pre>\n<p>点击事件是不是有响应了？</p>\n<p>继续...</p>\n<p>现在有了如下的事件，我们还需要reducer去处理此类型的事件。</p>\n<pre><code class=\"language-json\">{\n    type    : \"USER_SELECTED\",\n    payload : user\n}\n</code></pre>\n<p>创建 <code>src/reducers/reducer-active-user.js</code></p>\n<pre><code class=\"language-js\">export default (state = null, action) => {\n    switch (action.type) {\n        case \"USER_SELECTED\":\n            return action.payload;\n    }\n    return state;\n};\n</code></pre>\n<p>同样在 <code>Users/userDetail.js</code> 里添加上下文转 props 的逻辑</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass UserDetail extends React.Component {\n    render() {\n        if (this.props.user === null) {\n            return (&#x3C;h4>请选择用户&#x3C;/h4>);\n        }\n        return (\n            &#x3C;div>\n                &#x3C;img src={ this.props.user.thumbnail } />\n                &#x3C;h2>{ this.props.user.first } { this.props.user.last }&#x3C;/h2>\n                &#x3C;h3>{ this.props.user.age }&#x3C;/h3>\n                &#x3C;h3>{ this.props.user.description }&#x3C;/h3>\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.activeUser\n    };\n};\n\nexport default connect(mapStateToProps)(UserDetail);\n</code></pre>\n<p>简单交互完成。redux事件流闭环了。</p>\n<h3># 搭建 api 服务器</h3>\n<p>创建一个简单的json服务器</p>\n<pre><code class=\"language-bash\">npm i -S json-server\n</code></pre>\n<p>创建数据库</p>\n<pre><code class=\"language-bash\">mkdir server\ntouch server/db.json\n</code></pre>\n<p>编辑 <code>db.json</code></p>\n<pre><code class=\"language-json\">{\n    \"users\": [{\n        \"id\": 1,\n        \"first\": \"Bucky\",\n        \"last\": \"Roberts\",\n        \"age\": 71,\n        \"description\": \"Bucky is a React developer and YouTuBer\",\n        \"thumbnail\": \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        \"id\": 2,\n        \"first\": \"Joby\",\n        \"last\": \"Wasilenko\",\n        \"age\": 27,\n        \"description\": \"Joby loves the Packers, cheese, and turtles.\",\n        \"thumbnail\": \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        \"id\": 3,\n        \"first\": \"Madison\",\n        \"last\": \"Williams\",\n        \"age\": 24,\n        \"description\": \"Madi likes her dog but it is really annoying.\",\n        \"thumbnail\": \"http://i.imgur.com/4EMtxHB.png\"\n    }]\n}\n</code></pre>\n<p>修改 <code>package.json</code> scripts 属性添加如下命令</p>\n<pre><code class=\"language-json\">...\n\"server\": \"json-server server/db.json -w -p 3030\"\n...\n</code></pre>\n<p><code>npm run server</code> 之后访问 <code>http://localhost:3030/db</code> 是不是看到我们的数据了。</p>\n<h3># 数据从 json 服务器上获取</h3>\n<p>先创建 reducer。<code>src/reducers/userReducer.js</code></p>\n<pre><code class=\"language-js\">import {\n    GET_USER_LIST,\n    GET_USER_LIST_SUCCESS,\n    GET_USER_LIST_ERROR\n} from \"../actions/userActions\";\n\nconst initState = {\n    isLoading: false,\n    userList: [],\n    errorMsg: \"\"\n};\n\nexport default (state = initState, action) => {\n    switch (action.type) {\n        case GET_USER_LIST:\n            console.log(\"GET_USER_LIST\");\n            return {\n                ...state,\n                isLoading: true,\n                userList: [],\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_SUCCESS:\n            console.log(\"GET_USER_LIST_SUCCESS\");\n            console.log(action.userList);\n            return {\n                ...state,\n                isLoading: false,\n                userList: action.userList,\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_ERROR:\n            console.log(\"GET_USER_LIST_ERROR\");\n            return {\n                ...state,\n                isLoading: false,\n                userList: [],\n                errorMsg: \"数据请求失败...\"\n            };\n        default:\n            return state;\n    }\n};\n</code></pre>\n<p>修改 <code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport User__Reducer from \"./reducer-users\";\nimport ActiveUserReducer from \"./reducer-active-user\";\n\nimport UserReducer from \"./userReducer\";\n\nconst allReducers = combineReducers({\n    users        : User__Reducer,\n    activeUser   : ActiveUserReducer,\n    userState    : UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>添加 <code>src/actions/userActions.js</code></p>\n<pre><code class=\"language-js\">export const GET_USER_LIST         = \"users/GET_USER_LIST\";\nexport const GET_USER_LIST_SUCCESS = \"users/GET_USER_LIST_SUCCESS\";\nexport const GET_USER_LIST_ERROR   = \"users/GET_USER_LIST_ERROR\";\n\nexport const getUserList = () => ({ type: GET_USER_LIST });\nexport const getUserListSuccess = (payload) => ({ type: GET_USER_LIST_SUCCESS, userList: payload });\nexport const getUserListError = () => ({ type: GET_USER_LIST_ERROR });\n\nexport const initUserList = () => {\n    return dispatch => {\n        dispatch(getUserList());\n\n        // 延时查看界面效果\n        setTimeout(function () {\n            fetch(\"http://localhost:3030/users\")\n                .then(res => res.json())\n                .then(list => dispatch(getUserListSuccess(list)))\n                .catch((err) => dispatch(getUserListError()));\n        }, 1000);\n\n        // return fetch(\"http://localhost:3030/users\")\n        //      .then(res => res.json())\n        //      .then(list => dispatch(getUserListSuccess(list)))\n        //      .catch((err) => dispatch(getUserListError()));\n    };\n};\n</code></pre>\n<p>就此，数据部分准备好了。该修改界面了。</p>\n<p>修改用户列表加载逻辑 <code>src/container/Users/userList.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nimport { initUserList } from \"../../actions/userActions\";\nimport { store } from \"../../index\";\n\nclass UserList extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = this.props.userState;\n        this.props.initUserList();\n    }\n    componentWillReceiveProps (newProps) {\n        this.setState(newProps.userState);\n    }\n    reloadDate () {\n        this.props.initUserList();\n    }\n    render() {\n        if (this.state.isLoading) {\n            return (&#x3C;h4>数据加载中&#x3C;/h4>);\n        }\n        return (\n            &#x3C;ul>\n                {this.state.userList.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n                &#x3C;li>\n                    &#x3C;br />\n                    &#x3C;button onClick={ this.reloadDate.bind(this) }>从新请求数据&#x3C;/button>\n                &#x3C;/li>\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users     : state.users,\n        userState : state.userState\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser,\n        initUserList: initUserList\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>刷新浏览器。首先会看到“数据加载中”，过1秒之后，数据加载出来。用户名的点击效果还是上一节的内容，没有变化。</p>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/zZDqsfQ1PK8UNWIktSnZWnIF","title":"从零开始搭建 React 项目","author":"Sir0xb","date":"2018-02-07 21:08:25 +0800"}}},"pageContext":{}}
{"data":{"markdownRemark":{"html":"<blockquote>\n<p>为了演示流控制，简单实现了注入插件 gulp-aop</p>\n</blockquote>\n<h3>先看下 gulp-aop 注入插件的用法</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nconcat = require \"gulp-concat\"\naop = require \"gulp-aop\"\n\ngulp.task \"default\", ->\n    gulp.src [\"test/a.js\", \"test/b.js\"]\n    .pipe concat \"t.min.js\"\n    .pipe aop\n        header: -> console.log 'Inject to the head'\n        footer: -> console.log 'Inject to the end'\n    .pipe gulp.dest \"./test\"\n</code></pre>\n<!--more-->\n<p>了解 gulp 流控制之前先了解下 nodeJS 的流</p>\n<h2> </h2>\n<h3>nodeJS 四种流</h3>\n<p>nodeJS里有四种类型的流：Readable，Writable，Duplex，Transform</p>\n<p>Readable: 可读流</p>\n<p>Writable: 可写流</p>\n<p>Duplex: 双工流</p>\n<p>Transform: 转换流</p>\n<p>跟 Gulp 相关的主要是转换流</p>\n<blockquote>\n<p>gulp 流控制一般用如下两种方式</p>\n</blockquote>\n<h2> </h2>\n<h3>流截获方式一：</h3>\n<pre><code class=\"language-javascript\">var through = require('through-gulp');\n\nmodule.exports = function () {\n    var stream = through(function(file, encoding, callback) {\n        var sourceStr = file.contents.toString();\n\n        // 这里可以对代码进行处理\n\n        file.contents = new Buffer(sourceStr);\n\n        // 再往管道中注入修改后的内容\n        this.push(file);\n\n        callback();\n    });\n\n    stream.on(\"end\", function () {\n        // 这里可以做些收尾工作\n    });\n\n    return stream;\n};\n</code></pre>\n<h2> </h2>\n<h3>流截获方式二：</h3>\n<pre><code class=\"language-javascript\">var through = require('through2');\nvar fs = require(\"fs\");\n\nmodule.exports = function (opt) {\n    var aopHeader = \"(\" + (opt.header || function(){}).toString() + \"());\";\n    var aopFooter = \"(\" + (opt.footer || function(){}).toString() + \"());\";\n\n    function bufferContents(file, encoding, callback) {\n        if (file.isNull()) {\n            this.push(file);\n            return callback();\n        }\n\n        if (file.isStream()) {\n            this.push(file);\n            return callback();\n        }\n\n        if (file.isBuffer()) {\n            file.contents = new Buffer(aopHeader + file.contents.toString('utf8') + aopFooter);\n        }\n\n        this.push(file);\n\n        callback();\n    }\n\n    function endStream(callback) {\n        // 这里可以做些收尾工作\n        callback();\n    }\n\n    return through.obj(bufferContents, endStream);\n};\n</code></pre>\n<blockquote>\n<p>编写自己的 Gulp 插件，流控制是基础。</p>\n</blockquote>\n<hr>","frontmatter":{"path":"/m5EMxLkw8rhWmyW1AEQWOQ7u","title":"Gulp流控制","author":"Sir0xb","date":"2016-01-31 23:38:00 +0800"}}},"pageContext":{}}
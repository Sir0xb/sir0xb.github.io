{"pageContext":{"group":[{"node":{"id":"ca86e23b-8866-5b95-98bd-4a3f74994836","html":"<p>上一篇做了导航菜单、弄出了博文列表、博文预览及翻页器。</p>\n<p>基本的功能弄的差不多了，不过还需要用这些基本功能再完善一下博客。</p>\n<p>首页也需要改改、返回顶部的按钮、还有本人比较喜欢的滚动条进度条、统计、Google被搜索等等。</p>\n<hr>\n<h2>6. 改版首页</h2>\n<p>博客首页的传统实现方式是显示部分博文，下方再加个 Read More 的按钮。</p>\n<p>只有一种首页是不是太单调了，在特殊节日我想搞个特效页面什么的展示在首页。\n所以，我弄了个配置，如果是普通日子，就默认用传统的有分页，博文部分显示的首页。\n如果是特殊节日，根据开发的特效页面不同，也能很快的进行切换。</p>\n<!--more-->\n<p>首先，我们把原先的入口文件 <code>src/pages/index.js</code> 更名或删除。</p>\n<p>并创建模板文件 <code>src/templates/home.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport Layout from '../components/layout'\nimport HomePage from '../components/Home'\nimport SEO from '../components/seo'\n\nconst Template = ({ pageContext }) => (\n    &#x3C;Layout>\n        &#x3C;SEO title=\"Boliball\" />\n        &#x3C;HomePage type=\"normal\" pageContext={pageContext} />\n    &#x3C;/Layout>\n)\n\nexport default Template\n</code></pre>\n<p>通过这种方式，我们可以把给入模板文件的页面上下文转移到 <code>src/components/Home/index.jsx</code> 里。</p>\n<p>我们再改下高级渲染方式 <code>gatsby-node.js</code>，把组织数据部分弄一弄。</p>\n<pre><code class=\"language-js\">...\n// 生成首页\nconst HomeTemplate = path.resolve('./src/templates/home.js')\ncreatePaginatedPages({\n    edges        : result.data.allMarkdownRemark.edges,\n    createPage   : createPage,\n    pageTemplate : HomeTemplate,\n    pageLength   : 5,\n    pathPrefix   : ''\n})\n...\n</code></pre>\n<p>上下文数据有了，模板也有了，弄一弄首页 Component 吧。</p>\n<p>先弄一个组件路由。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport NormalHomePage from './normal'\nimport HolidayHomePage from './holiday'\n\nconst HomeComponentMapping = {\n    normal  : NormalHomePage,\n    holiday : HolidayHomePage\n}\n\nconst HomePage = ({ type, pageContext }) => {\n    const TheHomePage = HomeComponentMapping[type]\n\n    return &#x3C;TheHomePage pageContext={pageContext} />\n}\n\nHomePage.propTypes = {\n    type: PropTypes.string\n}\n\nHomePage.defaultProps = {\n    type: 'normal'\n}\n\nexport default HomePage\n</code></pre>\n<p>再把带分页的首页弄一弄。</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Paginator from '../Paginator'\n\nimport './style.css'\n\nconst { Fragment } = React\n\nconst NormalHomePage = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Fragment>\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>&#x3C;Link className=\"title\" to={node.frontmatter.path}>{node.frontmatter.title}&#x3C;/Link>&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;div dangerouslySetInnerHTML={{__html: node.html.split('&#x3C;!--more-->')[0]}}>&#x3C;/div>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"\" />\n    &#x3C;/Fragment>\n}\n\nexport default NormalHomePage\n</code></pre>\n<p><font color=\"red\">注：博文里需要有识别符 <code>&#x3C;!--more--></code>。之所以首页能只显示一部分，是因为使用这个识别符做了拆分。</font></p>\n<hr>\n<h2>7. 返回顶部</h2>\n<p>返回顶部的实现方式有很多种，这里只作为示例。</p>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass BackToTop extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false\n        }\n\n        this.timer = undefined\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        clearTimeout(this.timer)\n        this.timer = setTimeout(() => {\n            this.setState({\n                show: document.body.scrollTop > 700 || document.documentElement.scrollTop > 700\n            })\n        }, 100)\n    }\n\n    render() {\n        return this.state.show &#x26;&#x26; &#x3C;div className=\"back-to-top\">\n            &#x3C;button onClick={() => { window.scrollTo(0, 0) }}>⬆︎&#x3C;/button>\n        &#x3C;/div>\n    }\n}\n\nexport default BackToTop\n</code></pre>\n<hr>\n<h2>8. 滚动条进度条</h2>\n<pre><code class=\"language-js\">import React from 'react'\n\nimport './style.css'\n\nclass ScrollIndicator extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.scrollHandle = this.scrollHandle.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.scrollHandle)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollHandle)\n    }\n\n    scrollHandle() {\n        let winScroll = document.body.scrollTop || document.documentElement.scrollTop\n        let height = document.documentElement.scrollHeight - document.documentElement.clientHeight\n        let scrolled = (winScroll / height) * 100\n        this.refs.progress_bar.style.width = `${scrolled}%`\n    }\n\n    render() {\n        return &#x3C;div className=\"scroll-indicator\">\n            &#x3C;div ref=\"progress_bar\" className=\"progress-bar\">&#x3C;/div>\n        &#x3C;/div>\n    }\n}\n\nexport default ScrollIndicator\n</code></pre>\n<hr>\n<h2>9. 百度统计 &#x26; 被 Google 搜索</h2>\n<p>Google统计的脚本在国内有时候加载不成功，都懂得。</p>\n<p>不废话，安装百度统计的中间件。</p>\n<pre><code class=\"language-bash\">npm i gatsby-plugin-baidu-tongji\n</code></pre>\n<p>修改下配置文件 <code>gatsby-config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    ...\n    {\n        resolve: 'gatsby-plugin-baidu-tongji',\n        options: {\n            siteid: 'FiJx5NYvSMLLCLCO9Ep9AmCEYpnhLZEo',\n            head: false\n        }\n    }\n    ...\n]\n...\n</code></pre>\n<p>被 Google 搜索需要在 <a href=\"https://search.google.com/search-console\">search.google.com</a> 上注册自己的站点。</p>\n<p>站点的验证方式很多，这里用举例 meta 方式。修改 <code>src/components/seo.js</code>。</p>\n<pre><code class=\"language-js\">...\nmeta={[\n    ...\n    {\n        name: `google-site-verification`,\n        content: 'axWre5Mc1WeCJHuCSLAALonVYdzjco_Ao__dvd3CsYX'\n    }\n    ...\n]}\n...\n`\n</code></pre>\n<hr>\n<h2>10. 发布站点脚本 &#x26; CNAME 文件</h2>\n<p>运行如下命令：</p>\n<pre><code class=\"language-bash\">gatsby build\n</code></pre>\n<p>待发布的站点就在 <code>public</code> 目录里了</p>\n<p>为了发布方便做了个发布脚本 <code>deploy.sh</code></p>\n<pre><code class=\"language-sh\">#!/bin/bash\nrm -rf ./.cache\nrm -rf ./public/*\n\ngatsby build\n\necho \"\"\necho \"====>> publish version: $1 &#x3C;&#x3C;====\"\necho \"\"\n\ncd ./public\ngit add .\ngit commit -m \"$1\"\ngit push\n</code></pre>\n<p><font color=\"red\">注：发布前最好清理一下 <code>public</code> 目录，因为总是增量发布，所以会有很多历史文件，同一个功能只是 hash 有变化。</font></p>\n<p>配置 <code>package.json</code></p>\n<pre><code class=\"language-json\">...\n\"scripts\": {\n    ...\n    \"deploy\": \"sh deploy.sh\"\n    ...\n}\n...\n</code></pre>\n<p>使用方法如下：</p>\n<pre><code class=\"language-bash\">npm run deploy -- v0.0.1\n</code></pre>\n<p>另：如果自己有独立域名，还需要将 CNAME 文件放入发布目录。</p>\n<p>只需要将 CNAME 文件放入 <code>static/</code> 目录即可，脚本编译的时候会自动同步过去。</p>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/KGZEuDpCK0Kporkdhg8iy1KQ","title":"用 Gatsby 搭建静态博客 2","date":"2019-02-01 10:28:00  +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["Gatsby","React"]},"excerpt":"上一篇做了导航菜单、弄出了博文列表、博文预览及翻页器。 基本的功能弄的差不多了，不过还需要用这些基本功能再完善一下博客。 首页也需要改改、返回顶部的按钮、还有本人比较喜欢的滚动条进度条、统计、Google被搜索等等。…"}},{"node":{"id":"85cdfe96-de0d-5a68-9833-5f07496d33bb","html":"<p>前几天跟老铁们聊天，有位老铁说想弄一个博客只靠 SEO 被搜索，想再次回归曾经那份朴素。于是我又想起了我那放置许久的博客。</p>\n<p>闲聊之余网上找了找有没有不错的静态博客框架可用，毕竟好久没有更新博客的框架了。\n机缘巧合，看到的文章推荐使用的第一项就是 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/\">Gatsby</a>，上官网看了看貌似还不错。后来才知道 React 官网也是用这个框架搭建的 😝。</p>\n<p>正好年前有点闲暇时间，着手弄了弄。从 jekyll、hexo、octopress，现在更新到了 Gatsby。以下是一点点经验，分享给大家。</p>\n<hr>\n<h2>1. 项目初建</h2>\n<p>先安装项目工具：</p>\n<pre><code class=\"language-bash\">npm i -g gatsby-cli\n</code></pre>\n<!--more-->\n<p>生成项目：</p>\n<pre><code class=\"language-bash\">npm new [your project name]\n</code></pre>\n<p>可以查看目录下的 <code>package.json</code> 了解项目命令。</p>\n<p>运行如下命令，就能看到项目工具生成的基础博客站。</p>\n<pre><code class=\"language-bash\">gatsby develop\n</code></pre>\n<p>简单说明一下项目结构：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录/文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">src/components</td>\n<td>放置组件的目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/pages</td>\n<td>基础方式渲染的页面目录(根据文件名形成路由)</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-config.js</td>\n<td>中间件配置及网站基本信息配置文件</td>\n</tr>\n<tr>\n<td align=\"center\">gatsby-node.js</td>\n<td>高级方式渲染页面(根据路径配置方式生成路由)</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td>&#x3C;以下是后续添加的部分></td>\n</tr>\n<tr>\n<td align=\"center\">src/queries</td>\n<td>Graphql 查询语句放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">src/templates</td>\n<td>高级方式渲染页面所用的模版放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">static</td>\n<td>发布时自动合并到发布目录的静态文件放置目录</td>\n</tr>\n<tr>\n<td align=\"center\">deploy.sh</td>\n<td>正式发布站点的脚本</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>2. 修改导航栏</h2>\n<p>先把文件 <code>src/components/header</code> 转成目录 <code>src/components/Header/</code>。</p>\n<p>将原文件里的代码拷入 <code>index.jsx</code> 再适当的修改修改。</p>\n<pre><code class=\"language-js\">...\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentMenu: 'home'\n        }\n    }\n\n    componentDidMount() {\n        const { pathname } = window.location\n\n        const extract = pathname.split('/')[1]\n\n        this.setState({ currentMenu: extract === '' ? 'home' : extract })\n\n        if (extract === '' || /^[0-9]+$/.test(extract)) {\n            this.setState({ currentMenu: 'home' })\n        } else if (extract === 'about') {\n            this.setState({ currentMenu: 'about' })\n        } else if (extract === 'blog' || extract.length === 24) {\n            this.setState({ currentMenu: 'blog' })\n        } else {\n            this.setState({ currentMenu: 'null' })\n        }\n    }\n\n    render() {\n        const { siteTitle } = this.props\n        const { currentMenu } = this.state\n\n        return &#x3C;div className=\"header\">\n            &#x3C;div className=\"container\">\n                &#x3C;ul>\n                    &#x3C;li className=\"site-title\">\n                        &#x3C;h1>&#x3C;Link to=\"/\">{siteTitle}&#x3C;/Link>&#x3C;/h1>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'home' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/\">Home&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'blog' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/blog\">Blog&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                    &#x3C;li className={currentMenu === 'about' ? 'menu-item currentMenu' : 'menu-item'}>\n                        &#x3C;h3>&#x3C;Link to=\"/about\">About&#x3C;/Link>&#x3C;/h3>\n                    &#x3C;/li>\n                &#x3C;/ul>\n            &#x3C;/div>\n        &#x3C;/div>\n    }\n}\n...\n</code></pre>\n<p>增加了当前菜单的 state 进行菜单状态管理。</p>\n<p>ul > li 横向序列化，第一个用作网站标题，其他的作为菜单项使用。</p>\n<p><font color=\"red\">注：</font><br>\n<font color=\"red\">1. 首页判断部分，后续要增加首页翻页功能，所以增加了数字判断。</font><br>\n<font color=\"red\">2. 博文判断部分，准备用24位随机码作为每个文章的地址。所以除了 blog 还增加了随机码长度的判断。</font></p>\n<p>样式部分就根据个人喜好开发就好了。</p>\n<hr>\n<h2>3. 博文列表</h2>\n<p>作为博客，最主要的还是博文部分，先把博文部分弄出来再说。</p>\n<p>之前的博文都是用 markdown 写的，先安装 markdown 解析工具并进行配置。</p>\n<pre><code class=\"language-bash\">npm i gatsby-source-filesystem\nnpm i gatsby-transformer-remark\nnpm i gatsby-plugin-catch-links\n</code></pre>\n<p>修改 gatsby 插件配置 <code>gatsby-config.js</code>:</p>\n<pre><code class=\"language-js\">...\nplugins: [\n...\n{\n    resolve: 'gatsby-source-filesystem',\n    options: {\n        name: 'pages',\n        path: `${__dirname}/src/pages`\n    }\n},\n'gatsby-transformer-remark',\n'gatsby-plugin-catch-links',\n...\n]\n...\n</code></pre>\n<p>配置好之后，在 <code>src/pages</code> 目录里直接创建 md 文件或是创建目录并在里边创建 md 文件都可以。markdown 解析部分完成了。</p>\n<p>如果留意观察过启动时控制台的提示，就知道访问 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a> 就能够进行 GraphiQL 查询了。</p>\n<p>先看一下博文头部信息：</p>\n<pre><code class=\"language-markdown\">---\npath       : '/yp63Vswica5FHmJGE479XP5k'\ntitle      : '用 Gatsby 搭建静态博客 1'\ndate       : 2019-01-31 18:56:00  +0800\ncomments   : true\ncategories : programming\nauthor     : Sir0xb\ntags       : [Gatsby, React]\n---\n</code></pre>\n<p>这些信息很重要，都是一会儿要被查询的字段。</p>\n<p>打开 <a target=\"_blank\" href=\"http://localhost:8000/___graphql\"><code>http://localhost:8000/___graphql</code></a>，在左侧搜索条件输入：</p>\n<pre><code class=\"language-js\">{\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n        edges {\n            node {\n                id\n                html\n                frontmatter {\n                    path\n                    title\n                    date\n                    comments\n                    author\n                    tags\n                }\n                excerpt\n            }\n        }\n    }\n}\n</code></pre>\n<p>看到查询结果大概就明白各个字段代表什么意思，不做过多解释。</p>\n<p>有了能够正常运行的查询表达式，可以开始我们的渲染工作了。</p>\n<p>还记得改造菜单时候添加了一个路径 <code>/blog</code> 吗？\n在 <code>src/pages</code> 里创建一个 <code>blog.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nconst BlogPage = ({ data }) => (\n    &#x3C;div>\n        &#x3C;h1>This is the blog page&#x3C;/h1>\n        {data.allMarkdownRemark.edges.map(post => (\n            &#x3C;div key={ post.node.id }>\n                &#x3C;h3>{post.node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {post.node.frontmatter.author} on {post.node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={post.node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;hr/>\n            &#x3C;/div>\n        ))}\n    &#x3C;/div>\n)\n\nexport const pageQuery = graphql`\n    {\n        allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        path\n                        title\n                        date\n                        comments\n                        author\n                        tags\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n`\n\nexport default BlogPage\n</code></pre>\n<p>Gatsby 用 GraphiQL 查询文件的逻辑就是，通过导出 pageQuery 进行数据查询，并把结果注入到当前 Component 的 props 的 data 里。</p>\n<p>重新启动之后，点击菜单 <code>blog</code> 看到所有文章列表了。</p>\n<hr>\n<h2>4. 博文预览</h2>\n<p>点击博文发现页面 404 了。原因是在 <code>src/pages</code> 里没有找到我们24位随机码路径对应的文件。</p>\n<p>这时候我们就要用到高级方式渲染页面的功能了。</p>\n<p>我们先做一个博文预览的模版文件 <code>src/templates/post.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './style.css'\n\nconst Template = ({ data }) => {\n    const post = data.markdownRemark\n\n    return &#x3C;Layout>\n        &#x3C;SEO title={post.frontmatter.title} />\n        &#x3C;button\n            className=\"go-back\"\n            onClick={() => { window.history.back() }}\n        >Go back&#x3C;/button>\n        &#x3C;div className=\"blog-post\">\n            &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\n            &#x3C;h4>Posted by {post.frontmatter.author} on {post.frontmatter.date}&#x3C;/h4>\n            &#x3C;div dangerouslySetInnerHTML={{__html: post.html}}>&#x3C;/div>\n        &#x3C;/div>\n    &#x3C;/Layout>\n}\n\nexport const postQuery = graphql`\n    query BlogxxxPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter {\n                path\n                title\n                author\n                date\n            }\n        }\n    }\n`\n\nexport default Template\n</code></pre>\n<p>我们把 <code>blog.js</code> 里面的查询抽离到 <code>src/queries/queryAll.js</code> 里。\n<code>blog.js</code> 文件里的查询先不动。(<code>blog.js</code> 文件后续就放弃不用了)</p>\n<p>打开 <code>gatsby-node.js</code> 文件。</p>\n<pre><code class=\"language-js\">const path = require('path')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ boundActionCreators, graphql }) => {\n    const { createPage } = boundActionCreators\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p>重启之后再点开文章，是不是可以正常渲染了。</p>\n<hr>\n<h2>5. 增加翻页器</h2>\n<p>写了多年的博客那么多的博文，如果一次性全部显示出来就不友好了。</p>\n<p>解决方案就是加个翻页器，先把 gatsby 的翻页器工具安上。</p>\n<pre><code class=\"language-bash\">npm i gatsby-paginate\n</code></pre>\n<p>翻页器功能可以使用官网 <a target=\"_blank\" href=\"https://www.gatsbyjs.org/packages/gatsby-paginate/?=gatsby-paginate#create-the-template\">Demo</a> 里提供的代码，当然也可以自己开发。</p>\n<p>我比较喜欢前后都有《最前》、《最后》以及《上一页》、《下一页》按钮，页码部分低位至少留有两个页码，高位也至少留有两个页码，并且当前页码的前后各留有两个页码的翻页方式。</p>\n<p>那我们先把翻页器组件实现一下。<code>src/components/Paginator/index.jsx</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './style.css'\n\nconst getRandomStr = (len = 15) => {\n    let text = ''\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    for (let i = 0; i &#x3C; len; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\n    }\n    return text\n}\n\nconst Paginator = ({ index, pageCount, relativeUrl }) => {\n    let result = []\n\n    result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'«'}&#x3C;/Link>)\n    if (index &#x3C;= 2) {\n        result.push(&#x3C;Link key={getRandomStr()} to={relativeUrl}>{'&#x3C;'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{'&#x3C;'}&#x3C;/Link>)\n    }\n\n    if (pageCount &#x3C; 11) {\n        Object.keys(Array.from({ length: pageCount })).forEach((item, listIndex) => {\n            result.push(\n                &#x3C;Link\n                    key={getRandomStr()}\n                    className={listIndex + 1 === index ? 'currentPage' : ''}\n                    to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                >{listIndex + 1}&#x3C;/Link>\n            )\n        })\n    } else {\n        if (index &#x3C;= 5) {\n            // 低数 index + 2   高位两个\n            Object.keys(Array.from({ length: index + 2 })).forEach((item, listIndex) => {\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={listIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${listIndex === 0 ? '' : listIndex + 1}`}\n                    >{listIndex + 1}&#x3C;/Link>\n                )\n            })\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        } else if (index >= pageCount - 4) {\n            // 低位两个   高位 index - 2 到顶\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            // pageCount - (index - 2) + 1 = pageCount - index + 3\n            Object.keys(Array.from({ length: pageCount - index + 3  })).forEach((item, listIndex) => {\n                let newIndex = listIndex + index - 3\n                result.push(\n                    &#x3C;Link\n                        key={getRandomStr()}\n                        className={newIndex + 1 === index ? 'currentPage' : ''}\n                        to={`${relativeUrl}/${newIndex === 0 ? '' : newIndex + 1}`}\n                    >{newIndex + 1}&#x3C;/Link>\n                )\n            })\n        } else {\n            // 低位两个  中间 index - 2 ~ index + 2  高位两个\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}`}>1&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/2`}>2&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 2}`}>{index - 2}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index - 1}`}>{index - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} className=\"currentPage\" to={`${relativeUrl}/${index}`}>{index}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{index + 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 2}`}>{index + 2}&#x3C;/Link>)\n            result.push(&#x3C;span key={getRandomStr()}>...&#x3C;/span>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount - 1}`}>{pageCount - 1}&#x3C;/Link>)\n            result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{pageCount}&#x3C;/Link>)\n        }\n    }\n\n    if (index === pageCount) {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'>'}&#x3C;/Link>)\n    } else {\n        result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${index + 1}`}>{'>'}&#x3C;/Link>)\n    }\n    result.push(&#x3C;Link key={getRandomStr()} to={`${relativeUrl}/${pageCount}`}>{'»'}&#x3C;/Link>)\n\n    return &#x3C;div className=\"paginator\">\n        {result}\n    &#x3C;/div>\n}\n\nexport default Paginator\n</code></pre>\n<p><font color=\"red\">注：因为翻页器可能会用在首页，也可能用在博文页，所以传入了相对路径 <code>relativeUrl</code>。</font></p>\n<p>将 <code>src/pages/blog.js</code> 更名或删除。我们要通过高级方式生成博文页面，不再使用原来的页面了。</p>\n<p>再做一个带翻页器的博文页面渲染模版。<code>src/templates/posts.js</code></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Link from 'gatsby-link'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Paginator from '../components/Paginator'\n\nconst Template = ({ pageContext }) => {\n    const {\n        group,\n        index,\n        pageCount\n    } = pageContext\n\n    return &#x3C;Layout>\n        &#x3C;SEO title=\"Blog\" />\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n        {group.map(({ node }) => (\n            &#x3C;div className=\"normal-homepage-item\" key={node.id}>\n                &#x3C;h3>{node.frontmatter.title}&#x3C;/h3>\n                &#x3C;small>Posted by {node.frontmatter.author} on {node.frontmatter.date}&#x3C;/small>\n                &#x3C;br/>\n                &#x3C;br/>\n                &#x3C;Link to={node.frontmatter.path}>Read More&#x3C;/Link>\n                &#x3C;br/>\n            &#x3C;/div>\n        ))}\n        &#x3C;Paginator index={index} pageCount={pageCount} relativeUrl=\"/blog\" />\n    &#x3C;/Layout>\n}\n\nexport default Template\n</code></pre>\n<p>有了翻页器组件，有了模版，就差数据了。</p>\n<p>修改下 <code>gatsby-node.js</code></p>\n<pre><code class=\"language-js\">const path = require('path')\nconst createPaginatedPages = require('gatsby-paginate')\n\nconst queryAll = require('./src/queries/queryAll')\n\nexports.createPages = ({ actions, graphql }) => {\n    const { createPage } = actions\n\n    return new Promise((resolve, reject) => {\n        resolve(\n            graphql(queryAll).then(result => {\n                if (result.errors) reject(result.errors)\n\n                // 生成博文翻页\n                const PostsTemplate = path.resolve('./src/templates/posts.js')\n                createPaginatedPages({\n                    edges        : result.data.allMarkdownRemark.edges,\n                    createPage   : createPage,\n                    pageTemplate : PostsTemplate,\n                    pageLength   : 10,\n                    pathPrefix   : 'blog'\n                })\n\n                // 根据文章ID生成页面\n                const postTemplate = path.resolve('./src/templates/post.js')\n                result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n                    createPage({\n                        path      : node.frontmatter.path,\n                        component : postTemplate\n                    })\n                })\n            })\n        )\n    })\n}\n</code></pre>\n<p><font color=\"red\">注：由于 <code>gatsby-paginate</code> 要求的 Gatsby 版本要比默认的高，所以我把 Gatsby 版本升级到了最高。于是这里有了点变化。原先的 <code>boundActionCreators</code> 变成了 <code>actions</code>。</font></p>\n<hr>\n<h4>- THE END -</h4>","frontmatter":{"path":"/yp63Vswica5FHmJGE479XP5k","title":"用 Gatsby 搭建静态博客 1","date":"2019-01-31 18:56:00  +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["Gatsby","React"]},"excerpt":"前几天跟老铁们聊天，有位老铁说想弄一个博客只靠 SEO 被搜索，想再次回归曾经那份朴素。于是我又想起了我那放置许久的博客。 闲聊之余网上找了找有没有不错的静态博客框架可用，毕竟好久没有更新博客的框架了。\n机缘巧合，看到的文章推荐使用的第一项就是  Gatsby…"}},{"node":{"id":"da604cc0-bb1a-5db1-9d1b-e8317847e6f3","html":"<img src=\"https://i.imgur.com/tfc14Pz.png\" width=\"650\" />\n<p>发现自己的网站突然开始报 522 错误，之前查资料遇到过好多回，没想到这次轮到自己了。</p>\n<!--more-->\n<h2>错误做法</h2>\n<p>一开始以为是转载了些不和谐的文章被屏蔽了。</p>\n<p>后来以为是阿里相应号召严格把控信息关，国外服务器不给解析过去了。</p>\n<p>最后发现，其实是 github 更新，地址信息变更了。</p>\n<h2>问题解决方式</h2>\n<p>命令行运行</p>\n<pre><code class=\"language-bash\">dig xxx.github.io +nostats +nocomments +nocmd | grep xxx.github.io\n</code></pre>\n<p>得到</p>\n<pre><code class=\"language-bash\">dig xxx.github.io +nostats +nocomments +nocmd | grep xxx.github.io\n; &#x3C;&#x3C;>> DiG 9.10.6 &#x3C;&#x3C;>> xxx.github.io +nostats +nocomments +nocmd\n;xxx.github.io.      IN  A\nxxx.github.io.   3089    IN  A   185.199.a.yyy\nxxx.github.io.   3089    IN  A   185.199.b.yyy\nxxx.github.io.   3089    IN  A   185.199.c.yyy\nxxx.github.io.   3089    IN  A   185.199.d.yyy\n</code></pre>\n<font color=\"red\">\nxxx 换成自己的域名开头；185.199.a.yyy 得到的是数字，此处随便换成了字母，参考即可；\n</font>\n<p>将得到的IP地址配到DNS解析里，问题解决。</p>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/2N1lWmx8tQlaEPDQKX06Txib","title":"Github 静态站报 522 错误","date":"2018-09-27 10:29:00 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["github","blog"]},"excerpt":"发现自己的网站突然开始报 522 错误，之前查资料遇到过好多回，没想到这次轮到自己了。 错误做法 一开始以为是转载了些不和谐的文章被屏蔽了。 后来以为是阿里相应号召严格把控信息关，国外服务器不给解析过去了。 最后发现，其实是 github…"}},{"node":{"id":"9edbd6ae-c7c6-56c0-a6a6-d602cf0231b1","html":"<p>注意，官方已经说明过，以前的发布方法不再适用，需要按以下的流程，才可以发布成功。</p>\n<h2>前言</h2>\n<p>之所以有这么多开发者使用Sublime Text来作为开发工具，归根到底是其有完善的生态系统。而Package Control在其中扮演着重要的角色，不仅下载插件便捷，还能快速查找需要的插件。\n如果你已经开发了插件，可以考虑把插件发布到Package Control channel平台上，让全球的开发者都可以轻松的下载到你的插件。</p>\n<h2>1.检查已存在的插件</h2>\n<ul>\n<li>浏览[<a target=\"_blank\" href=\"https://packagecontrol.io/search\">Search page</a>]，查找是否有已经存在相似的插件名</li>\n<li>在添加插件之前，尝试改善已存在的插件。我们强烈建议你可以在已存在的插件上添加新功能或者修改，总比增加许多相似的名字好。</li>\n</ul>\n<h2>2.包名</h2>\n<p>这里的包名指的是在官方列表查看到的插件名。</p>\n<!--more-->\n<ul>\n<li>不要使用单词Sublime作为包名。这是因为插件都是通过Package Control获得的，如果使用了Sublime会让用户误会或混淆。</li>\n<li>不要使用于其他插件特别相似的名字。例如我们不希望有SublimeTodo 和 Sublime T0d0的情况。</li>\n<li>请使用驼峰命名或下划线命名。</li>\n<li>不能包含. \\ &#x3C;, >, :, \", /, , |, ?等特殊符号。</li>\n<li>只能使用 ASCII编码命名，不能使用中文。</li>\n</ul>\n<h2>3.创建版本库</h2>\n<ul>\n<li>使用 GitHub 或 BitBucket创建版本库。每一个库只能包含一个插件包，并且要确保包的根目录与库的根目录同级。把包内容提交到主干。</li>\n<li>现在可以不用再添加packages.json文件。</li>\n</ul>\n<h2>4.添加你的插件地址到Package Control Channel</h2>\n<ul>\n<li>在Package Control Channel的版本库中，fork一个到你自己的GitHub中，目的是为了添加你自己的插件。</li>\n<li>复制你fork的项目到本地。</li>\n<li>在Sublime Text中打开你fork的package<em>control</em>channel。</li>\n<li>\n<p>添加插件信息，如下：</p>\n<ul>\n<li>打开repository文件夹，你会看到有很多json文件，根据你的包名头个字符来选择对应的json文件，例如我的包名叫做LuaJumpDefinition,那么我就选择l.json这个文件。然后打开json文件，在适当地方添加：</li>\n</ul>\n</li>\n</ul>\n<p>使用GitHub：</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Alignment\",\n    \"details\": \"https://github.com/wbond/sublime_alignment\",\n    \"releases\": [\n        {\n            \"sublime_text\": \"*\",\n            \"tags\": true\n        }\n    ]\n}\n</code></pre>\n<p>使用BitBucket：</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Alignment\",\n    \"details\": \"https://bitbucket.org/wbond/sublime_alignment\",\n    \"releases\": [\n        {\n            \"sublime_text\": \"*\",\n            \"tags\": true\n        }\n    ]\n}\n</code></pre>\n<blockquote>\n<p>需要注意一下几点：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wbond/sublime_alignment/tags\">https://github.com/wbond/sublime_alignment/tags</a> <font color=\"red\">Git地址加上tag，打上 v1.0.0 等tag。v一定要小写。</font></li>\n<li>需要根据 json 里的 name 找到字母排序位置。</li>\n</ul>\n<p>键名说明：</p>\n<ul>\n<li>name：插件名。</li>\n<li>details：你插件的版本库地址。</li>\n<li>release：发布信息。一般包括sublime<em>text，tags，platforms。sublime</em>text表示Sublime Text的版本，如果都可适配则填\n*，如果需要3以上的，则填>=3000。以前的branch现在已经不可用了，必须以tags来代替。platforms表示平台，如果所有系统都适配则可用不用填。</li>\n</ul>\n<h2>5.测试</h2>\n<ul>\n<li>通过Package Control安装 <a target=\"_blank\" href=\"https://packagecontrol.io/packages/ChannelRepositoryTools\">ChannelRepositoryTools</a>插件。</li>\n<li>通过Tools->Command Palette打开控制面板，执行ChannelRepositoryTools: Test Default Channel command，等待测试结果。</li>\n</ul>\n<h2>6.提交到主干</h2>\n<ul>\n<li>浏览你fork出来的package<em>control</em>channel项目</li>\n<li>点击项目的Pull Requests，点击New Pull Request，创建合并主干请求。</li>\n<li>编辑请求信息。</li>\n<li>点击Create pull request button。</li>\n</ul>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/Z8r3O8d6bkxBF8XEKmBfqAIZ","title":"Sublime Text3 插件发布","date":"2018-02-07 22:10:00 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["Sublime Text3"]},"excerpt":"注意，官方已经说明过，以前的发布方法不再适用，需要按以下的流程，才可以发布成功。 前言 之所以有这么多开发者使用Sublime Text来作为开发工具，归根到底是其有完善的生态系统。而Package Control…"}},{"node":{"id":"60a282ee-ab11-5076-a608-9d10cd9a7036","html":"<h3># 搭建项目</h3>\n<pre><code class=\"language-bash\">mkdir brick &#x26;&#x26; cd brick\n</code></pre>\n<h3># 创建页面</h3>\n<pre><code class=\"language-bash\">mkdir src\ntouch src/index.html\n</code></pre>\n<p>编辑 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<!--more-->\n<p>浏览器控制台看到日志输出。</p>\n<h3># 引入 webpack</h3>\n<h6>1. 初始化node环境</h6>\n<pre><code class=\"language-bash\">npm init\n</code></pre>\n<h6>2. 引入webpack</h6>\n<pre><code class=\"language-bash\">npm i -D webapck\ntouch webpack.config.js\n</code></pre>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path from \"path\";\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist/index.js\"),\n        filename: \"bundle.js\"\n    }\n};\n</code></pre>\n<p>webpack 编译生成输出文件</p>\n<pre><code class=\"language-bash\"># 需要全局安装 webpack。安装命令: npm i -g webpack\nwebpack\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">console.log(\"webpack 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div>HTML 页面开始工作了&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>查看浏览器控制台，输出内容变了。说明webpack开始工作了。</p>\n<h3># 搭建babel环境</h3>\n<pre><code class=\"language-bash\">npm i -D babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0\n\ntouch .babelrc\n</code></pre>\n<p>编辑 <code>.babelrc</code></p>\n<pre><code class=\"language-json\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": []\n}\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">const func = (str) => {\n    document.getElementById(\"app\").innerHTML = str;\n};\n\nfunc(\"Babel 开始工作了\");\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">...\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"../dist/bundle.js\">&#x3C;/script>\n&#x3C;/body>\n...\n</code></pre>\n<p>重新 webpack 编译文件，刷新页面看到字串已经打入页面。</p>\n<h3># 搭建服务器环境</h3>\n<pre><code class=\"language-bash\">npm i -D webapck-dev-server\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\ndevServer: {\n    port: 3000\n}\n...\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>这时访问 <code>http://localhost:3000</code> 能看到项目目录结构，当访问 <code>http://localhost:3000/src</code> 目录就能看到我们做的页面了。</p>\n<blockquote>\n<p>虽然开始 Work 了，还是有几个问题</p>\n</blockquote>\n<ol>\n<li>代码目录里的代码，没能自动生成到 dist 目录中。</li>\n<li>服务启动之后，希望能直接访问到 html 页面。</li>\n</ol>\n<p>引入 webpack 插件 <code>html-webpack-plugin</code></p>\n<pre><code class=\"language-bash\">npm i -D html-webpack-plugin\n</code></pre>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\n// new\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n// /new\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    // new\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>运行服务器</p>\n<pre><code class=\"language-bash\">webpack-dev-server\n</code></pre>\n<p>访问 <code>http://localhost:3000</code> 工作正常。</p>\n<h3># 引入 React</h3>\n<pre><code class=\"language-bash\">npm i -S react react-dom\n</code></pre>\n<p>编辑 <code>webpack.config.js</code> 添加 jsx 解析</p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        filename: \"bundle.js\"\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n        })\n    ],\n    // new\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    // /new\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>修改 <code>src/index.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>Brick&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>运行服务器，看到 React 开始工作。</p>\n<h3># 优化：分目录管理资源、动态解析</h3>\n<blockquote>\n<p>到目前有一下几个问题：</p>\n</blockquote>\n<ol>\n<li>js静态资源和html都输出到了一个目录，没有分目录。</li>\n<li>静态资源名字固定，会有缓存问题。</li>\n<li>每次修改都要重启服务器，最好能热加载。</li>\n</ol>\n<h6>1）静态资源目录配置修改</h6>\n<p>编辑 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\noutput: {\n    path: path.join(__dirname, \"./dist\"),\n    filename: \"./js/bundle.js\"\n},\n...\n</code></pre>\n<p>浏览器 Network 能看到 js 文件已经有独立目录了。</p>\n<h6>2) 添加文件 hash</h6>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWwebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n    entry: path.join(__dirname, \"./src/index.js\"),\n    output: {\n        path: path.join(__dirname, \"./dist\"),\n        // new: 第一种方法 - 文件名直接 hash\n        filename: \"./js/[name].[hash].js\"\n        // /new\n    },\n    plugins: [\n        new HtmlWwebpackPlugin({\n            template: path.join(__dirname, \"./src/index.html\"),\n            filename: \"index.html\",\n            // new: 第二种方法 - 文件后参数形式 hash\n            hash: true\n            // /new\n        })\n    ],\n    module: {\n        rules: [{\n            test: /\\.(js|jsx)$/,\n            loader: \"babel-loader\",\n            exclude: \"/node_modules\"\n        }]\n    },\n    devServer: {\n        port: 3000\n    }\n};\n</code></pre>\n<p>浏览器 Network 看到 hash 值已经添加进去了。</p>\n<h6>3) 配置热加载</h6>\n<p>修改 <code>webpack.config.js</code> 添加两处配置</p>\n<p>plugins 添加配置</p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    // new\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n    // /new\n],\n...\n</code></pre>\n<p>devServer 添加配置</p>\n<pre><code class=\"language-js\">...\nhot: true\n...\n</code></pre>\n<p>运行服务器修改文件内容，可以看到不用刷新浏览器也能看到效果了。</p>\n<h3># 添加网站 favicon.ico</h3>\n<p>设计ico文件，放入 <code>./src/assets/images/</code> 文件夹下</p>\n<p>修改 <code>webpack.config.js</code></p>\n<pre><code class=\"language-js\">...\nplugins: [\n    new HtmlWwebpackPlugin({\n        // new\n        favicon: path.join(__dirname, \"./src/assets/images/favicon.ico\"),\n        // /new\n        template: path.join(__dirname, \"./src/index.html\"),\n        filename: \"index.html\",\n        hash: false\n    }),\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n],\n...\n</code></pre>\n<h3># 添加sass加载器</h3>\n<pre><code class=\"language-bash\">npm i -D style-loader css-loader sass-loader node-sass\n</code></pre>\n<p><code>webpack.config.js</code> 的 module 添加配置</p>\n<pre><code class=\"language-js\">...\nrules: [{\n    test: /\\.(js|jsx)$/,\n    loader: \"babel-loader\",\n    exclude: \"/node_modules\"\n}, { // new\n    test: /\\.(scss|sass)$/,\n    use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n}] // /new\n...\n</code></pre>\n<p>创建 sass 文件 <code>./src/assets/styles/main.scss</code></p>\n<pre><code class=\"language-sass\">body {\n    background-color: gray;\n}\n</code></pre>\n<p>修改 index.js 文件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\n// new\nimport \"./assets/styles/main.scss\";\n// /new\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;div>Hello React~~!&#x3C;/div>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>在看页面整个变灰了。</p>\n<h3># 添加 React 路由</h3>\n<pre><code class=\"language-bash\">npm i -S react-router react-router-dom\n</code></pre>\n<p>添加测试文件</p>\n<pre><code class=\"language-bash\">mkdir src/containers\nmkdir src/containers/Home\nmkdir src/containers/Users\ntouch src/containers/Home/index.js\ntouch src/containers/Users/index.js\n</code></pre>\n<p>编辑 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是首页&#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>这是用户页面&#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"./containers/Users\";\nimport HomePage from \"./containers/Home\";\n\nimport \"./assets/styles/main.scss\";\n\nclass Hello extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nReactDom.render(&#x3C;Hello />, document.getElementById(\"app\"));\n</code></pre>\n<p>进入页面看到页面地址变成了 <code>http://localhost:3000/#/</code> ，内容也match到了home的代码。修改hash地址到 /users 也能正确match到users代码。</p>\n<h3># 添加 antd UI 库</h3>\n<p>antd 依赖 less 解析，所以需要先配置好less</p>\n<pre><code class=\"language-bash\">npm i -D less less-loader\n</code></pre>\n<p>修改 webpack 配置(module -> rules添加下面的配置)</p>\n<pre><code class=\"language-js\">...\n{\n    test: /\\.less$/,\n    use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n}\n...\n</code></pre>\n<p>安装 antd</p>\n<pre><code class=\"language-bash\">npm i -S antd\n</code></pre>\n<p>修改 <code>Home/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>这是首页&#x3C;/span>\n                &#x3C;Button type=\"primary\">Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<p>看到蓝色《Button测试》按钮，说明antd正常工作</p>\n<blockquote>\n<p>每次输入运行服务器命令很麻烦，可以配置到 package.json 命令里</p>\n</blockquote>\n<pre><code class=\"language-json\">\"dev\": \"webpack-dev-server --config webpack.config.js --color --progress\"\n</code></pre>\n<p>既可以看到生成进度，颜色也比以前好看了。</p>\n<h3># React hot reload</h3>\n<p>修改 <code>Home/index.js</code> ，增加一个 state React状态值</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"antd/dist/antd.less\";\n\nclass Home extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n    countPlus () {\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;span>目前计数器: { this.state.count }&#x3C;/span>\n                &#x3C;br />\n                &#x3C;Button type=\"primary\" onClick={ this.countPlus.bind(this) }>Button测试&#x3C;/Button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Home;\n</code></pre>\n<blockquote>\n<p>浏览器看到页面效果。点击按钮几次，计数器增加。\n再修改文案看看，浏览器自动更新，但是计数器状态又被重置了。\n如果我们在开发一个购物车功能，那么我们之前挑选好的货物，因为一个文案的修改就会被清空。</p>\n</blockquote>\n<p>安装 react-hot-loader 加载器</p>\n<pre><code class=\"language-bash\">npm i -D react-hot-loader\n</code></pre>\n<p>修改 <code>.babelrc</code> 增加 hot reload 插件配置</p>\n<pre><code class=\"language-text\">{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": [\n        \"react-hot-loader/babel\"\n    ]\n}\n</code></pre>\n<p>修改 webpack 配置</p>\n<pre><code class=\"language-js\">...\nentry: [\n    \"react-hot-loader/patch\",\n    path.join(__dirname, \"./src/index.js\")\n],\n...\n</code></pre>\n<p>将路由代码提取到独立文件中</p>\n<pre><code class=\"language-bash\">mkdir ./src/config\ntouch ./src/config/routers.js\n</code></pre>\n<p><code>routers.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport UsersPage from \"../containers/Users\";\nimport HomePage from \"../containers/Home\";\n\nclass Routers extends React.Component {\n    render() {\n        return (\n            &#x3C;HashRouter>\n                &#x3C;Switch>\n                    &#x3C;Route path=\"/users\" component={ UsersPage } />\n                    &#x3C;Route path=\"/\" component={ HomePage } />\n                &#x3C;/Switch>\n            &#x3C;/HashRouter>\n        );\n    }\n}\n\nexport default Routers;\n</code></pre>\n<p>修改 <code>src/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport Routers from \"./config/routers\";\n\nimport \"./assets/styles/main.scss\";\n\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(&#x3C;Routers />, document.getElementById(\"app\"));\n};\n\nrenderWithHotReload(Routers);\n\nif (module.hot) {\n    module.hot.accept(\"./config/routers\", () => {\n        let Routers = require(\"./config/routers\").default;\n        renderWithHotReload(Routers);\n    });\n}\n</code></pre>\n<p>重新跑一下项目。页面点击几次按钮，修改文案，Cool！React 状态没有被刷。</p>\n<h3># Rudex: Reducer -> Store -> Provider -> Components</h3>\n<p>先安装依赖包</p>\n<pre><code class=\"language-bash\">npm i -S redux react-redux\n</code></pre>\n<p>官方文档对 store 的定义是一个大的js对象。那么先创建一个。\n<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\n// 引入 store 构造函数\nimport { createStore } from \"redux\";\n...\nconst store = createStore();\n...\n</code></pre>\n<p>先弄一个静态数据，等redux结构搭建好了再动态获取。\n<code>src/reducers/reducer-users.js</code></p>\n<pre><code class=\"language-js\">export default () => {\n    return [{\n        id: 1,\n        first: \"Bucky\",\n        last: \"Roberts\",\n        age: 71,\n        description: \"Bucky is a React developer and YouTuBer\",\n        thumbnail: \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        id: 2,\n        first: \"Joby\",\n        last: \"Wasilenko\",\n        age: 27,\n        description: \"Joby loves the Packers, cheese, and turtles.\",\n        thumbnail: \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        id: 3,\n        first: \"Madison\",\n        last: \"Williams\",\n        age: 24,\n        description: \"Madi likes her dog but it is really annoying.\",\n        thumbnail: \"http://i.imgur.com/4EMtxHB.png\"\n    }];\n};\n</code></pre>\n<p>store本身是一个对象，如果返回列表就多个对象了。加载home等其他的container加载数据，肯定不能直接将这些reducer提交给store。\n整合一下数据<code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport UserReducer from \"./reducer-users\";\n// 其他的 container数据，可以继续添加\n\nconst allReducers = combineReducers({\n    users: UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>修改<code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport allReducers from \"./reducers\"; // 引入 reducers\n...\nconst store = createStore(allReducers);\n...\n</code></pre>\n<p>到此，数据已经送到app入口。怎么传递给 containers 呢？\n引入 provider <code>src/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { Provider } from \"react-redux\";\n...\nconst renderWithHotReload = (Routers) => {\n    ReactDom.render(\n        &#x3C;Provider store={ store }>\n            &#x3C;Routers />\n        &#x3C;/Provider>, document.getElementById(\"app\"));\n};\n...\n</code></pre>\n<p>数据现在提交到了 container 里，页面怎么从上下文获取呢？\n我们需要一个redux提供的包装器（React经常会用到这种技术，用函数返回一个包装过的component）\n<code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">...\nimport { connect } from \"react-redux\";\n...\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>好，数据已经在 container 的 prop 里了。\n修改一下 <code>src/containers/Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                {this.props.users.map((user) => (\n                    &#x3C;div key={ user.id }>{ user.first } { user.last }&#x3C;/div>\n                ))}\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(Users);\n</code></pre>\n<p>浏览器访问下 <code>http://localhost:3000/#/users</code>，是不是我们定义的静态数据出来了？</p>\n<h3># Redux: Component -> action -> store</h3>\n<p>简单实现一下交互效果。\n先把用户界面做成上列表，下详情的结构。</p>\n<pre><code class=\"language-bash\">touch src/containers/Users/userList.js\ntouch src/containers/Users/userDetail.js\n</code></pre>\n<p>编辑 <code>Users/index.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nimport UserList from \"./userList\";\nimport UserDetail from \"./userDetail\";\n\nclass Users extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;h1>用户列表:&#x3C;/h1>\n                &#x3C;hr />\n                &#x3C;UserList />\n                &#x3C;br />\n                &#x3C;br />\n                &#x3C;h2>用户详情:&#x3C;/h2>\n                &#x3C;hr />\n                &#x3C;UserDetail />\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default Users;\n</code></pre>\n<p>编辑 <code>Users/userDetail.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\n\nclass UserDetail extends React.Component {\n    render() {\n        return (\n            &#x3C;div>&#x3C;/div>\n        );\n    }\n}\n\nexport default UserDetail;\n</code></pre>\n<p>编辑 <code>Users/userList.js</code> 其实就是原本 index 里的代码</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nexport default connect(mapStateToProps)(UserList);\n</code></pre>\n<p>添加单击事件</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nclass UserList extends React.Component {\n    render() {\n        return (\n            &#x3C;ul>\n                {this.props.users.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>处理下事件逻辑\n<code>actions/index.js</code></p>\n<pre><code class=\"language-js\">export const selectUser = (user) => {\n    console.log(\"Click on user\", user.first);\n    return {\n        type    : \"USER_SELECTED\",\n        payload : user\n    };\n};\n</code></pre>\n<p>点击事件是不是有响应了？</p>\n<p>继续...</p>\n<p>现在有了如下的事件，我们还需要reducer去处理此类型的事件。</p>\n<pre><code class=\"language-json\">{\n    type    : \"USER_SELECTED\",\n    payload : user\n}\n</code></pre>\n<p>创建 <code>src/reducers/reducer-active-user.js</code></p>\n<pre><code class=\"language-js\">export default (state = null, action) => {\n    switch (action.type) {\n        case \"USER_SELECTED\":\n            return action.payload;\n    }\n    return state;\n};\n</code></pre>\n<p>同样在 <code>Users/userDetail.js</code> 里添加上下文转 props 的逻辑</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass UserDetail extends React.Component {\n    render() {\n        if (this.props.user === null) {\n            return (&#x3C;h4>请选择用户&#x3C;/h4>);\n        }\n        return (\n            &#x3C;div>\n                &#x3C;img src={ this.props.user.thumbnail } />\n                &#x3C;h2>{ this.props.user.first } { this.props.user.last }&#x3C;/h2>\n                &#x3C;h3>{ this.props.user.age }&#x3C;/h3>\n                &#x3C;h3>{ this.props.user.description }&#x3C;/h3>\n            &#x3C;/div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.activeUser\n    };\n};\n\nexport default connect(mapStateToProps)(UserDetail);\n</code></pre>\n<p>简单交互完成。redux事件流闭环了。</p>\n<h3># 搭建 api 服务器</h3>\n<p>创建一个简单的json服务器</p>\n<pre><code class=\"language-bash\">npm i -S json-server\n</code></pre>\n<p>创建数据库</p>\n<pre><code class=\"language-bash\">mkdir server\ntouch server/db.json\n</code></pre>\n<p>编辑 <code>db.json</code></p>\n<pre><code class=\"language-json\">{\n    \"users\": [{\n        \"id\": 1,\n        \"first\": \"Bucky\",\n        \"last\": \"Roberts\",\n        \"age\": 71,\n        \"description\": \"Bucky is a React developer and YouTuBer\",\n        \"thumbnail\": \"http://i.imgur.com/7yUvePI.jpg\"\n    }, {\n        \"id\": 2,\n        \"first\": \"Joby\",\n        \"last\": \"Wasilenko\",\n        \"age\": 27,\n        \"description\": \"Joby loves the Packers, cheese, and turtles.\",\n        \"thumbnail\": \"http://i.imgur.com/52xRlm8.png\"\n    }, {\n        \"id\": 3,\n        \"first\": \"Madison\",\n        \"last\": \"Williams\",\n        \"age\": 24,\n        \"description\": \"Madi likes her dog but it is really annoying.\",\n        \"thumbnail\": \"http://i.imgur.com/4EMtxHB.png\"\n    }]\n}\n</code></pre>\n<p>修改 <code>package.json</code> scripts 属性添加如下命令</p>\n<pre><code class=\"language-json\">...\n\"server\": \"json-server server/db.json -w -p 3030\"\n...\n</code></pre>\n<p><code>npm run server</code> 之后访问 <code>http://localhost:3030/db</code> 是不是看到我们的数据了。</p>\n<h3># 数据从 json 服务器上获取</h3>\n<p>先创建 reducer。<code>src/reducers/userReducer.js</code></p>\n<pre><code class=\"language-js\">import {\n    GET_USER_LIST,\n    GET_USER_LIST_SUCCESS,\n    GET_USER_LIST_ERROR\n} from \"../actions/userActions\";\n\nconst initState = {\n    isLoading: false,\n    userList: [],\n    errorMsg: \"\"\n};\n\nexport default (state = initState, action) => {\n    switch (action.type) {\n        case GET_USER_LIST:\n            console.log(\"GET_USER_LIST\");\n            return {\n                ...state,\n                isLoading: true,\n                userList: [],\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_SUCCESS:\n            console.log(\"GET_USER_LIST_SUCCESS\");\n            console.log(action.userList);\n            return {\n                ...state,\n                isLoading: false,\n                userList: action.userList,\n                errorMsg: \"\"\n            };\n        case GET_USER_LIST_ERROR:\n            console.log(\"GET_USER_LIST_ERROR\");\n            return {\n                ...state,\n                isLoading: false,\n                userList: [],\n                errorMsg: \"数据请求失败...\"\n            };\n        default:\n            return state;\n    }\n};\n</code></pre>\n<p>修改 <code>src/reducers/index.js</code></p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\";\n\nimport User__Reducer from \"./reducer-users\";\nimport ActiveUserReducer from \"./reducer-active-user\";\n\nimport UserReducer from \"./userReducer\";\n\nconst allReducers = combineReducers({\n    users        : User__Reducer,\n    activeUser   : ActiveUserReducer,\n    userState    : UserReducer\n});\n\nexport default allReducers;\n</code></pre>\n<p>添加 <code>src/actions/userActions.js</code></p>\n<pre><code class=\"language-js\">export const GET_USER_LIST         = \"users/GET_USER_LIST\";\nexport const GET_USER_LIST_SUCCESS = \"users/GET_USER_LIST_SUCCESS\";\nexport const GET_USER_LIST_ERROR   = \"users/GET_USER_LIST_ERROR\";\n\nexport const getUserList = () => ({ type: GET_USER_LIST });\nexport const getUserListSuccess = (payload) => ({ type: GET_USER_LIST_SUCCESS, userList: payload });\nexport const getUserListError = () => ({ type: GET_USER_LIST_ERROR });\n\nexport const initUserList = () => {\n    return dispatch => {\n        dispatch(getUserList());\n\n        // 延时查看界面效果\n        setTimeout(function () {\n            fetch(\"http://localhost:3030/users\")\n                .then(res => res.json())\n                .then(list => dispatch(getUserListSuccess(list)))\n                .catch((err) => dispatch(getUserListError()));\n        }, 1000);\n\n        // return fetch(\"http://localhost:3030/users\")\n        //      .then(res => res.json())\n        //      .then(list => dispatch(getUserListSuccess(list)))\n        //      .catch((err) => dispatch(getUserListError()));\n    };\n};\n</code></pre>\n<p>就此，数据部分准备好了。该修改界面了。</p>\n<p>修改用户列表加载逻辑 <code>src/container/Users/userList.js</code></p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { selectUser } from \"../../actions/index\";\n\nimport { initUserList } from \"../../actions/userActions\";\nimport { store } from \"../../index\";\n\nclass UserList extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = this.props.userState;\n        this.props.initUserList();\n    }\n    componentWillReceiveProps (newProps) {\n        this.setState(newProps.userState);\n    }\n    reloadDate () {\n        this.props.initUserList();\n    }\n    render() {\n        if (this.state.isLoading) {\n            return (&#x3C;h4>数据加载中&#x3C;/h4>);\n        }\n        return (\n            &#x3C;ul>\n                {this.state.userList.map((user) => (\n                    &#x3C;li key={ user.id } onClick={ () => this.props.selectUser(user) }>{ user.first } { user.last }&#x3C;/li>\n                ))}\n                &#x3C;li>\n                    &#x3C;br />\n                    &#x3C;button onClick={ this.reloadDate.bind(this) }>从新请求数据&#x3C;/button>\n                &#x3C;/li>\n            &#x3C;/ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users     : state.users,\n        userState : state.userState\n    };\n};\n\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectUser: selectUser,\n        initUserList: initUserList\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, matchDispatchToProps)(UserList);\n</code></pre>\n<p>刷新浏览器。首先会看到“数据加载中”，过1秒之后，数据加载出来。用户名的点击效果还是上一节的内容，没有变化。</p>\n<h4>- THE END -</h4>\n<hr>","frontmatter":{"path":"/zZDqsfQ1PK8UNWIktSnZWnIF","title":"从零开始搭建 React 项目","date":"2018-02-07 21:08:25 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["React"]},"excerpt":"# 搭建项目 # 创建页面 编辑  src/index.html 浏览器控制台看到日志输出。 # 引入 webpack 1. 初始化node环境 2. 引入webpack 编辑  webpack.config.js webpack 编译生成输出文件 修改  src/index…"}},{"node":{"id":"ff566157-3f72-5f37-8a95-18ed52ab7094","html":"<p>有人认为可用性测试又烧钱又复杂，即使要用也应该是那一小部有预算、有时间的网页设计项目上面。但事实并非如此。复杂的可用性测试确实是种浪费。<strong>其实，每次测试只需不超过五个用户。只要尽可能多搞些这种小测试，就能取得最佳效果。</strong></p>\n<p>在之前的研究中，Tom Landauer 和我曾提出，在一项有 n 个用户参与的可用性测试中，能够找到的相关问题的数量是：N (1-(1- L) ^n )</p>\n<img src=\"https://i.imgur.com/LCDPS7s.jpg\" width=\"500\" />\n<p>其中，N 是该产品设计中关于可用性的问题的总数，L 是测试单个用户所能发现的可用性问题占通过他发现的问题总数的比例。通常，L 的值为 31％，这是我们研究大量项目后计算出的一个均值。如果取 L 为 31%，将上述公式表示成曲线，则如下图：</p>\n<!--more-->\n<img src=\"https://i.imgur.com/vv9lWU4.jpg\" width=\"500\" />\n<p>译者注：横轴是测试用户的个数。竖轴是测试中发现的关于可用性的问题的总数。</p>\n<p>不出意料，从这个曲线中我们看到，<strong>没有测试的话我们得到的反馈是零。</strong></p>\n<p>一旦从第一位测试用户那里搜集到了数据，你一下子就会有不少想法，几乎就是关于这项设计的可用性你所应该知道的全部问题的三分之一。没有数据和即使有一丁点儿的数据之间可谓天差地别。\n当你测试第二位用户的时候，你会发现他/她的有些表现跟第一位用户是一样的，所以你新得知的东西里面其实有一部分重叠。毫无疑问，没有两个人是相同的，所以第二位用户总是能给你带来一些新的东西，而这些东西是你在测试第一位用户时没有观察到的。所以，<strong>第二位用户能带来一些新鲜的想法，但远不及第一位用户多。</strong>\n第三位用户的很多行为可能你已经在第一位或者第二位用户身上，甚至在两者身上你都已经观察到了。不过当然了，即使比不上第一位和第二位用户，这第三位用户依然会给你带来些许新的数据。\n<strong>随着你测试的用户越来越多，你能新获取的东西会越来越少，因为你将一次次地看到同样的东西。</strong>所以真的没有必要不断地观察相同的东西，你将会迫不及待地想回到你的工作台前重新设计网站来消除这些可用性方面的问题。\n从第五位用户之后，你就在浪费你的时间重复观察同样的结论，而没有任何新的收获。</p>\n<img src=\"https://i.imgur.com/edBZYlZ.jpg\" width=\"500\" />\n<h4>设计迭代</h4>\n<p>上面的曲线明确显示，你需要测试至少 15 位用户才能发现关于这项设计所有的可用性问题。那为什么我建议只需要测试五位用户呢？\n<strong>主要是因为比起把所有资源砸到一个复杂的大型测试里，把预算分配到很多小型用户测试会更理想。</strong>现在我们假设你有足够的预算来招募 15 位代表用户进行测试。很好，把这笔预算拿来做三次小测试，每次五名用户！\n进行多次测试是因为，<strong>可用性工程的真正目的不仅仅是记录设计的不足之处，而是做出改进。</strong>通过第一次对五名用户进行测试之后， 85% 的可用性问题已经被发现。这时候你会希望着手重新设计，解决这些问题。\n<strong>当你完成新一轮的设计之后，你需要再次测试。</strong>尽管我之前说过新设计应该「解决」在第一次测试中发现的问题，事实上只是你认为新的设计已经解决了这些问题。但是既然没有人能够设计出完美的用户界面，谁也不能保证这个新的设计真的解决了前述问题。\n而第二次测试就能够发现这些改进是否真的奏效。另外，在引入新的设计的同时，总有可能会引入新的问题，即使旧问题已经得到了解决。\n此外，<strong>第二次测试将会发现第一次测试中遗留的 15% 的可用性问题中的一大部分。</strong>（然后还会有 2% 的原始问题——这些问题得等到进行第三次测试才能被发现。）\n最后，第二次用户测试能更深入地发掘出网站在基础结构方面的可用性问题，包括信息架构、任务流以及用户需求匹配。这些重要问题常常在起初的测试中被忽略了，因为被测试的用户被一些愚蠢的、表面的问题绊住了，没能够真正发现网站的深层次问题。\n<strong>所以第二次测试既能够保证第一次测试结果的质量，也能够帮助提供更深刻的反馈。</strong>经过这次测试，你将得到一份新的（但数量更少的）需要在下一轮设计中解决的可用性问题清单。上述问题同样适用于下一轮设计：不是所有的解决措施都有效；优化完互动界面之后，一些更深层次的问题将浮出水面。所以，第三次测试也是有它的用武之地的。\n<strong>比起一次 15 名用户参与的庞大的测试，三次仅有五名用户的小测试能更有效地提升用户体验。</strong></p>\n<img src=\"https://i.imgur.com/eC8xLDC.jpg\" width=\"500\" />\n<h4>为什么不一次只测试一个用户</h4>\n<p>也许你会想 15 次一个用户的测试会比三次五个用户的测试效果更好。上面的曲线图也确实显示我们从第一个测试用户那里所获取的信息远多于之后的其他用户。\n既然如此，我们会什么要在一次测试中纳入第二第三甚至更多个用户呢？原因有两个：</p>\n<ul>\n<li>你有可能会被某一个用户的不寻常行为所误导，这些行为是偶然为之或者不具有代表性。三个用户就足以让你大概了解用户行为的多样性以及其中哪些是特例哪些具有代表性的。</li>\n<li>用户测试的成本收益分析显示，最佳的每次测试用户数量在三到五个之间，具体要根据测试的方式而定。一次测试的规划和实施总是有固定的初始成本，这就意味着最好是将这笔初始的开销平摊到从用户那里所取得的成果上。</li>\n</ul>\n<h4>什么时候需要测试更多用户</h4>\n<p>如果你的网站面向几类非常不同的用户，那么你需要对更多用户进行测试。以上方法只对那些对网站的利用方式相差无几的具有可比性的用户有效。\n<strong>如果说你的网站同时面向孩子和家长，这两个用户群的行为表现极其不同，你就有必要对这两群人都进行用户测试。同样的方法也适用于连接销售方和购买方的系统。</strong>\n即使各个用户群之间差异再大，从两个群体之间观察得到的结果也总会存在很多共同之处。毕竟，所有的用户都是人。此外，很多可用性问题是关于人与页面交互的根本方式和其它网站对于用户行为的影响。\n在对多个差异巨大的用户群体进行测试的时候，你不需要像对单一群体进行单一测试时那样，在每个群体中都纳入那么多用户。\n即使对每个群体测试时没有很多的用户，但不同群体之间的观察结果的重叠部分会确保最终结果的有效性。所以我建议：</p>\n<ul>\n<li><strong>如果有两个用户群体，每个群体挑选三到四个用户就行。</strong></li>\n<li><strong>如果测试三个及以上的用户群体，每个群体挑选三个用户（通常你需要至少三个用户来确保该群体中用户行为的多样性）。</strong></li>\n</ul>\n<h4>- THE END -</h4>\n<p>[<a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MjM5MjAyNDUyMA==&mid=2650497024&idx=1&sn=a4aecac7631c2a86bfae6fd51ee37998&chksm=bea352a789d4dbb1744ee13deeb5a1b56e599f9e2d718f987b0553bb1c8213c1eda777977173&mpshare=1&scene=1&srcid=0125l8CaAs6wPLpxsNAEaOp7&key=5209056f11aaed339b8f58c7cccad86f6566d992bcee24f4e04a3218a9f8f8dbae387b7a3fa50ec7d4f730ad17723c51c84c02c08afb95e2c3cdf1a66335aeedf843295529487b47b81aa9fab305e670&ascene=0&uin=Njg0NjIxMTAx&devicetype=iMac+MacBookPro10%2C1+OSX+OSX+10.12.2+build(16C67)&version=12020001&nettype=WIFI&fontScale=100&pass_ticket=ew4iHuzfMniZa%2Bd9hO1NnVKArl1kBug%2FwRzeokRcEcQJkY6440ByjRWoDbcwm0Z9\">原文</a>]</p>\n<hr>","frontmatter":{"path":"/v09WT4Hceb6VIeAyNx79WgiK","title":"为什么产品测试只找 5 位用户就够了？","date":"2017-01-25 15:08:07 +0800","comments":true,"categories":"programming","author":"数字生活家聚集地","tags":["测试"]},"excerpt":"有人认为可用性测试又烧钱又复杂，即使要用也应该是那一小部有预算、有时间的网页设计项目上面。但事实并非如此。复杂的可用性测试确实是种浪费。 其实，每次测试只需不超过五个用户。只要尽可能多搞些这种小测试，就能取得最佳效果。 在之前的研究中，Tom Landauer…"}},{"node":{"id":"b6d70bbb-1d91-59d8-b507-f6deac695dab","html":"<h3>1.创建主题工程</h3>\n<p><code>Command + Shift + p</code> 选择 <code>Package Generator: Generate Syntax Theme</code></p>\n<h2> </h2>\n<h3>2.根据喜好修改配色</h3>\n<h2> </h2>\n<!--more-->\n<h3>3.提交并发布</h3>\n<h4>==> 打 git tag</h4>\n<pre><code class=\"language-bash\">git tag v0.2.0\n</code></pre>\n<h4>==> 提交 tag 信息</h4>\n<pre><code class=\"language-bash\">git push --tags\n</code></pre>\n<h4>==> 发布\tapm 皮肤</h4>\n<pre><code class=\"language-bash\">apm publish --tag v0.1.0\n</code></pre>\n<h2> </h2>\n<h3>4.如果需要输入 token，输入 Atom 登录之后给的 token</h3>\n<h2> </h2>\n<h3>5.享受成功</h3>\n<img src=\"https://i.imgur.com/HOjoVsa.jpg\" />\n<h3>^.^ 地址</h3>\n<p>[<a target=\"_blank\" href=\"https://atom.io/themes/sir0xb-dark-syntax\">sir0xb-dark-syntax</a>]</p>\n<hr>","frontmatter":{"path":"/OSvpGtp5tKHu3ITtV7ixHmEh","title":"创建自己的Atom主题","date":"2016.08.04 22:21:00 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["atom"]},"excerpt":"1.创建主题工程 Command + Shift + p  选择  Package Generator: Generate Syntax Theme   2.根据喜好修改配色   3.提交并发布 ==> 打 git tag ==> 提交 tag 信息 ==> 发布\tapm…"}},{"node":{"id":"e024ca9d-a3c7-5766-891d-87b1a20a547c","html":"<img src=\"https://i.imgur.com/VAjFYQT.jpg\" width=\"500\" />\n<!--more-->\n<p>随着互联网深入人们的生活，浏览器的发展更加丰富多彩，其种类多样，版本更新速度也日益提高。与此同时，浏览器的安全问题也备受关注。下面，我们就扒一扒主流浏览器实现了什么样的安全机制。</p>\n<h2>一、背景</h2>\n<p>随着互联网的快速发展，种类繁多的浏览器也变得越来越复杂，它们不仅分析纯文本和HTML，还包括图像、视频和其他复杂的协议和文件格式等。</p>\n<p>这些极大地丰富了浏览器的功能，给用户带来了方便和更好的浏览体验，然而也带来了一系列的安全问题，各种各样的安全漏洞层出不穷，成为了黑客最易攻击的对象之一。</p>\n<p>为此，浏览器厂商也在不懈努力，在积极修复漏洞的同时，也在浏览器安全机制方面做着努力，本文将展示和对比主流浏览器当前对安全机制的实现状况。</p>\n<p>首先来看看最近全球浏览器的市场份额，根据Net Market Share的统计数据，2016年7月份全球浏览器的市场份额如下图所示：Chrome占据市场份额最多，占50.95%，其次是占29.60%的IE，接下来依次是Firefox、Safari和Edge，这五款浏览器占据了全球98.27%的市场份额，其影响力非同一般。</p>\n<img src=\"https://i.imgur.com/AXD2Mrs.jpg\" width=\"500\" alt=\"2016年7月份全球浏览器市场份额分布图\" />\n<h2>二、浏览器安全机制简介</h2>\n<p>近来，我们对上述五款浏览器的安全机制做了初步的探究，发现其内部的安全机制大同小异，下面就其主要的安全机制做一下简单介绍。</p>\n<h4>1、沙箱（Sandbox）</h4>\n<p>沙箱是一种隔离对象/线程/进程的机制，控制浏览器访问系统资源的权限，从而达到保护用户的系统不被网页上的恶意软件侵入、保护用户系统的输入事件(键盘/鼠标)不被监视、保护用户系统中的文件不被偷取等目的。</p>\n<p>最初的浏览器沙箱是基于Hook实现的，后来的Chrome沙箱是利用操作系统提供的一些安全机制实现的。</p>\n<h4>2、地址空间布局随机化（ASLR）</h4>\n<p>ASLR是一项缓解缓冲区溢出问题的安全技术。其原理是将进程运行所需的系统核心组件和对象在内存中的分布随机化。为了防止攻击者利用在内存中跳转到特定地址的函数，ASLR技术随机排列进程的关键数据区域的位置，包括可执行的部分、堆、栈及共享库的位置。</p>\n<h4>3、JIT Hardening</h4>\n<p>JIT Hardening是防止对JIT引擎本身的滥用的机制。JIT引擎通常在可预测的地址空间中放置可执行代码，这无疑给攻击者提供了可乘之机。只要攻击者计算出可执行代码放置的地址，极有可能通过代码覆盖来进行恶意活动。</p>\n<p>因此，必须有一项类似于ASLR的技术来保护JIT引擎，即JIT Hardienng。JIT Hardening常用技术包括：代码库队列随机化、指令库队列随机化、常量合并、内存页面保护、资源限制等。</p>\n<h4>4、数据执行保护（DEP）</h4>\n<p>DEP是一种阻止数据页执行代码的机制。将数据所在内存页标识为不可执行，当程序尝试在数据页面上执行指令时会抛出异常，而不是去执行恶意指令。</p>\n<h4>5、缓冲区安全检查（/GS）</h4>\n<p>/GS是一种不强制缓冲区大小限制的代码常用技术。通过将安全检查插入到已编译代码中完成，检测某些改写返回地址的缓冲区溢出。</p>\n<h4>6、执行流保护（CFG）</h4>\n<p>CFG是对CFI（控制流完整性）的一个实用性实现，是一种编译器和操作系统相结合的防护手段，目的在于防止不可信的间接调用。对基于虚表进行攻击的利用手段可以有效防御。</p>\n<h4>7、附加组件签名机制</h4>\n<p>附加组件签名机制是Firefox43版本开始正式采取的一项对其附加组件管理的机制。Mozilla 根据一套安全准则对其附加组件进行验证并为其“签名”，需要签名的类型包括扩展，未被签名的扩展默认被禁用。</p>\n<p>这一机制对阻止来自第三方的恶意扩展起到了很好的作用。</p>\n<h4>8、W^X</h4>\n<p>W^X是“写异或执行”（WriteXOR Execute）的缩写，是OpenBSD中富有代表性的安全特性之一。W^R内存保护机制能够让网页使用内存写入代码或执行代码，但不能够同时进行这两种操作，可以阻止某些缓冲区溢出的攻击。</p>\n<h4>9、MemGC</h4>\n<p>MemGC即内存垃圾收集器(Memory Garbage Collector)，是一种内存管理机制,由IE11的Memory Protector改进而来，首次在EdgeHTML和MSHTML中使用，采用标记清除(Mark-Sweep)算法对垃圾进行回收，能够阻止部分UAF（Use After Free）漏洞。</p>\n<p>需要指出的一点是，上述几种安全机制并不是浏览器独有，有些机制，例如ASLR、/GS、CFG等，也被操作系统和编译器广泛采用。以上就是对几种主要安全机制的简单介绍，不够全面和详尽，还请大神勿喷。</p>\n<h2>三、主流浏览器对安全机制的实现情况</h2>\n<p>对于前面提到的几种浏览器安全机制，主流浏览器并不是全部实现了，具体情况如下表所示：</p>\n<img src=\"https://i.imgur.com/AZ1QHXm.jpg\" width=\"500\" alt=\"主流浏览器安全机制的对比情况表\" />\n<p>由表可以明显看出，除了Safari以外，其他四种浏览器均实现了前六种安全机制。而Safari不支持缓冲区安全检查机制，未实现CFG执行流保护机制但有资料显示其实现了控制流完整性（CFI）。</p>\n<p>对于后面三种安全机制，附加组件签名机制和W^X机制是Firefox浏览器独有的，而MemGC机制是Egde浏览器独有的。</p>\n<p>在此，还需指出一点，虽然对某一安全机制有多个浏览器支持，但各个浏览器的实现方式及实现程度不尽相同。下面举两个例子加以说明：</p>\n<p>（1）虽然Edge浏览器和IE浏览器都实现了沙箱机制，但Edge浏览器将框架进程也包含在了整个安全体系里面，权限更低，大大提高了安全性。</p>\n<p>（2）Chrome和IE的沙箱机制对各种行为的限制也是不同的，图3列举了一些常见行为及Chrome和IE沙箱机制对其的限制对比情况：</p>\n<img src=\"https://i.imgur.com/wnIdHvh.jpg\" width=\"500\" alt=\"Chrome和IE沙箱机制对部分行为的限制情况\" />\n<h2>总结</h2>\n<p>浏览器发展至今，已经拥有比较成熟的安全机制，主要包括沙箱机制、JIT Hardening、地址空间布局随机化、数据执行保护、缓冲区安全检查、执行流保护、附加组件签名机制、W^X、MemGC等。</p>\n<p>然而，浏览器的安全并不是已经完全保障，各大浏览器厂商也在安全机制方面做着不懈的努力，期待着浏览器安全方面质的提高。</p>\n<h2>参考文献</h2>\n<p><a href=\"https://www.netmarketshare.com/\">https://www.netmarketshare.com/</a>\nAccuvantBrowserSecCompar<em>FINAL.pdf\n<a href=\"http://www.freebuf.com/news/73858.html\">http://www.freebuf.com/news/73858.html</a>\n<a href=\"https://wiki.mozilla.org/Security/Sandbox\">https://wiki.mozilla.org/Security/Sandbox</a>\n<a href=\"https://developer.apple.com/safari/technology-preview/release-notes/\">https://developer.apple.com/safari/technology-preview/release-notes/</a>\n<a href=\"https://support.mozilla.org/zh-CN/kb/add-ons-signing-firefox?as=u&#x26;utm\">https://support.mozilla.org/zh-CN/kb/add-ons-signing-firefox?as=u&#x26;utm</a></em>source=inproduct\n<a href=\"https://jandemooij.nl/blog/2015/12/29/wx-jit-code-enabled-in-firefox/\">https://jandemooij.nl/blog/2015/12/29/wx-jit-code-enabled-in-firefox/</a>\n<a href=\"https://securityintelligence.com/memgc-use-after-free-exploit-mitigation-in-edge-and-ie-on-windows-10/\">https://securityintelligence.com/memgc-use-after-free-exploit-mitigation-in-edge-and-ie-on-windows-10/</a></p>\n<p>[<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=2651061832&idx=2&sn=233869f7e47291aa9d7cde78f0d02599&scene=0#wechat_redirect\">原文：《 FreeBuf 》</a>]</p>\n<hr>","frontmatter":{"path":"/dWwUeqb08mSa1EHJ98yDkriF","title":"扒一扒浏览器的安全机制","date":"2016-09-01 11:29:30 +0800","comments":true,"categories":"programming","author":"ArkTeam","tags":["browser"]},"excerpt":"随着互联网深入人们的生活，浏览器的发展更加丰富多彩，其种类多样，版本更新速度也日益提高。与此同时，浏览器的安全问题也备受关注。下面，我们就扒一扒主流浏览器实现了什么样的安全机制。 一、背景 随着互联网的快速发展，种类繁多的浏览器也变得越来越复杂，它们不仅分析纯文本和HTML…"}},{"node":{"id":"0208ee97-1572-5aed-9cd0-9de4b5761f4f","html":"<p>2013年1月，在拒绝了微软的offer之后，我加入了一家快速发展的创业公司，公司名叫?Lucid Software（Lucidchart和Lucidpress的创造者）。虽然我很感谢微软给我的工作机会，但是我想工作在一个有机会快速进入领导层的地方。我喜欢在?Lucid?工作。Lucid 有着聪明和有才华的员工，而且效益高，但我最喜欢的是有让我学习和成长的机会。因为我对领导能力感兴趣，所以在2014年的春天，我很兴奋地开始领导Lucidpress开发团队。</p>\n<p>从那时起，我逐渐学到了很多关于领导团队方面的东西。我犯过错误，也做过很多正确的事情。下面是我最宝贵的经验总结：</p>\n<h4>1.要求员工去做不易之事</h4>\n<p>我发现人们通常比他们认为的要能干得多。大多数时候，要扩展和实现潜力，我们只需要要求人们去做即可。为团队中的每一个人制定特定的挑战，可以帮助他们集中精力，发现更多潜力。</p>\n<p>最近，我要求一个团队成员担任正在招聘的新职位的导师（旁白：虽然目前还没有找到合适的人选）。然后，我发现这位同事改变了他的编码方式。现在的他会积极地寻找问题的答案，更愿意开口说话，因为他知道他很快将成为导师。我定时跟进并提醒他所要面临的挑战，也会在适当的时候提供建议。这使他专注于挑战，因为他知道我相信他的能力。</p>\n<!--more-->\n<img src=\"https://i.imgur.com/NHSfhsR.jpg\" />\n<h4>2.了解每个团队成员</h4>\n<p>团队的每个人都有其独特的优势和才能。亲自去了解他们可以帮助我知道他们对工作有什么喜欢和不喜欢的地方。这能让我深刻了解什么挑战能让每一个人奋起拼搏，提升他们成功的更大潜力。了解团队成员的长处意味着我可以了整个团队的利益利用这些优势为。</p>\n<p>建立高品质的工作关系需要时间和一致性。所以，我每周举行一对一的会议。我给每个人时间用于谈论事情的进展。我常常提前准备几个问题来鼓励反馈。我最喜欢的问题是“这周你最喜欢和你最不喜欢的工作是什么？”通过问这个问题，可以帮助我了解每个员工的长处和弱点，并揭开一些隐藏着的有关于团队成员可能对当前培养方法不舒服的问题。这是一个很好的起点。</p>\n<p>在Lucid，每个团队在工作之外每个月都会举办活动，以促进彼此之间更好的了解。例如，我们团队所举办过的活动就有密室逃生、玻璃吹制和泡泡足球等。或者甚至干脆到外面走走，一起共进午餐，这些都是相互了解的好机会。这给了我一个机会去了解大家真正关心的东西，以及他们在非工作环境中是什么样的。</p>\n<p>我还发现在午休时和大家坐在一起也是有益的。离开一段时间，哪怕30分钟也会让我下午的工作更有效率。当我在午餐时间与某一个团队成员坐在一起吃饭时，通常都能展开一段愉快的对话。相较于更正式的会议中，这种休闲的环境可能会让人更乐于接受对方的关心。</p>\n<img src=\"https://i.imgur.com/D5kirDG.jpg\" />\n<h4>3.保护团队时间</h4>\n<p>干扰和问题时不时地冒头，如果任其发展，会妨碍一个团队的成功。作为一个管理者，当我能过滤其他员工的请求时，正是我的团队最成功的时候。无论是销售团队成员需要添加某个功能以便于达成交易，还是会影响用户的一个迫切问题，总会提出辅助项目。团队成员很容易受到来自于更重要和长期项目的潜在干扰而偏离航向。当我过滤掉这些类型的问题时，我的团队便能保持专注于最重要的项目。</p>\n<p>当团队致力于冲刺期间竞相完成工作时，Lucid实行的scrum方法就能派上用场了。明确知道工作应在冲刺的最后阶段完成可以帮助大家避免局限于可能出现的不太重要的问题。通常情况下，如果一些非紧急的问题来了，我会把它积压下一个冲刺期间。其他员工也会因为完成了他们的要求而满意，而团队则可以继续专心致志不必中断。</p>\n<p>我需要提高警惕的是，当事情在松弛时段出现或当有人走进我们工作空间的时候。我得注意和尽量去做第一个回答问题的人，这样整支团队就不会受到问题和疑问的干扰。这意味着我要花更多的时间来处理非冲刺的问题，但它可以让团队的其他成员保持专注。</p>\n<h4>4.培养一种尝试的文化</h4>\n<p>失败是每个学习过程的一部分。犯错是必然的。保护团队避免打扰并不意味着阻止他们扩展一些有益的——有时甚至是不舒服的学习机会。</p>\n<p>花费时间来学习和提高是很重要的，这样你可以避免犯以前的错误。留些时间用于定期回顾是从失败中学习的伟大方法。每两个星期的冲刺阶段结束后，我们会空出时间来回顾我们做的好的地方以及我们没有做好的地方。坦然地承认错误并从错误中学习使得团队成员愿意承担风险去发现巨大的回报。</p>\n<p>在回顾中，有一个特别的部分，我喜欢称之为“Andy’s screw up of the sprint”。这是我以前曾犯过错误的地方。我通常会花几分钟的时间来浏览我搞砸了什么以及从中我学到了什么。共享失败使得开会的氛围变得不那么评判化，演绎了为了学习而不耻于承认错误的正确榜样。</p>\n<img src=\"https://i.imgur.com/6tmrnCR.jpg\" />\n<h4>5.让团队成为英雄</h4>\n<p>作为团队的领袖，很自然地会牢记每一次事情出错的日子。退一步，而不是深挖并非我的最初反应。让大家有机会去带头一定的挑战很重要，这样当事情进展顺利的时候，他们也可以得到赞誉。</p>\n<p>我们的团队最近为Lucidpress构建了InDesign。我对这个问题很感兴趣，但是我移交了很多任务给Thayne，Lucidpress团队中的一员。我让他来带头探索方法。他在构建实现方面完成得非常惊艳。原本我并不愿意放手，但我这样做了，并见到了成效。Thayne渐渐成熟起来，工作出色，最后还基于我们做的一些工作编写了一个新的开源项目。</p>\n<h4>6.不要这么严肃</h4>\n<p>总会有事情进展困难，大家心情焦虑，压力沉重的时候。这时候，你就不应该过于严肃。不妨开个玩笑（即使是冷笑话），分享一个有趣的YouTube视频或完美的xkcd。</p>\n<img src=\"https://i.imgur.com/VyIOZ1c.png\" />\n<p>压力的残酷会阻碍成功。用一种幽默的态度来看待问题，保护大家避免受自我压力的戕害。有时候是应该严肃，但这样的情况并不多见。一般情况下，一定程度的快乐可以让每个人都变得更富有成效。</p>\n<p>在我们紧张地试图完成InDesign Import测试版的时候，我会在我们的每日站会中分享我们一点轻松的东西。这一两分钟是给团队很好的休息时间。我还在我的办公桌上放了一些Nerf枪，以帮助放松情绪。它们也可以吸引别人的注意力，尽管他们还戴着耳麦（虽然，我不建议经常这样做）。</p>\n<img src=\"https://i.imgur.com/GSvLY7x.jpg\" />\n<h4>7.要及时进行艰难的对话</h4>\n<p>这是我历经艰辛才学到的教训。我碰到了一个老是偷懒的团队成员。我相信大家会自己做好工作，而且他们一般也不会让我失望。这是我第一次碰到这样一个似乎一点都不在乎工作完成如何的人。我没有很快地和他交流，而是一直等待着，希望情况会好转（当然，事实是依然如此）。到我终于下定决心解决这一问题的时候，他已经来不及做太多的改变，因为这位成员是一名实习生。如果我能早点和他说说，反正也许他能做出更大的改变，并且大大提高团队的士气。</p>\n<p>当问题出现，或我需要反馈时，那么就应该马上把人拉到一边，让他们知道。可能会让人尴尬，但绝对比辞退一个人要不那么难以开口。</p>\n<img src=\"https://i.imgur.com/0ypeFdz.jpg\" />\n<h4>备注：关心每一个人</h4>\n<p>领导力最重要的部分实际上是关心团队中的每个人。这不是一件可以假装的事情。当我专注于帮助我的团队取得成功是因为我真心关心他们时，我的团队给了我他们最佳的努力。我们成为了一个所向披靡的团队。更容易给出反馈，因为他们知道我心中牢记他们的利益。团队成员也更愿意忽视我的领导错误，因为他们知道我的原意是关心他们。</p>\n<p>我依然在学习如何成为一个伟大的领导人员。虽然在这么多年的领导中，我也犯过不少错误，但是很幸运的是，我从中学到了许许多多重要的领导经验。最后，非常期待大家对于领导方面的提示和建议！</p>\n<p>[<a target=\"_blank\" href=\"http://www.w2bc.com/article/113934\">原文：《 爱编程 》</a>]</p>\n<hr>","frontmatter":{"path":"/3ZGIdvNpLFWa6zV1uoa4mc7s","title":"作为项目经理的7个经验教训总结","date":"2016-08-31 18:47:18 +0800","comments":true,"categories":"programming","author":"Someone","tags":["思考"]},"excerpt":"2013年1月，在拒绝了微软的offer之后，我加入了一家快速发展的创业公司，公司名叫?Lucid Software（Lucidchart和Lucidpress的创造者）。虽然我很感谢微软给我的工作机会，但是我想工作在一个有机会快速进入领导层的地方。我喜欢在?Lucid…"}},{"node":{"id":"5a0f4da0-7870-53b1-af9d-30000bc6b342","html":"<p>以前用 <code>hexo</code> 维护网站的时候评论系统用的是多说，虽然 <code>octopress</code> 自带了一个 <code>disqus</code> 评论系统，不过感觉还是没有多说强大。所以这次改版之后也决定用多说。</p>\n<h2> </h2>\n<h3>添加文章评论</h3>\n<p>在 <code>_config.yml</code> 中找到 <code>disqus</code> 配置</p>\n<pre><code class=\"language-yml\"># Disqus Comments\ndisqus_short_name:\ndisqus_show_comment_count: false\n</code></pre>\n<!--more-->\n<p>在下面添加</p>\n<pre><code class=\"language-yml\">duoshuo_comments: true\nduoshuo_short_name: xxxxxx  # 多说帐号\n</code></pre>\n<p>在 <code>source/_layouts/post.html</code> 中的 <code>disqus</code> 代码</p>\n<pre><code class=\"language-html\">{% if site.disqus_short_name and page.comments == true %}\n  &#x3C;section>\n    &#x3C;h1>&#x3C;i class=\"fa fa-comments\">&#x3C;/i> Comments&#x3C;/h1>\n    &#x3C;div id=\"disqus_thread\" aria-live=\"polite\">{% include post/disqus_thread.html %}&#x3C;/div>\n  &#x3C;/section>\n{% endif %}\n</code></pre>\n<p>下面添加多说的模块</p>\n<pre><code class=\"language-html\">{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}\n  &#x3C;section>\n    &#x3C;h1>&#x3C;i class=\"fa fa-comments\">&#x3C;/i> Comments&#x3C;/h1>\n    &#x3C;div id=\"comments\" aria-live=\"polite\">{% include post/duoshuo.html %}&#x3C;/div>\n  &#x3C;/section>\n{% endif %}\n</code></pre>\n<p>然后创建上面代码提及的新文件 <code>post/duoshuo.html</code> 具体路径是 <code>source/_includes/post/duoshuo.html</code></p>\n<pre><code class=\"language-html\">&#x3C;!-- 多说评论框 start -->\n&#x3C;div class=\"ds-thread\" data-thread-key=\"{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}\" data-title=\"{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}\" data-url=\"{{page.previous.url}}\">&#x3C;/div>\n&#x3C;!-- 多说评论框 end -->\n&#x3C;!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n&#x3C;script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:\"{{ site.duoshuo_short_name }}\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n&#x3C;/script>\n&#x3C;!-- 多说公共JS代码 end -->\n</code></pre>\n<h5>* 这里注意一下 <code>data-thread-key</code> 属性，如果不写，控制台会有警告信息。设置成跟 <code>data-title</code> 一样就好。</h5>\n<p>学 <code>disqus</code> 的实现方式，在文章头部也再加个评论按钮。修改 <code>_includes/article.html</code> 文件。</p>\n<pre><code class=\"language-html\">{% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}\n   | &#x3C;a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread\"\n     data-disqus-identifier=\"{% if post.meta.disqus_id %}{{ post.meta.disqus_id }}{% else %}{{ site.url }}{{ post.url }}{% endif %}\">Comments&#x3C;/a>\n{% endif %}\n</code></pre>\n<p>下方添加多说代码部分</p>\n<pre><code class=\"language-html\">{% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}\n | &#x3C;a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#comments\">评论&#x3C;/a>\n{% endif %}\n</code></pre>\n<p>基本功能大功告成</p>\n<h2> </h2>\n<h3>侧边栏现实最新评论</h3>\n<p>在 _config.yml 添加如下配置:</p>\n<pre><code class=\"language-yml\">duoshuo_asides: false       # 是否显示侧边栏\nduoshuo_asides_num: 10      # 侧边栏评论显示条目数\nduoshuo_asides_avatars: 0   # 侧边栏评论是否显示头像\nduoshuo_asides_time: 0      # 侧边栏评论是否显示时间\nduoshuo_asides_title: 0     # 侧边栏评论是否显示标题\nduoshuo_asides_admin: 0     # 侧边栏评论是否显示作者评论\nduoshuo_asides_length: 18   # 侧边栏评论截取的长度\n</code></pre>\n<p>还需要在侧边栏插件文件夹创建评论代码</p>\n<pre><code class=\"language-html\">{% if site.duoshuo_asides %}\n&#x3C;section>\n    &#x3C;h1>&#x3C;i class=\"fa fa-comments\">&#x3C;/i> Recent Comments&#x3C;/h1>\n    &#x3C;ul class=\"ds-recent-comments\" data-num-items=\"{{ site.duoshuo_asides_num }}\" data-show-avatars=\"{{ site.duoshuo_asides_avatars }}\" data-show-time=\"{{ site.duoshuo_asides_time }}\" data-show-title=\"{{ site.duoshuo_asides_title }}\" data-show-admin=\"{{ site.duoshuo_asides_admin }}\" data-excerpt-length=\"{{ site.duoshuo_asides_length }}\">&#x3C;/ul>\n    {% if index %}\n    &#x3C;!--多说js加载开始，一个页面只需要加载一次 -->\n    &#x3C;script type=\"text/javascript\">\n      var duoshuoQuery = {short_name:\"{{ site.duoshuo_short_name }}\"};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = 'http://static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n    &#x3C;/script>\n    &#x3C;!--多说js加载结束，一个页面只需要加载一次 -->\n    {% endif %}\n&#x3C;/section>\n{% endif %}\n</code></pre>\n<p>如果没有评价，不需要显示孤零零的变迁，可以把 <code>duoshuo_asides</code> 设置成 <code>false</code>。</p>\n<p>最后在 <code>_config.yml</code> 的侧边栏数组中添加页面</p>\n<pre><code class=\"language-yml\">default_asides: [asides/about.html, asides/recent_posts.html, asides/recent_comments.html, asides/links.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]\n</code></pre>\n<p>我选择在最新文章和链接之间显示最新评论。</p>\n<hr>","frontmatter":{"path":"/NgHhhZtj9hAW8PSWKfQB9WEH","title":"Octopress 博客添加多说评论系统","date":"2016-08-17 20:07:10 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["octopress","多说"]},"excerpt":"以前用  hexo  维护网站的时候评论系统用的是多说，虽然  octopress  自带了一个  disqus  评论系统，不过感觉还是没有多说强大。所以这次改版之后也决定用多说。   添加文章评论 在  _config.yml  中找到  disqus…"}}],"pathPrefix":"programming","first":true,"last":false,"index":1,"pageCount":8,"additionalContext":{}}}
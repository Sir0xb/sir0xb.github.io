{"pageContext":{"group":[{"node":{"id":"6529f711-9320-5845-a3b6-43d4172b8cd9","html":"<h3>类的定义：</h3>\n<pre><code class=\"language-javascript\">var Clazz = (function () {\n    var Clazz = function () { },\n        initializing = false\n        superPattern = /xyz/.test(function() { xyz; }) ? /\\b_super\\b/ : /.*/;\n\n    Clazz.create = function (properties) {\n        var _super = this.prototype;\n        initializing = true;\n        var proto = new this();\n        initializing = false;\n\n        for (var name in properties) {\n            proto[name] = typeof properties[name] == \"function\" &#x26;&#x26;\n            typeof _super[name] == \"function\" &#x26;&#x26; superPattern.test(properties[name]) ?\n                (function(name, fn) {\n                    return function() {\n                        var tmp     = this._super;\n                        this._super = _super[name];\n                        var ret     = fn.apply(this, arguments);\n                        this._super = tmp;\n                        return ret;\n                    };\n                })(name, properties[name]) : properties[name];\n        }\n\n        function _Clazz() {\n            if (!initializing &#x26;&#x26; this.init) {\n                this.init.apply(this, arguments);\n            }\n        }\n\n        _Clazz.prototype     = proto;\n        _Clazz.constructor   = Clazz;\n        _Clazz.create        = arguments.callee;\n\n        return _Clazz;\n    }\n\n    return Clazz;\n}());\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>类的使用：</h3>\n<pre><code class=\"language-javascript\">var Person = Clazz.create({\n    init: function (isDancing) {\n        this.dancing = isDancing;\n    },\n    dance: function () {\n        return this.dancing;\n    }\n});\n\nvar Child = Person.create({\n    init: function () {\n        this._super(false);\n    },\n    dance: function () {\n        return this._super();\n    },\n    swiming: function () {\n        return true;\n    }\n});\n\nvar person = new Person(true);\nvar child = new Child();\n\nconsole.log('家长能跳舞.');\nconsole.log(person.dance());\n\nconsole.log('孩子能游泳');\nconsole.log(child.swiming());\n\nconsole.log('孩子不会跳舞.');\nconsole.log(child.dance());\n\nconsole.log('家长是人类.');\nconsole.log(person instanceof Person);\n\nconsole.log('孩子也是人类.');\nconsole.log(child instanceof Child &#x26;&#x26; child instanceof Person);\n</code></pre>\n<hr>","frontmatter":{"path":"/ZFR4s3OTFvgwRvL50hiVwpY5","title":"JavaScript实现类效果","date":"2016-01-27 11:00:00 +0800","comments":true,"author":"Sir0xb","tags":["javascript"]},"excerpt":"类的定义：   类的使用："}},{"node":{"id":"38fa7528-73f5-544e-95e1-4ebad7e3a1c5","html":"<h3>js 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nconcat = require \"gulp-concat\"\nuglify = require \"gulp-uglify\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe jshint()\n    .pipe concat \"base.min.js\"\n    .pipe uglify()   # 混淆\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>js 压缩不合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nsourcemaps = require \"gulp-sourcemaps\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx.js\", \"!xxx.min.js\", \"yyy.js\", \"!yyy.min.js\"]\n    .pipe sourcemaps.init()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        mangle: no  # 不混淆\n    .pipe sourcemaps.write \"./\"\n    .pipe gulp.dest \"./\"\n</code></pre>\n<h2> </h2>\n<h3>js 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nrev = require \"gulp-rev\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxxx.js\", \"!xxx.min.js\"]\n    .pipe plumber()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        managle: no\n    .pipe rev()          # 加版本号\n    .pipe gulp.dest \"压缩文件\"\n    .pipe rev.manifest   # 这部分解决 js html 同时压缩时映射文件被覆盖问题\n        path    : path.join __dirname, \"映射文件目录/#{appName}/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>css 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nrename = require \"gulp-rename\"\ncssImport = require \"gulp-cssimport\"\ncssmin = require \"gulp-cssmin\"\n\ngulp.task \"css\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe rename\n        extname: \".min.css\"\n    .pipe cssImport()\n    .pipe cssmin\n        compatibility: \"ie7\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\nrev = require \"gulp-rev\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe rev()\n    .pipe gulp.dest \"压缩文件输出目录\"\n    .pipe rev.manifest\n        path    : path.join __dirname, \"映射文件输出目录/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件输出目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<blockquote>\n<p>基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理</p>\n</blockquote>\n<hr>","frontmatter":{"path":"/fnrdoaUSK7UChWUhYSpxHPqg","title":"Gulp常用脚本","date":"2016-01-26 14:20:38 +0800","comments":true,"author":"Sir0xb","tags":["coffee","gulp"]},"excerpt":"js 压缩合并   js 压缩不合并   js 压缩加版本号   css 压缩合并   html 压缩   html 压缩加版本号 基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理"}},{"node":{"id":"292fc140-4ae4-5c44-b959-403491b7e2de","html":"<p>听说 swiftype 很好用，就在网站里加入了这个功能，没想到的是从注册到真正能用上竟然花了差不多一个月的时间，主要原因是除了随处可见的教程中那些配置之外，还要有额外的配置，真是坑爹啊。。。</p>\n<h3>注册 swiftype 账号</h3>\n<p>到 <a href=\"http://www.swiftype.com\">http://www.swiftype.com</a> 注册账号</p>\n<h2> </h2>\n<h3>配置搜索</h3>\n<p>一路跟着提示，选择默认下一步下一步，直到完成</p>\n<!--more-->\n<h2> </h2>\n<h3>配置网站搜索</h3>\n<p>在搜索栏 input 元素上增加 <code>st-default-search-input</code> 这个类</p>\n<h2> </h2>\n<h3>注意一下两点</h3>\n<h4>1.在这个界面试着搜索下，如果搜索不出东西说明网站配置有问题，注意是网站配置有问题，不是 swiftype 配置有问题。</h4>\n<img src=\"https://i.imgur.com/7w1snfP.png\" />\n<h4>2.在 source 目录放 robots.txt 文件。</h4>\n<pre><code class=\"language-xml\">Sitemap: /sitemap.xml\n</code></pre>\n<p><strong>* sitemap 是 hexo 插件自己生成的 *</strong></p>\n<hr>","frontmatter":{"path":"/lnyT51FSfviU8se9chgTxZ5L","title":"用 swiftype 配置静态搜索","date":"2015-06-08 10:03:45 +0800","comments":true,"author":null,"tags":["hexo","swiftype"]},"excerpt":"听说 swiftype 很好用，就在网站里加入了这个功能，没想到的是从注册到真正能用上竟然花了差不多一个月的时间，主要原因是除了随处可见的教程中那些配置之外，还要有额外的配置，真是坑爹啊。。。 注册 swiftype 账号 到  http://www.swiftype.com…"}},{"node":{"id":"ef24699e-cfce-51f6-b1aa-9877b66bf0e8","html":"<p>独立域名指向 Github 服务器 IP ，并在站点增加 CNAME 文件之后，收到了无数个 GitHub 提示邮件。\n<img src=\"https://i.imgur.com/TKSbJmc.jpg\" /></p>\n<!--more-->\n<p>只要通过 GitHub 帮助中的内容，做一下 IP 调整，邮件就不会再来了。</p>\n<h3>打开控制台输入以下命令(pages 地址自行修改)</h3>\n<pre><code class=\"language-ruby\">dig sir0xb.github.io +nostats +nocomments +nocmd\n</code></pre>\n<p>得到如下结果：</p>\n<pre><code class=\"language-ruby\">Sir0xb@mac:/ > dig sir0xb.github.io +nostats +nocomments +nocmd\n;; global options: +cmd\n;sir0xb.github.io.      IN  A\nsir0xb.github.io.   2237    IN  CNAME   github.map.fastly.net.\ngithub.map.fastly.net.  600 IN  A   103.245.222.133\nfastly.net.     35474   IN  NS  ns3.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns2.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns4.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns1.p04.dynect.net.\nns1.p04.dynect.net. 37980   IN  A   208.78.70.4\nns1.p04.dynect.net. 179 IN  AAAA    2001:500:90:1::4\nns2.p04.dynect.net. 36368   IN  A   204.13.250.4\nns3.p04.dynect.net. 62102   IN  A   208.78.71.4\nns4.p04.dynect.net. 35616   IN  A   204.13.251.4\n</code></pre>\n<h2> </h2>\n<h3>设置 DNS 配置</h3>\n<img src=\"https://i.imgur.com/Bh6Yehc.jpg\" />\n<p>到此，不会再收到 Github 提示邮件了</p>\n<hr>","frontmatter":{"path":"/jSFkUdGpeX6JZtYQ7fTjMbQC","title":"解决 Github 邮件中提示的问题","date":"2015-05-27 23:14:24 +0800","comments":true,"author":"Sir0xb","tags":["github","email","warning"]},"excerpt":"独立域名指向 Github 服务器 IP ，并在站点增加 CNAME 文件之后，收到了无数个 GitHub 提示邮件。\n 只要通过 GitHub 帮助中的内容，做一下 IP 调整，邮件就不会再来了。 打开控制台输入以下命令(pages…"}},{"node":{"id":"daefeba7-5917-57a9-9970-49327884874c","html":"<p>Mac 下用 Chrome 有一点很不爽，就是开启隐私模式。\n难道就没有像 Windows 下那样修改快捷方式的方法吗？</p>\n<p>Mac 提供了好玩的工具 —— 脚本编辑器，利用它我们可以实现想要实现的效果。</p>\n<h4>打开脚本编辑器输入以下代码</h4>\n<pre><code class=\"language-actionscript\">do shell script \"open -a /Applications/Google\\\\ Chrome.app --args --incognito\"\n\ntell application \"Google Chrome\"\n    close windows\n    make new window with properties {mode:\"incognito\"}\n    activate\nend tell\n</code></pre>\n<h4>保存的时候 <code>文件格式</code> 选择应用程序，保存之后的 app 文件可以直接放入 <code>Applications</code></h4>\n<hr>","frontmatter":{"path":"/EPggA1MMSyY1MBZEgGTrL2F8","title":"Mac 解决 Chrome 隐私登录问题","date":"2015-05-25 19:09:45 +0800","comments":true,"author":"Sir0xb","tags":["mac","applescript"]},"excerpt":"Mac 下用 Chrome 有一点很不爽，就是开启隐私模式。\n难道就没有像 Windows 下那样修改快捷方式的方法吗？ Mac…"}},{"node":{"id":"6ee33a38-a819-5dc3-bd28-74e6207f8295","html":"<h3>brew (Homebrew)</h3>\n<h4>brew 安装</h4>\n<pre><code class=\"language-ruby\">$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<h4>brew 使用</h4>\n<p>查找软件包</p>\n<pre><code class=\"language-ruby\">$ brew search &#x3C;package>\n</code></pre>\n<!--more-->\n<p>安装软件包</p>\n<pre><code class=\"language-ruby\">$ brew install &#x3C;package>\n</code></pre>\n<p>查看已经安装的软件包</p>\n<pre><code class=\"language-ruby\">$ brew list\n</code></pre>\n<p>删除软件包</p>\n<pre><code class=\"language-ruby\">$ brew remove &#x3C;package>\n</code></pre>\n<p>查看软件包信息</p>\n<pre><code class=\"language-ruby\">$ brew info &#x3C;package>\n</code></pre>\n<p>查看软件包依赖关系</p>\n<pre><code class=\"language-ruby\">$ brew deps &#x3C;package>\n</code></pre>\n<p>更新 brew</p>\n<pre><code class=\"language-ruby\">$ brew update\n</code></pre>\n<p>列出可更新软件包</p>\n<pre><code class=\"language-ruby\">$ brew outdated\n</code></pre>\n<p>更新可更新软件包</p>\n<pre><code class=\"language-ruby\">$ brew upgrade\n</code></pre>\n<p>更新特定软件包</p>\n<pre><code class=\"language-ruby\">$ brew upgrade &#x3C;package>\n</code></pre>\n<h2> </h2>\n<h3>npm (Node Package Manager)</h3>\n<h4>npm 安装</h4>\n<p>访问 <a target=\"_blank\" href=\"https://nodejs.org/\">NodeJS 官网</a> 下载安装包  or  <code>brew install node</code></p>\n<h4>npm 使用</h4>\n<p>查找插件</p>\n<pre><code class=\"language-ruby\">$ npm search &#x3C;package>\n</code></pre>\n<p>安装插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm install &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm install -g &#x3C;package>\n</code></pre>\n<p>卸载插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm uninstall &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm uninstall -g &#x3C;package>\n</code></pre>\n<p>查看插件信息</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm info &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm info -g &#x3C;package>\n</code></pre>\n<p>查看已安装插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm list\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm -g list\n</code></pre>\n<p>*<strong>* 如果是 Linux 可以 <code>$ npm list -g | grep ^[└,├]</code> 进行过滤 **</strong></p>\n<p>发布插件</p>\n<pre><code class=\"language-ruby\">$ npm publish\n</code></pre>\n<h2> </h2>\n<h3>bower</h3>\n<h4>bower 安装</h4>\n<pre><code class=\"language-ruby\">$ npm install -g bower\n</code></pre>\n<h4>bower 使用</h4>\n<p>默认安装目录为 <code>bower_components/</code>\n可通过在目录中配置 <code>.bowerrc</code> 文件制定路径，例如：</p>\n<pre><code class=\"language-xml\">{\n  \"directory\": \"lib\"\n}\n</code></pre>\n<p>安装库</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package>\n</code></pre>\n<p>通过配置文件安装库</p>\n<pre><code class=\"language-xml\">//配置文件样例\n{\n  \"name\": \"boliball\",\n  \"version\": \"0.0.2\",\n  \"homepage\": \"https://github.com/Sir0xb/boliball\",\n  \"authors\": [\n     \"Sir0xb &#x3C;Sir0xb@live.com>\"\n  ],\n  \"dependencies\": {\n     \"knockoutjs\": \"*\",\n     \"knockout.mapping\": \"~2.0.1\"\n  },\n  \"keywords\": [\n     \"Sir0xb\"\n  ],\n  \"license\": \"MIT\"\n}\n</code></pre>\n<p>>> 安装 bower.json 中配置的库</p>\n<pre><code class=\"language-ruby\">$ bower install\n</code></pre>\n<p>>> 安装并添加到 bower.json 配置中</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package> --save\n</code></pre>\n<p>>> 安装指定版本的库并添加到 bower.json 配置中</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package>#&#x3C;version> --save\n</code></pre>\n<p>更新库</p>\n<p>>> 更新全部</p>\n<pre><code class=\"language-ruby\">$ bower update\n</code></pre>\n<p>>> 更新指定库</p>\n<pre><code class=\"language-ruby\">$ bower update &#x3C;package>\n</code></pre>\n<p>卸载库</p>\n<pre><code class=\"language-ruby\">$ bower uninstall &#x3C;package>` or `$ bower uninstall &#x3C;package1> &#x3C;package2> &#x3C;package3>\n</code></pre>\n<h2> </h2>\n<h3>pip</h3>\n<h4>pip 安装</h4>\n<pre><code class=\"language-ruby\">$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py\n\n$ python get-pip.py\n</code></pre>\n<h4>pip 使用</h4>\n<p>更新 pip</p>\n<pre><code class=\"language-ruby\">$ pip install -U pip\n</code></pre>\n<p>安装软件包</p>\n<pre><code class=\"language-ruby\">$ pip install &#x3C;package>                 # 安装最新版\n$ pip install &#x3C;package>==&#x3C;version>      # 安装指定版\n$ pip install '&#x3C;package>>=version>'     # 安装大于特定版\n</code></pre>\n<p>用配置文件安装</p>\n<pre><code class=\"language-ruby\">$ pip freeze > package.txt      # 根据软件包安装情况生成配置文件\n$ pip install -r package.txt    # 安装配置文件中的软件包\n</code></pre>\n<p>查看软件包信息</p>\n<pre><code class=\"language-ruby\">$ pip show &#x3C;package>\n</code></pre>\n<p>查找软件包</p>\n<pre><code class=\"language-ruby\">$ pip search &#x3C;package>\n</code></pre>\n<hr>","frontmatter":{"path":"/WoVielvZwB87niNXHmn6eE69","title":"开发过程中常会用到的命令行工具","date":"2015-05-21 19:08:10 +0800","comments":true,"author":"Sir0xb","tags":["brew","npm","bower","pip"]},"excerpt":"brew (Homebrew) brew 安装 brew 使用 查找软件包 安装软件包 查看已经安装的软件包 删除软件包 查看软件包信息 查看软件包依赖关系 更新 brew 列出可更新软件包 更新可更新软件包 更新特定软件包   npm (Node Package Manager…"}},{"node":{"id":"595dd515-eeb1-554f-a563-15eb2c64defa","html":"<h3>准备数据模型</h3>\n<pre><code class=\"language-javascript\">var viewModel= {\n    firstName: ko.observable(\"Planet\"),\n    lastName : ko.observable(\"Earth\"),\n    tempId   : ko.observable(\"ko-static\")\n};\n\nko.applyBindings(viewModel);\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>准备锚点和模板</h3>\n<pre><code class=\"language-html\">//代码锚点\n&#x3C;div data-bind=\"template: { name: tempId() }\">&#x3C;/div>\n\n//展示用模板\n&#x3C;script type=\"text/html\" id=\"ko-static\">\n    &#x3C;table>\n        &#x3C;tr>\n            &#x3C;td>firstName:&#x3C;/td>\n            &#x3C;td data-bind=\"text: firstName\">&#x3C;/td>\n        &#x3C;/tr>\n        &#x3C;tr>\n            &#x3C;td>lastName:&#x3C;/td>\n            &#x3C;td data-bind=\"text: lastName\">&#x3C;/td>\n        &#x3C;/tr>\n    &#x3C;/table>\n    &#x3C;a href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-edit'); }\">Edit&#x3C;/a>\n&#x3C;/script>\n\n//编辑用模板\n&#x3C;script type=\"text/html\" id=\"ko-edit\">\n    &#x3C;table>\n        &#x3C;tr>\n            &#x3C;td>firstName:&#x3C;/td>\n            &#x3C;td>&#x3C;input data-bind=\"value: firstName\" />&#x3C;/td>\n        &#x3C;/tr>\n        &#x3C;tr>\n            &#x3C;td>lastName:&#x3C;/td>\n            &#x3C;td>&#x3C;input data-bind=\"value: lastName\" />&#x3C;/td>\n        &#x3C;/tr>\n    &#x3C;/table>\n    &#x3C;a href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-static'); }\">Done&#x3C;/a>\n&#x3C;/script>\n</code></pre>\n<h2> </h2>\n<h3>最终效果如下:</h3>\n<div data-bind=\"template: { name: tempId() }\"></div>\n<script type=\"text/html\" id=\"ko-static\">\n    <table class=\"my_table\">\n        <tr>\n            <td>firstName:</td>\n            <td data-bind=\"text: firstName\"></td>\n        </tr>\n        <tr>\n            <td>lastName:</td>\n            <td data-bind=\"text: lastName\"></td>\n        </tr>\n    </table>\n    <div class=\"article-categories\">\n      <a class=\"article-category-link\" href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-edit'); }\">Edit</a>\n    </div>\n</script>\n<script type=\"text/html\" id=\"ko-edit\">\n    <table class=\"my_table\">\n        <tr>\n            <td>firstName:</td>\n            <td><input data-bind=\"value: firstName\" /></td>\n        </tr>\n        <tr>\n            <td>lastName:</td>\n            <td><input data-bind=\"value: lastName\" /></td>\n        </tr>\n    </table>\n    <div class=\"article-categories\">\n        <a class=\"article-category-link\" href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-static'); }\">Done</a>\n    </div>\n</script>\n<script src=\"https://cdn.bootcss.com/knockout/3.3.0/knockout-min.js\"></script>\n<script type=\"text/javascript\">\n    var viewModel= {\n        firstName: ko.observable(\"Planet\"),\n        lastName : ko.observable(\"Earth\"),\n        tempId   : ko.observable(\"ko-static\")\n    };\n\n    ko.applyBindings(viewModel);\n</script>\n<br>\n<hr>","frontmatter":{"path":"/MhZFIf4lNegdjhEd9KRzLwQb","title":"ko - template 实现两套界面切换","date":"2015-05-19 15:07:09 +0800","comments":true,"author":"Sir0xb","tags":["knockout","template"]},"excerpt":"准备数据模型   准备锚点和模板   最终效果如下:"}},{"node":{"id":"51a90c91-9ba0-504c-8e88-b8e3756005c2","html":"<p>朋友找我帮忙，用喜欢的音乐设置苹果手机铃声。\n设置过程和注意点如下：</p>\n<h3>第一步：添加音乐文件</h3>\n<h4>1. 打开 itunes 进入音乐列表界面。</h4>\n<img src=\"https://i.imgur.com/HYMy9Vf.jpg\" width=\"550\" />\n<!--more-->\n<h4>2. 将喜欢的音乐直接拖入其中。</h4>\n<img src=\"https://i.imgur.com/QKEiHHR.jpg\" width=\"550\" />\n<h2> </h2>\n<h3>第二步：生成铃声文件</h3>\n<h4>1. 右键音乐文件选择 <code>显示简介</code>，在窗口中选择 <code>选项</code>。</h4>\n<img src=\"https://i.imgur.com/hy73Dpn.jpg\" width=\"550\" />\n<h4>2. 打勾 <code>开始</code> 和 <code>结束</code>，并设置对应时间。</h4>\n<p><strong><em>注意：时间不要超过 40秒</em></strong></p>\n<h4>3. 选中音乐文件，右键选择 <code>创建 AAC 版本</code>。这时会多出来同名文件。</h4>\n<img src=\"https://i.imgur.com/6QjZfVd.jpg\" width=\"550\" />\n<h4>4. 右键生成的文件，选择 <code>在 Finder 中显示</code>。</h4>\n<p><strong><em>注意：Windows 中选择对应的 <code>资源管理器中显示</code> 即可</em></strong></p>\n<img src=\"https://i.imgur.com/k0utq4e.jpg\" width=\"550\" />\n<h4>5. 复制 <code>m4a</code> 文件到任意一个文件夹中，并更改成 <code>m4r</code> 文件。</h4>\n<p><strong><em>注意：文件大小不要超过 3M 切记切记。超过了，重复第二步-2</em></strong></p>\n<img src=\"https://i.imgur.com/5M4iFGE.jpg\" width=\"550\" />\n<h4>6. 删除刚才生成的 <code>m4a</code> 文件。</h4>\n<p><strong><em>注意：不删除，要么无法添加铃声文件，要么无法同步到手机</em></strong></p>\n<h2> </h2>\n<h3>第三步：添加并同步</h3>\n<h4>1. 选择 itunes 铃声界面</h4>\n<h4>2. 将刚才的 <code>m4r</code> 文件拖入</h4>\n<h4>3. 手机连接电脑</h4>\n<h4>4. 在设备的 <code>铃声</code> 中，勾选刚才的铃声，点击 <code>应用</code> 同步</h4>\n<img src=\"https://i.imgur.com/hr5iAEF.jpg\" width=\"550\" />\n<h2> </h2>\n<h3>最后：查看效果</h3>\n<h4>1. 打开手机 <code>设置</code></h4>\n<h4>2. 进入 <code>声音</code></h4>\n<h4>3. 进入 <code>电话铃声</code></h4>\n<h4>4. 看到自制的手机铃声 <code>Moon River</code></h4>\n<img src=\"https://i.imgur.com/RsGJYrP.jpg\" width=\"550\" />\n<hr>","frontmatter":{"path":"/DCMv8u8NL5pyRGjsJbZyoO3D","title":"自制 iPhone 铃声","date":"2015-05-18 18:55:15 +0800","comments":true,"author":"Sir0xb","tags":["iphone","铃声"]},"excerpt":"朋友找我帮忙，用喜欢的音乐设置苹果手机铃声。\n设置过程和注意点如下： 第一步：添加音乐文件 1. 打开 itunes 进入音乐列表界面。 2. 将喜欢的音乐直接拖入其中。   第二步：生成铃声文件 1. 右键音乐文件选择  显示简介 ，在窗口中选择  选项 。…"}},{"node":{"id":"5717b27b-1ead-5cc6-b2b7-17ddadadeba8","html":"<p>Mac 系统最常用功能之一就是 Dock。\n今天分享一下有关 Dock 的使用技巧。</p>\n<h3>问题一：</h3>\n<p>描述：使用双屏的时候 Dock 经常莫名其妙的两个屏幕间来回跑。</p>\n<p>原因：Mac 系统有个用鼠标快速切换 Dock 位置的功能。使用双屏时，鼠标指针在没有 Dock 的屏幕下方往下拉，另一个屏幕的 Dock 会自动蹦过来。描述的问题就是在不知道这个功能时，无意间触发了这个功能产生的。</p>\n<!--more-->\n<h2> </h2>\n<h3>问题二：</h3>\n<p>描述：每次调整大小都要进入 <code>系统偏好设置</code>，就没有快捷方式吗？</p>\n<p>方法：Dock 分两个区域，界限就是 <code>|</code>，将鼠标移至分界线处鼠标会变成如下的样子</p>\n<img src=\"https://i.imgur.com/uj9Jj8O.jpg\" width=\"200\" />\n<p>这是鼠标上移就是放大 Dock，下移就是缩小 Dock</p>\n<h2> </h2>\n<h3>问题三：</h3>\n<p>描述：刚买的 Mac 删除文件特别慢</p>\n<p>方法：打开 <code>Finder</code>，再打开 <code>偏好设置</code> 快捷键是 <code>command + ,</code>\n有个 <code>安全清倒废纸篓</code>，把选中去掉，是不是删除变快了？</p>\n<blockquote>\n<p>追加问题：那，如果想像 Windows 时那样想安全删除怎么弄呢？安装 xxx 软件或是再调回刚才的选项吗？</p>\n</blockquote>\n<p>方法：在 Dock 栏右键 <code>废纸篓</code>，在出现功能菜单出现之后试着按一下 <code>command</code> 键，是不是看到变化了？</p>\n<hr>","frontmatter":{"path":"/jD16BVMGibOmsRrZs2hrlklu","title":"Mac Dock使用技巧","date":"2015-05-18 10:25:05 +0800","comments":true,"author":"Sir0xb","tags":["mac","dock"]},"excerpt":"Mac 系统最常用功能之一就是 Dock。\n今天分享一下有关 Dock 的使用技巧。 问题一： 描述：使用双屏的时候 Dock 经常莫名其妙的两个屏幕间来回跑。 原因：Mac 系统有个用鼠标快速切换 Dock 位置的功能。使用双屏时，鼠标指针在没有 Dock…"}},{"node":{"id":"edb942a0-1b83-5fea-9f0e-e8afa2dc2c24","html":"<p>老早就想好好整理整理关于 Mac 的文章，一直没有动手。正好有了自己的网站，也算是一个契机吧，分享一下自己学习到的好功能。用 Mac 过程中，多次验证了一个真理 <code>当你觉得 Mac 的某个功能不好用的时候，其实人家早就解决了这个问题，只是你不知道而已</code></p>\n<h3>遇到的问题：</h3>\n<p>之前 Chrome 切换 Tab 的快捷方式是 <code>command + shift + 方向键</code> 。某一次突然发现键位不好使了，变成了 <code>command + option + 方向键</code> 。</p>\n<h2> </h2>\n<p>... ... 折腾之后 ... ...</p>\n<h2> </h2>\n<h3>解决方法：</h3>\n<!--more-->\n<h4>先看好要设置的菜单名称</h4>\n<img src=\"https://i.imgur.com/RA7eC0A.jpg\" width=\"300\" />\n<p><strong>* 例如：任务管理器 *</strong></p>\n<h4>打开系统偏好设置 > 键盘 > 快捷键</h4>\n<p>选择右侧 <code>应用程序快捷键</code> 之后，点击 <code>+</code></p>\n<p><strong>* 应用程序 ：选择 Chrome *</strong>\n<strong>* 菜单标题 ：任务管理器 *</strong>\n<strong>* 键盘快捷键：｀shift + command + R｀ *</strong></p>\n<img src=\"https://i.imgur.com/aa6eSBx.jpg\" width=\"450\" />\n<h4>再看 Chrome 菜单的变化</h4>\n<img src=\"https://i.imgur.com/j3v7I3e.jpg\" width=\"300\" />\n<h2> </h2>\n<h3>延伸：</h3>\n<ul>\n<li>收藏夹里的网页也可以设置快捷方式</li>\n<li>只要是菜单栏里的，系统菜单也可以设置\n我把系统偏好设置成了 <code>shift + command + ,</code> ---> 需要注意，这个设置的时候，字符串要填写 <code>系统偏好设置...</code></li>\n<li>其他应用程序也可以用同样方式设置</li>\n</ul>\n<hr>","frontmatter":{"path":"/4tvlpuhnatKux2ob5ehCNKo5","title":"Mac 设置应用快捷键","date":"2015-05-16 00:52:16 +0800","comments":true,"author":"Sir0xb","tags":["mac","smartKey"]},"excerpt":"老早就想好好整理整理关于 Mac 的文章，一直没有动手。正好有了自己的网站，也算是一个契机吧，分享一下自己学习到的好功能。用 Mac 过程中，多次验证了一个真理  当你觉得 Mac…"}}],"pathPrefix":"blog","first":false,"last":false,"index":7,"pageCount":8,"additionalContext":{}}}
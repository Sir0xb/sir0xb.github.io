{"pageContext":{"group":[{"node":{"id":"94a2599b-d042-56b4-afb5-970ca7d0c529","html":"<p>github 很慷慨的为程序员们提供了静态站功能，还给开启了 https 访问。比如我的站点 [<a target=\"_blank\" href=\"https://sir0xb.github.io\">https://sir0xb.github.io</a>]。虽然也很不错，不过对于想要追求完美的人来说，总感觉少了点什么(独立域名呗)。不过申请了独立域名之后，github 提供的 https 访问方式没发继续了。</p>\n<p>我的域名是阿里云(原来叫万网)购买的，就以阿里为例讲下如何解决 https 访问问题。</p>\n<h4>1.在 [<a target=\"_blank\" href=\"https://www.cloudflare.com\">https://www.cloudflare.com</a>] 注册帐号</h4>\n<p>具体注册过程不讲了，将自己的域名验证完之后，可以在 DNS 标签得到如下两个解析地址。</p>\n<!--more-->\n<img src=\"https://i.imgur.com/p7uRqpL.png\" />\n<h4>2.修改阿里云 DNS 记录</h4>\n<p>用上一步得到的两个地址，修改阿里云 DNS 解析记录。</p>\n<img src=\"https://i.imgur.com/fOhAymC.png\" />\n<p>成功之后回到 cloudflare 的 Overview 标签能看到状态变绿了。</p>\n<img src=\"https://i.imgur.com/so8qD0E.png\" />\n<h4>3.添加域名解析记录</h4>\n<p>具体内容跟在阿里云添加的记录是一样的，一个 www 记录，一个 @ 记录。</p>\n<img src=\"https://i.imgur.com/ArPnY7M.png\" />\n<p>具体 ip 地址获得方式，可以参考 [<a target=\"_blank\" href=\"\">解决 Github 邮件中提示的问题</a>]。</p>\n<h4>4.设置 ssl 解析方式</h4>\n<p>可以根据自己的喜好选一个，我自己弄了个动态方式。</p>\n<img src=\"https://i.imgur.com/MSvbMH3.png\" />\n<h4>5.添加地址过滤</h4>\n<p>地址过滤其实是过滤 http 地址，将其转跳到 https 地址。</p>\n<img src=\"https://i.imgur.com/bcOalQ9.png\" />\n<h4>^_^ 大功告成</h4>\n<hr>","frontmatter":{"path":"/yO73AClUeYfeLtkW2HPEMezG","title":"独立域名 pages 配置 https 访问","date":"2016-08-16 21:10:55 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["pages","https","cloudflare"]},"excerpt":"github 很慷慨的为程序员们提供了静态站功能，还给开启了 https 访问。比如我的站点  https://sir0xb.github.io 。虽然也很不错，不过对于想要追求完美的人来说，总感觉少了点什么(独立域名呗)。不过申请了独立域名之后，github 提供的 https…"}},{"node":{"id":"42c7389b-2212-554c-b346-71f4f5b5746b","html":"<p>用 Node.js 的 Stream 概念，gulp 实现了一套自己的 pipe，再包裹上 Promise 机制，让每个功能在一个接一个的管道中流过，宏观上实现我们需要它完成的 Task。Task 很好用，于是用了很多，结果 gulpfile 变得很长，每次修改就要费劲找好长时间，径管理也比较麻烦，很不好维护。是时候彻底重构一下了。</p>\n<h3>用 es6 替代 coffee</h3>\n<p>脚本原来是用 coffee 维护的，既能减少代码长度，又能避免未返回 gulp 对象所引起的断流问题。不过毕竟 coffee 已经不维护了，也没有自带的模块开发功能，所以这次决定改版成 es6 方式。</p>\n<!--more-->\n<p>先引入 <code>babel-core</code> 和 <code>babel-preset-es2015</code> 这两个包</p>\n<p>配置 package.json</p>\n<pre><code class=\"language-json\">...\n\"babel\": {\n    \"presets\": [\n        \"es2015\"\n    ]\n}\n...\n</code></pre>\n<p>es6 用的脚本名称不再是 <code>gulpfile.js</code>，需要改成 <code>gulpfile.babel.js</code></p>\n<p>es6 环境搭建完成。</p>\n<h2> </h2>\n<h3>目录结构优化</h3>\n<img src=\"https://i.imgur.com/acdX7Uc.jpg\" />\n<p><code>fescripts</code> 文件夹作为脚本主目录，只放一些配置文件及任务文件夹。</p>\n<p><code>tasks</code> 文件夹存放需要根据环境调用的任务。像 <code>default.task.js</code> 平时开发时调用，<code>build.task.js</code> 在服务器发布环境中运行。</p>\n<p><code>cleaner</code>、<code>compile</code>、<code>debug</code> 等文件夹存放具体小功能(就是原来 <code>gulpfile.js</code> 里的 task)。</p>\n<h2> </h2>\n<h3>配置文件说明 <code>gulp.config.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport Q from 'q';\n\nmodule.exports = function ({ isDev = false, stage = \"test\" } = {}) {\n    let config = {\n        isDev: isDev,\n        system_list: (() => {\n            if (isDev) {\n                return [\n                    \"alphago/livecast/livecast-web/livecast-crm-webapp/src/main/webapp\",\n                    \"alphago/livecast/livecast-web/livecast-student-webapp/src/main/webapp\",\n                    \"alphago/livecast/livecast-web/livecast-teacher-webapp/src/main/webapp\"\n                ];\n            } else {\n                return [\n                    `./build-repo/build-${stage}/livecast-crm-webapp/webroot`,\n                    `./build-repo/build-${stage}/livecast-student-webapp/webroot`,\n                    `./build-repo/build-${stage}/livecast-teacher-webapp/webroot`\n                ];\n            }\n        })(),\n        great_promise: function(gulpJob, prams = true) {\n            let deferred = Q.defer();\n            let promiseArray = [];\n\n            this.system_list.forEach((base) => {\n                let def = Q.defer();\n\n                gulpJob(base, def);\n\n                promiseArray.push(def.promise);\n            });\n\n            Q.all(promiseArray).then(function () {\n                deferred.resolve(prams);\n            });\n\n            return deferred.promise;\n        },\n        colorful: function (word, $) {\n            let message = '';\n            Array.from(word, function (x, i) {\n                message += $.chalk[['red', 'yellow', 'green', 'blue', 'magenta', 'cyan', 'gray'][i%7]](x);\n            });\n            console.info(`[${ $.chalk.gray($.dateformat(new Date(), 'H:MM:ss')) }] >>> ${ message } &#x3C;&#x3C;&#x3C;`);\n        },\n        jobStart: function ($, time, taskName, base = null) {\n            console.info(`[${ $.chalk.gray($.dateformat(time, 'H:MM:ss')) }] ${ $.chalk.red('Starting') } '${ $.chalk.green(taskName) }' ... ${ base != null ? ' ==> ' + $.chalk.yellow(base) : '' }`);\n        },\n        jobEnd: function ($, time, taskName, defTime, base = null) {\n            console.info(`[${ $.chalk.gray($.dateformat(time, 'H:MM:ss')) }] ${ $.chalk.blue('Finished') } '${ $.chalk.green(taskName) }' in ${ $.chalk.magenta(defTime + ' ms') } ${ base != null ? ' ==> ' + $.chalk.yellow(base) : '' }`);\n        }\n    };\n\n    return config;\n};\n</code></pre>\n<h4>参数说明</h4>\n<p>isDev 开发与发布环境辨别的参数，默认值给了false，也就是开发环境。</p>\n<p>stage 发布环境状态的不同环境区分，例如: test、staging、release等</p>\n<h4>内部函数说明</h4>\n<p>system_list: 是立即执行函数，根据环境返回不同目录，最终是个数组。</p>\n<p>great_promise: 解决同一任务便利不同系统目录，并并发直行用的。</p>\n<p>jobStart &#x26; jobEnd：除了服务器脚本，其他所有的脚本都直接用 promise 实现，所以任务信息需要自己打出。</p>\n<h2> </h2>\n<h3>入口脚本配置 <code>gulpfile.babel.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport gulp         from 'gulp';\nimport $            from 'gulp-load-plugins';\nimport config       from './fescripts/gulp.config.js';\nimport Clean        from './fescripts/tasks/clean.task.js';\nimport Build        from './fescripts/tasks/build.task.js';\nimport Default      from './fescripts/tasks/default.task.js';\n\ngulp.task(\"clean\", function () {\n    return Clean(gulp, config(), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }), gulp.env.taskName || 'all');\n});\n\ngulp.task(\"build\", function () {\n    return Build(gulp, config({\n        stage: process.argv.length >= 5 &#x26;&#x26; process.argv[4] || 'test'\n    }), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }));\n});\n\ngulp.task(\"watch\", ['default'], function () {\n    return gulp.watch(['alphago/livecast/livecast-web/**/*.scss'], ['default']);\n});\n\ngulp.task(\"default\", function () {\n    return Default(gulp, config({\n        isDev: true\n    }), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }));\n});\n</code></pre>\n<p>这里的 $ 不是 jQuery 的缩写，是 gulp 的一个插件 <code>gulp-load-plugins</code>。</p>\n<p>这插件会默认把 <code>package.json</code> 下 <code>gulp-</code> &#x26; <code>gulp.*</code> 开头的插件全部加载到环境中。</p>\n<p>如果需要，可以根据自己的需要修改 <code>pattern</code> 配置，加载更多其他插件。</p>\n<h2> </h2>\n<h3>编译脚本 <code>build.task.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport clean    from './clean.task.js';\nimport css      from './compile/css.compile.js';\nimport tools    from './compile/tools.compile.js'\nimport js       from './compile/js.compile.js';\nimport html     from './compile/html.compile.js';\nimport formal   from './debug/formal.mode.js';\n\nmodule.exports = function (gulp, config, $, param = true) {\n    return $.q.fcall(() => true).then(function () {\n        return clean(gulp, config, $);\n    }).then(function () {\n        return css(gulp, config, $);\n    }).then(function () {\n        return tools(gulp, config, $);\n    }).then(function () {\n        return js(gulp, config, $);\n    }).then(function () {\n        return html(gulp, config, $);\n    }).then(function () {\n        return config.isDev ? formal(gulp, config, $) : true;\n    }).then(function () {\n        return param;\n    });\n};\n</code></pre>\n<p>这里用到了 Node.js 的 q 模块</p>\n<h2> </h2>\n<h3>小任务脚本 <code>css.compile.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nmodule.exports = function (gulp, config, $, param = true) {\n    return $.q.fcall(() => true).then(function () {\n        return config.great_promise(function (base, def) {\n            let startTime = new Date();\n            config.jobStart($, startTime, 'Make css version', base);\n\n            gulp.src([\n                `${base}/public/css/*.css`,\n                `!${base}/public/css/*-*.css`\n            ])\n            .pipe($.plumber())\n            .pipe($.sourcemaps.write('maps', {\n                includeContent: false\n            }))\n            .pipe($.rev())\n            .pipe(gulp.dest(`${base}/public/css`))\n            .pipe($.rev.manifest())\n            .pipe(gulp.dest(`${base}/public/css`))\n            .on('end', function () {\n                let endTime = new Date();\n                config.jobEnd($, endTime, 'Make css version', endTime.getTime() - startTime.getTime(), base);\n\n                def.resolve();\n            });\n        });\n    }).then(function () {\n        return config.great_promise(function (base, def) {\n            let startTime = new Date();\n            config.jobStart($, startTime, 'Change links', base);\n\n            gulp.src([\n                `${base}/public/css/rev-manifest.json`,\n                `${base}/WEB-INF/livecast/layout/*links.ftl`\n            ])\n            .pipe($.plumber())\n            .pipe($.if(/\\.ftl$/, $.replace(/main(\\S*).css/g, 'main.css')))\n            .pipe($.revCollector())\n            .pipe(gulp.dest(`${base}/WEB-INF/livecast/layout/`))\n            .on('end', function () {\n                let endTime = new Date();\n                config.jobEnd($, endTime, 'Change links', endTime.getTime() - startTime.getTime(), base);\n\n                def.resolve();\n            });\n        });\n    }).then(function () {\n        return param;\n    });\n};\n</code></pre>\n<h2> </h2>\n<h3>运行后效果</h3>\n<img src=\"https://i.imgur.com/l6Jgsyi.jpg\" />\n<p>可以看到 <code>Recover links</code> 任务开始的顺序是 crm -> student -> teacher，最后完成顺序是 crm -> teacher -> student。</p>\n<p>每个具体任务间是串行，三个项目目录间同一个任务是并行的。</p>\n<hr>","frontmatter":{"path":"/HZuzV2Mry3o0cjvWK2JEBiBX","title":"重构你的 gulpfile","date":"2016-08-12 16:18:55 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["gulp","es6"]},"excerpt":"用 Node.js 的 Stream 概念，gulp 实现了一套自己的 pipe，再包裹上 Promise 机制，让每个功能在一个接一个的管道中流过，宏观上实现我们需要它完成的 Task。Task 很好用，于是用了很多，结果 gulpfile…"}},{"node":{"id":"d883ac12-5a98-51fd-b496-0ae482800847","html":"<blockquote>\n<p>为了演示流控制，简单实现了注入插件 gulp-aop</p>\n</blockquote>\n<h3>先看下 gulp-aop 注入插件的用法</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nconcat = require \"gulp-concat\"\naop = require \"gulp-aop\"\n\ngulp.task \"default\", ->\n    gulp.src [\"test/a.js\", \"test/b.js\"]\n    .pipe concat \"t.min.js\"\n    .pipe aop\n        header: -> console.log 'Inject to the head'\n        footer: -> console.log 'Inject to the end'\n    .pipe gulp.dest \"./test\"\n</code></pre>\n<!--more-->\n<p>了解 gulp 流控制之前先了解下 nodeJS 的流</p>\n<h2> </h2>\n<h3>nodeJS 四种流</h3>\n<p>nodeJS里有四种类型的流：Readable，Writable，Duplex，Transform</p>\n<p>Readable: 可读流</p>\n<p>Writable: 可写流</p>\n<p>Duplex: 双工流</p>\n<p>Transform: 转换流</p>\n<p>跟 Gulp 相关的主要是转换流</p>\n<blockquote>\n<p>gulp 流控制一般用如下两种方式</p>\n</blockquote>\n<h2> </h2>\n<h3>流截获方式一：</h3>\n<pre><code class=\"language-javascript\">var through = require('through-gulp');\n\nmodule.exports = function () {\n    var stream = through(function(file, encoding, callback) {\n        var sourceStr = file.contents.toString();\n\n        // 这里可以对代码进行处理\n\n        file.contents = new Buffer(sourceStr);\n\n        // 再往管道中注入修改后的内容\n        this.push(file);\n\n        callback();\n    });\n\n    stream.on(\"end\", function () {\n        // 这里可以做些收尾工作\n    });\n\n    return stream;\n};\n</code></pre>\n<h2> </h2>\n<h3>流截获方式二：</h3>\n<pre><code class=\"language-javascript\">var through = require('through2');\nvar fs = require(\"fs\");\n\nmodule.exports = function (opt) {\n    var aopHeader = \"(\" + (opt.header || function(){}).toString() + \"());\";\n    var aopFooter = \"(\" + (opt.footer || function(){}).toString() + \"());\";\n\n    function bufferContents(file, encoding, callback) {\n        if (file.isNull()) {\n            this.push(file);\n            return callback();\n        }\n\n        if (file.isStream()) {\n            this.push(file);\n            return callback();\n        }\n\n        if (file.isBuffer()) {\n            file.contents = new Buffer(aopHeader + file.contents.toString('utf8') + aopFooter);\n        }\n\n        this.push(file);\n\n        callback();\n    }\n\n    function endStream(callback) {\n        // 这里可以做些收尾工作\n        callback();\n    }\n\n    return through.obj(bufferContents, endStream);\n};\n</code></pre>\n<blockquote>\n<p>编写自己的 Gulp 插件，流控制是基础。</p>\n</blockquote>\n<hr>","frontmatter":{"path":"/m5EMxLkw8rhWmyW1AEQWOQ7u","title":"Gulp流控制","date":"2016-01-31 23:38:00 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["coffee","gulp"]},"excerpt":"为了演示流控制，简单实现了注入插件 gulp-aop 先看下 gulp-aop 注入插件的用法 了解 gulp 流控制之前先了解下 nodeJS 的流   nodeJS 四种流 nodeJS里有四种类型的流：Readable，Writable，Duplex，Transform…"}},{"node":{"id":"6529f711-9320-5845-a3b6-43d4172b8cd9","html":"<h3>类的定义：</h3>\n<pre><code class=\"language-javascript\">var Clazz = (function () {\n    var Clazz = function () { },\n        initializing = false\n        superPattern = /xyz/.test(function() { xyz; }) ? /\\b_super\\b/ : /.*/;\n\n    Clazz.create = function (properties) {\n        var _super = this.prototype;\n        initializing = true;\n        var proto = new this();\n        initializing = false;\n\n        for (var name in properties) {\n            proto[name] = typeof properties[name] == \"function\" &#x26;&#x26;\n            typeof _super[name] == \"function\" &#x26;&#x26; superPattern.test(properties[name]) ?\n                (function(name, fn) {\n                    return function() {\n                        var tmp     = this._super;\n                        this._super = _super[name];\n                        var ret     = fn.apply(this, arguments);\n                        this._super = tmp;\n                        return ret;\n                    };\n                })(name, properties[name]) : properties[name];\n        }\n\n        function _Clazz() {\n            if (!initializing &#x26;&#x26; this.init) {\n                this.init.apply(this, arguments);\n            }\n        }\n\n        _Clazz.prototype     = proto;\n        _Clazz.constructor   = Clazz;\n        _Clazz.create        = arguments.callee;\n\n        return _Clazz;\n    }\n\n    return Clazz;\n}());\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>类的使用：</h3>\n<pre><code class=\"language-javascript\">var Person = Clazz.create({\n    init: function (isDancing) {\n        this.dancing = isDancing;\n    },\n    dance: function () {\n        return this.dancing;\n    }\n});\n\nvar Child = Person.create({\n    init: function () {\n        this._super(false);\n    },\n    dance: function () {\n        return this._super();\n    },\n    swiming: function () {\n        return true;\n    }\n});\n\nvar person = new Person(true);\nvar child = new Child();\n\nconsole.log('家长能跳舞.');\nconsole.log(person.dance());\n\nconsole.log('孩子能游泳');\nconsole.log(child.swiming());\n\nconsole.log('孩子不会跳舞.');\nconsole.log(child.dance());\n\nconsole.log('家长是人类.');\nconsole.log(person instanceof Person);\n\nconsole.log('孩子也是人类.');\nconsole.log(child instanceof Child &#x26;&#x26; child instanceof Person);\n</code></pre>\n<hr>","frontmatter":{"path":"/ZFR4s3OTFvgwRvL50hiVwpY5","title":"JavaScript实现类效果","date":"2016-01-27 11:00:00 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["javascript"]},"excerpt":"类的定义：   类的使用："}},{"node":{"id":"38fa7528-73f5-544e-95e1-4ebad7e3a1c5","html":"<h3>js 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nconcat = require \"gulp-concat\"\nuglify = require \"gulp-uglify\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe jshint()\n    .pipe concat \"base.min.js\"\n    .pipe uglify()   # 混淆\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>js 压缩不合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nsourcemaps = require \"gulp-sourcemaps\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxx.js\", \"!xxx.min.js\", \"yyy.js\", \"!yyy.min.js\"]\n    .pipe sourcemaps.init()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        mangle: no  # 不混淆\n    .pipe sourcemaps.write \"./\"\n    .pipe gulp.dest \"./\"\n</code></pre>\n<h2> </h2>\n<h3>js 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\njshint = require \"gulp-jshint\"\nrename = require \"gulp-rename\"\nuglify = require \"gulp-uglify\"\nrev = require \"gulp-rev\"\n\ngulp.task \"script\", ->\n    gulp.src [\"xxxx.js\", \"!xxx.min.js\"]\n    .pipe plumber()\n    .pipe jshint()\n    .pipe rename\n        extname: \".min.js\"\n    .pipe uglify\n        managle: no\n    .pipe rev()          # 加版本号\n    .pipe gulp.dest \"压缩文件\"\n    .pipe rev.manifest   # 这部分解决 js html 同时压缩时映射文件被覆盖问题\n        path    : path.join __dirname, \"映射文件目录/#{appName}/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>css 压缩合并</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nrename = require \"gulp-rename\"\ncssImport = require \"gulp-cssimport\"\ncssmin = require \"gulp-cssmin\"\n\ngulp.task \"css\", ->\n    gulp.src [\"xxx\", \"yyy\"]\n    .pipe rename\n        extname: \".min.css\"\n    .pipe cssImport()\n    .pipe cssmin\n        compatibility: \"ie7\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩</h3>\n<pre><code class=\"language-coffeescript\">gulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe gulp.dest \"输出目录\"\n</code></pre>\n<h2> </h2>\n<h3>html 压缩加版本号</h3>\n<pre><code class=\"language-coffeescript\">path = require \"path\"\ngulp = require \"gulp\"\nplumber = require \"gulp-plumber\"\nhtmlmin = require \"gulp-htmlmin\"\nrename = require \"gulp-rename\"\nrev = require \"gulp-rev\"\n\ngulp.task \"html\", ->\n    options =\n        removeComments                  : false     # 清除HTML注释\n        collapseWhitespace              : true      # 压缩HTML\n        collapseBooleanAttributes       : true      # 省略布尔属性的值 &#x3C;input checked=\"true\"/> ====> &#x3C;input />\n        removeEmptyAttributes           : true      # 删除所有空格作属性值 &#x3C;input id=\"\" /> ====> &#x3C;input />\n        removeScriptTypeAttributes      : true      # 删除&#x3C;script>的type=\"text/javascript\"\n        removeStyleLinkTypeAttributes   : true      # 删除&#x3C;style>和&#x3C;link>的type=\"text/css\"\n        minifyJS                        : true      # 压缩页面JS\n        minifyCSS                       : true      # 压缩页面CSS\n\n    gulp.src [\"xxx/**/*.html\", \"!xxx/**/*.min.html\"]\n    .pipe plumber()  # 出错不跳出\n    .pipe htmlmin options\n    .pipe rename\n        extname: \".min.html\"\n    .pipe rev()\n    .pipe gulp.dest \"压缩文件输出目录\"\n    .pipe rev.manifest\n        path    : path.join __dirname, \"映射文件输出目录/rev-manifest.json\"\n        cwd     : path.join __dirname, \"映射文件输出目录\"\n        merge   : yes\n    .pipe gulp.dest \"版本文件输出目录\"\n</code></pre>\n<blockquote>\n<p>基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理</p>\n</blockquote>\n<hr>","frontmatter":{"path":"/fnrdoaUSK7UChWUhYSpxHPqg","title":"Gulp常用脚本","date":"2016-01-26 14:20:38 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["coffee","gulp"]},"excerpt":"js 压缩合并   js 压缩不合并   js 压缩加版本号   css 压缩合并   html 压缩   html 压缩加版本号 基本上平时会用到的功能都覆盖到了，高级用法控制文件流的找时间再整理整理"}},{"node":{"id":"292fc140-4ae4-5c44-b959-403491b7e2de","html":"<p>听说 swiftype 很好用，就在网站里加入了这个功能，没想到的是从注册到真正能用上竟然花了差不多一个月的时间，主要原因是除了随处可见的教程中那些配置之外，还要有额外的配置，真是坑爹啊。。。</p>\n<h3>注册 swiftype 账号</h3>\n<p>到 <a href=\"http://www.swiftype.com\">http://www.swiftype.com</a> 注册账号</p>\n<h2> </h2>\n<h3>配置搜索</h3>\n<p>一路跟着提示，选择默认下一步下一步，直到完成</p>\n<!--more-->\n<h2> </h2>\n<h3>配置网站搜索</h3>\n<p>在搜索栏 input 元素上增加 <code>st-default-search-input</code> 这个类</p>\n<h2> </h2>\n<h3>注意一下两点</h3>\n<h4>1.在这个界面试着搜索下，如果搜索不出东西说明网站配置有问题，注意是网站配置有问题，不是 swiftype 配置有问题。</h4>\n<img src=\"https://i.imgur.com/7w1snfP.png\" />\n<h4>2.在 source 目录放 robots.txt 文件。</h4>\n<pre><code class=\"language-xml\">Sitemap: /sitemap.xml\n</code></pre>\n<p><strong>* sitemap 是 hexo 插件自己生成的 *</strong></p>\n<hr>","frontmatter":{"path":"/lnyT51FSfviU8se9chgTxZ5L","title":"用 swiftype 配置静态搜索","date":"2015-06-08 10:03:45 +0800","comments":true,"categories":"programming","author":null,"tags":["hexo","swiftype"]},"excerpt":"听说 swiftype 很好用，就在网站里加入了这个功能，没想到的是从注册到真正能用上竟然花了差不多一个月的时间，主要原因是除了随处可见的教程中那些配置之外，还要有额外的配置，真是坑爹啊。。。 注册 swiftype 账号 到  http://www.swiftype.com…"}},{"node":{"id":"ef24699e-cfce-51f6-b1aa-9877b66bf0e8","html":"<p>独立域名指向 Github 服务器 IP ，并在站点增加 CNAME 文件之后，收到了无数个 GitHub 提示邮件。\n<img src=\"https://i.imgur.com/TKSbJmc.jpg\" /></p>\n<!--more-->\n<p>只要通过 GitHub 帮助中的内容，做一下 IP 调整，邮件就不会再来了。</p>\n<h3>打开控制台输入以下命令(pages 地址自行修改)</h3>\n<pre><code class=\"language-ruby\">dig sir0xb.github.io +nostats +nocomments +nocmd\n</code></pre>\n<p>得到如下结果：</p>\n<pre><code class=\"language-ruby\">Sir0xb@mac:/ > dig sir0xb.github.io +nostats +nocomments +nocmd\n;; global options: +cmd\n;sir0xb.github.io.      IN  A\nsir0xb.github.io.   2237    IN  CNAME   github.map.fastly.net.\ngithub.map.fastly.net.  600 IN  A   103.245.222.133\nfastly.net.     35474   IN  NS  ns3.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns2.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns4.p04.dynect.net.\nfastly.net.     35474   IN  NS  ns1.p04.dynect.net.\nns1.p04.dynect.net. 37980   IN  A   208.78.70.4\nns1.p04.dynect.net. 179 IN  AAAA    2001:500:90:1::4\nns2.p04.dynect.net. 36368   IN  A   204.13.250.4\nns3.p04.dynect.net. 62102   IN  A   208.78.71.4\nns4.p04.dynect.net. 35616   IN  A   204.13.251.4\n</code></pre>\n<h2> </h2>\n<h3>设置 DNS 配置</h3>\n<img src=\"https://i.imgur.com/Bh6Yehc.jpg\" />\n<p>到此，不会再收到 Github 提示邮件了</p>\n<hr>","frontmatter":{"path":"/jSFkUdGpeX6JZtYQ7fTjMbQC","title":"解决 Github 邮件中提示的问题","date":"2015-05-27 23:14:24 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["github","email","warning"]},"excerpt":"独立域名指向 Github 服务器 IP ，并在站点增加 CNAME 文件之后，收到了无数个 GitHub 提示邮件。\n 只要通过 GitHub 帮助中的内容，做一下 IP 调整，邮件就不会再来了。 打开控制台输入以下命令(pages…"}},{"node":{"id":"daefeba7-5917-57a9-9970-49327884874c","html":"<p>Mac 下用 Chrome 有一点很不爽，就是开启隐私模式。\n难道就没有像 Windows 下那样修改快捷方式的方法吗？</p>\n<p>Mac 提供了好玩的工具 —— 脚本编辑器，利用它我们可以实现想要实现的效果。</p>\n<h4>打开脚本编辑器输入以下代码</h4>\n<pre><code class=\"language-actionscript\">do shell script \"open -a /Applications/Google\\\\ Chrome.app --args --incognito\"\n\ntell application \"Google Chrome\"\n    close windows\n    make new window with properties {mode:\"incognito\"}\n    activate\nend tell\n</code></pre>\n<h4>保存的时候 <code>文件格式</code> 选择应用程序，保存之后的 app 文件可以直接放入 <code>Applications</code></h4>\n<hr>","frontmatter":{"path":"/EPggA1MMSyY1MBZEgGTrL2F8","title":"Mac 解决 Chrome 隐私登录问题","date":"2015-05-25 19:09:45 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["mac","applescript"]},"excerpt":"Mac 下用 Chrome 有一点很不爽，就是开启隐私模式。\n难道就没有像 Windows 下那样修改快捷方式的方法吗？ Mac…"}},{"node":{"id":"6ee33a38-a819-5dc3-bd28-74e6207f8295","html":"<h3>brew (Homebrew)</h3>\n<h4>brew 安装</h4>\n<pre><code class=\"language-ruby\">$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<h4>brew 使用</h4>\n<p>查找软件包</p>\n<pre><code class=\"language-ruby\">$ brew search &#x3C;package>\n</code></pre>\n<!--more-->\n<p>安装软件包</p>\n<pre><code class=\"language-ruby\">$ brew install &#x3C;package>\n</code></pre>\n<p>查看已经安装的软件包</p>\n<pre><code class=\"language-ruby\">$ brew list\n</code></pre>\n<p>删除软件包</p>\n<pre><code class=\"language-ruby\">$ brew remove &#x3C;package>\n</code></pre>\n<p>查看软件包信息</p>\n<pre><code class=\"language-ruby\">$ brew info &#x3C;package>\n</code></pre>\n<p>查看软件包依赖关系</p>\n<pre><code class=\"language-ruby\">$ brew deps &#x3C;package>\n</code></pre>\n<p>更新 brew</p>\n<pre><code class=\"language-ruby\">$ brew update\n</code></pre>\n<p>列出可更新软件包</p>\n<pre><code class=\"language-ruby\">$ brew outdated\n</code></pre>\n<p>更新可更新软件包</p>\n<pre><code class=\"language-ruby\">$ brew upgrade\n</code></pre>\n<p>更新特定软件包</p>\n<pre><code class=\"language-ruby\">$ brew upgrade &#x3C;package>\n</code></pre>\n<h2> </h2>\n<h3>npm (Node Package Manager)</h3>\n<h4>npm 安装</h4>\n<p>访问 <a target=\"_blank\" href=\"https://nodejs.org/\">NodeJS 官网</a> 下载安装包  or  <code>brew install node</code></p>\n<h4>npm 使用</h4>\n<p>查找插件</p>\n<pre><code class=\"language-ruby\">$ npm search &#x3C;package>\n</code></pre>\n<p>安装插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm install &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm install -g &#x3C;package>\n</code></pre>\n<p>卸载插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm uninstall &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm uninstall -g &#x3C;package>\n</code></pre>\n<p>查看插件信息</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm info &#x3C;package>\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm info -g &#x3C;package>\n</code></pre>\n<p>查看已安装插件</p>\n<p>>> 当前目录：</p>\n<pre><code class=\"language-ruby\">$ npm list\n</code></pre>\n<p>>> 全局目录：</p>\n<pre><code class=\"language-ruby\">$ npm -g list\n</code></pre>\n<p>*<strong>* 如果是 Linux 可以 <code>$ npm list -g | grep ^[└,├]</code> 进行过滤 **</strong></p>\n<p>发布插件</p>\n<pre><code class=\"language-ruby\">$ npm publish\n</code></pre>\n<h2> </h2>\n<h3>bower</h3>\n<h4>bower 安装</h4>\n<pre><code class=\"language-ruby\">$ npm install -g bower\n</code></pre>\n<h4>bower 使用</h4>\n<p>默认安装目录为 <code>bower_components/</code>\n可通过在目录中配置 <code>.bowerrc</code> 文件制定路径，例如：</p>\n<pre><code class=\"language-xml\">{\n  \"directory\": \"lib\"\n}\n</code></pre>\n<p>安装库</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package>\n</code></pre>\n<p>通过配置文件安装库</p>\n<pre><code class=\"language-xml\">//配置文件样例\n{\n  \"name\": \"boliball\",\n  \"version\": \"0.0.2\",\n  \"homepage\": \"https://github.com/Sir0xb/boliball\",\n  \"authors\": [\n     \"Sir0xb &#x3C;Sir0xb@live.com>\"\n  ],\n  \"dependencies\": {\n     \"knockoutjs\": \"*\",\n     \"knockout.mapping\": \"~2.0.1\"\n  },\n  \"keywords\": [\n     \"Sir0xb\"\n  ],\n  \"license\": \"MIT\"\n}\n</code></pre>\n<p>>> 安装 bower.json 中配置的库</p>\n<pre><code class=\"language-ruby\">$ bower install\n</code></pre>\n<p>>> 安装并添加到 bower.json 配置中</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package> --save\n</code></pre>\n<p>>> 安装指定版本的库并添加到 bower.json 配置中</p>\n<pre><code class=\"language-ruby\">$ bower install &#x3C;package>#&#x3C;version> --save\n</code></pre>\n<p>更新库</p>\n<p>>> 更新全部</p>\n<pre><code class=\"language-ruby\">$ bower update\n</code></pre>\n<p>>> 更新指定库</p>\n<pre><code class=\"language-ruby\">$ bower update &#x3C;package>\n</code></pre>\n<p>卸载库</p>\n<pre><code class=\"language-ruby\">$ bower uninstall &#x3C;package>` or `$ bower uninstall &#x3C;package1> &#x3C;package2> &#x3C;package3>\n</code></pre>\n<h2> </h2>\n<h3>pip</h3>\n<h4>pip 安装</h4>\n<pre><code class=\"language-ruby\">$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py\n\n$ python get-pip.py\n</code></pre>\n<h4>pip 使用</h4>\n<p>更新 pip</p>\n<pre><code class=\"language-ruby\">$ pip install -U pip\n</code></pre>\n<p>安装软件包</p>\n<pre><code class=\"language-ruby\">$ pip install &#x3C;package>                 # 安装最新版\n$ pip install &#x3C;package>==&#x3C;version>      # 安装指定版\n$ pip install '&#x3C;package>>=version>'     # 安装大于特定版\n</code></pre>\n<p>用配置文件安装</p>\n<pre><code class=\"language-ruby\">$ pip freeze > package.txt      # 根据软件包安装情况生成配置文件\n$ pip install -r package.txt    # 安装配置文件中的软件包\n</code></pre>\n<p>查看软件包信息</p>\n<pre><code class=\"language-ruby\">$ pip show &#x3C;package>\n</code></pre>\n<p>查找软件包</p>\n<pre><code class=\"language-ruby\">$ pip search &#x3C;package>\n</code></pre>\n<hr>","frontmatter":{"path":"/WoVielvZwB87niNXHmn6eE69","title":"开发过程中常会用到的命令行工具","date":"2015-05-21 19:08:10 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["brew","npm","bower","pip"]},"excerpt":"brew (Homebrew) brew 安装 brew 使用 查找软件包 安装软件包 查看已经安装的软件包 删除软件包 查看软件包信息 查看软件包依赖关系 更新 brew 列出可更新软件包 更新可更新软件包 更新特定软件包   npm (Node Package Manager…"}},{"node":{"id":"595dd515-eeb1-554f-a563-15eb2c64defa","html":"<h3>准备数据模型</h3>\n<pre><code class=\"language-javascript\">var viewModel= {\n    firstName: ko.observable(\"Planet\"),\n    lastName : ko.observable(\"Earth\"),\n    tempId   : ko.observable(\"ko-static\")\n};\n\nko.applyBindings(viewModel);\n</code></pre>\n<!--more-->\n<h2> </h2>\n<h3>准备锚点和模板</h3>\n<pre><code class=\"language-html\">//代码锚点\n&#x3C;div data-bind=\"template: { name: tempId() }\">&#x3C;/div>\n\n//展示用模板\n&#x3C;script type=\"text/html\" id=\"ko-static\">\n    &#x3C;table>\n        &#x3C;tr>\n            &#x3C;td>firstName:&#x3C;/td>\n            &#x3C;td data-bind=\"text: firstName\">&#x3C;/td>\n        &#x3C;/tr>\n        &#x3C;tr>\n            &#x3C;td>lastName:&#x3C;/td>\n            &#x3C;td data-bind=\"text: lastName\">&#x3C;/td>\n        &#x3C;/tr>\n    &#x3C;/table>\n    &#x3C;a href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-edit'); }\">Edit&#x3C;/a>\n&#x3C;/script>\n\n//编辑用模板\n&#x3C;script type=\"text/html\" id=\"ko-edit\">\n    &#x3C;table>\n        &#x3C;tr>\n            &#x3C;td>firstName:&#x3C;/td>\n            &#x3C;td>&#x3C;input data-bind=\"value: firstName\" />&#x3C;/td>\n        &#x3C;/tr>\n        &#x3C;tr>\n            &#x3C;td>lastName:&#x3C;/td>\n            &#x3C;td>&#x3C;input data-bind=\"value: lastName\" />&#x3C;/td>\n        &#x3C;/tr>\n    &#x3C;/table>\n    &#x3C;a href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-static'); }\">Done&#x3C;/a>\n&#x3C;/script>\n</code></pre>\n<h2> </h2>\n<h3>最终效果如下:</h3>\n<div data-bind=\"template: { name: tempId() }\"></div>\n<script type=\"text/html\" id=\"ko-static\">\n    <table class=\"my_table\">\n        <tr>\n            <td>firstName:</td>\n            <td data-bind=\"text: firstName\"></td>\n        </tr>\n        <tr>\n            <td>lastName:</td>\n            <td data-bind=\"text: lastName\"></td>\n        </tr>\n    </table>\n    <div class=\"article-categories\">\n      <a class=\"article-category-link\" href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-edit'); }\">Edit</a>\n    </div>\n</script>\n<script type=\"text/html\" id=\"ko-edit\">\n    <table class=\"my_table\">\n        <tr>\n            <td>firstName:</td>\n            <td><input data-bind=\"value: firstName\" /></td>\n        </tr>\n        <tr>\n            <td>lastName:</td>\n            <td><input data-bind=\"value: lastName\" /></td>\n        </tr>\n    </table>\n    <div class=\"article-categories\">\n        <a class=\"article-category-link\" href=\"javascript:void(0);\" data-bind=\"click: function(){ this.tempId('ko-static'); }\">Done</a>\n    </div>\n</script>\n<script src=\"https://cdn.bootcss.com/knockout/3.3.0/knockout-min.js\"></script>\n<script type=\"text/javascript\">\n    var viewModel= {\n        firstName: ko.observable(\"Planet\"),\n        lastName : ko.observable(\"Earth\"),\n        tempId   : ko.observable(\"ko-static\")\n    };\n\n    ko.applyBindings(viewModel);\n</script>\n<br>\n<hr>","frontmatter":{"path":"/MhZFIf4lNegdjhEd9KRzLwQb","title":"ko - template 实现两套界面切换","date":"2015-05-19 15:07:09 +0800","comments":true,"categories":"programming","author":"Sir0xb","tags":["knockout","template"]},"excerpt":"准备数据模型   准备锚点和模板   最终效果如下:"}}],"pathPrefix":"programming","first":false,"last":false,"index":2,"pageCount":8,"additionalContext":{}}}
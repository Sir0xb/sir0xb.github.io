{"data":{"markdownRemark":{"html":"<p>用 Node.js 的 Stream 概念，gulp 实现了一套自己的 pipe，再包裹上 Promise 机制，让每个功能在一个接一个的管道中流过，宏观上实现我们需要它完成的 Task。Task 很好用，于是用了很多，结果 gulpfile 变得很长，每次修改就要费劲找好长时间，径管理也比较麻烦，很不好维护。是时候彻底重构一下了。</p>\n<h3>用 es6 替代 coffee</h3>\n<p>脚本原来是用 coffee 维护的，既能减少代码长度，又能避免未返回 gulp 对象所引起的断流问题。不过毕竟 coffee 已经不维护了，也没有自带的模块开发功能，所以这次决定改版成 es6 方式。</p>\n<!--more-->\n<p>先引入 <code>babel-core</code> 和 <code>babel-preset-es2015</code> 这两个包</p>\n<p>配置 package.json</p>\n<pre><code class=\"language-json\">...\n\"babel\": {\n    \"presets\": [\n        \"es2015\"\n    ]\n}\n...\n</code></pre>\n<p>es6 用的脚本名称不再是 <code>gulpfile.js</code>，需要改成 <code>gulpfile.babel.js</code></p>\n<p>es6 环境搭建完成。</p>\n<h2> </h2>\n<h3>目录结构优化</h3>\n<img src=\"https://i.imgur.com/acdX7Uc.jpg\" />\n<p><code>fescripts</code> 文件夹作为脚本主目录，只放一些配置文件及任务文件夹。</p>\n<p><code>tasks</code> 文件夹存放需要根据环境调用的任务。像 <code>default.task.js</code> 平时开发时调用，<code>build.task.js</code> 在服务器发布环境中运行。</p>\n<p><code>cleaner</code>、<code>compile</code>、<code>debug</code> 等文件夹存放具体小功能(就是原来 <code>gulpfile.js</code> 里的 task)。</p>\n<h2> </h2>\n<h3>配置文件说明 <code>gulp.config.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport Q from 'q';\n\nmodule.exports = function ({ isDev = false, stage = \"test\" } = {}) {\n    let config = {\n        isDev: isDev,\n        system_list: (() => {\n            if (isDev) {\n                return [\n                    \"alphago/livecast/livecast-web/livecast-crm-webapp/src/main/webapp\",\n                    \"alphago/livecast/livecast-web/livecast-student-webapp/src/main/webapp\",\n                    \"alphago/livecast/livecast-web/livecast-teacher-webapp/src/main/webapp\"\n                ];\n            } else {\n                return [\n                    `./build-repo/build-${stage}/livecast-crm-webapp/webroot`,\n                    `./build-repo/build-${stage}/livecast-student-webapp/webroot`,\n                    `./build-repo/build-${stage}/livecast-teacher-webapp/webroot`\n                ];\n            }\n        })(),\n        great_promise: function(gulpJob, prams = true) {\n            let deferred = Q.defer();\n            let promiseArray = [];\n\n            this.system_list.forEach((base) => {\n                let def = Q.defer();\n\n                gulpJob(base, def);\n\n                promiseArray.push(def.promise);\n            });\n\n            Q.all(promiseArray).then(function () {\n                deferred.resolve(prams);\n            });\n\n            return deferred.promise;\n        },\n        colorful: function (word, $) {\n            let message = '';\n            Array.from(word, function (x, i) {\n                message += $.chalk[['red', 'yellow', 'green', 'blue', 'magenta', 'cyan', 'gray'][i%7]](x);\n            });\n            console.info(`[${ $.chalk.gray($.dateformat(new Date(), 'H:MM:ss')) }] >>> ${ message } &#x3C;&#x3C;&#x3C;`);\n        },\n        jobStart: function ($, time, taskName, base = null) {\n            console.info(`[${ $.chalk.gray($.dateformat(time, 'H:MM:ss')) }] ${ $.chalk.red('Starting') } '${ $.chalk.green(taskName) }' ... ${ base != null ? ' ==> ' + $.chalk.yellow(base) : '' }`);\n        },\n        jobEnd: function ($, time, taskName, defTime, base = null) {\n            console.info(`[${ $.chalk.gray($.dateformat(time, 'H:MM:ss')) }] ${ $.chalk.blue('Finished') } '${ $.chalk.green(taskName) }' in ${ $.chalk.magenta(defTime + ' ms') } ${ base != null ? ' ==> ' + $.chalk.yellow(base) : '' }`);\n        }\n    };\n\n    return config;\n};\n</code></pre>\n<h4>参数说明</h4>\n<p>isDev 开发与发布环境辨别的参数，默认值给了false，也就是开发环境。</p>\n<p>stage 发布环境状态的不同环境区分，例如: test、staging、release等</p>\n<h4>内部函数说明</h4>\n<p>system_list: 是立即执行函数，根据环境返回不同目录，最终是个数组。</p>\n<p>great_promise: 解决同一任务便利不同系统目录，并并发直行用的。</p>\n<p>jobStart &#x26; jobEnd：除了服务器脚本，其他所有的脚本都直接用 promise 实现，所以任务信息需要自己打出。</p>\n<h2> </h2>\n<h3>入口脚本配置 <code>gulpfile.babel.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport gulp         from 'gulp';\nimport $            from 'gulp-load-plugins';\nimport config       from './fescripts/gulp.config.js';\nimport Clean        from './fescripts/tasks/clean.task.js';\nimport Build        from './fescripts/tasks/build.task.js';\nimport Default      from './fescripts/tasks/default.task.js';\n\ngulp.task(\"clean\", function () {\n    return Clean(gulp, config(), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }), gulp.env.taskName || 'all');\n});\n\ngulp.task(\"build\", function () {\n    return Build(gulp, config({\n        stage: process.argv.length >= 5 &#x26;&#x26; process.argv[4] || 'test'\n    }), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }));\n});\n\ngulp.task(\"watch\", ['default'], function () {\n    return gulp.watch(['alphago/livecast/livecast-web/**/*.scss'], ['default']);\n});\n\ngulp.task(\"default\", function () {\n    return Default(gulp, config({\n        isDev: true\n    }), $({\n        pattern: ['gulp-*', 'gulp.*', 'chalk', 'dateformat', 'q'],\n        lazy: true\n    }));\n});\n</code></pre>\n<p>这里的 $ 不是 jQuery 的缩写，是 gulp 的一个插件 <code>gulp-load-plugins</code>。</p>\n<p>这插件会默认把 <code>package.json</code> 下 <code>gulp-</code> &#x26; <code>gulp.*</code> 开头的插件全部加载到环境中。</p>\n<p>如果需要，可以根据自己的需要修改 <code>pattern</code> 配置，加载更多其他插件。</p>\n<h2> </h2>\n<h3>编译脚本 <code>build.task.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport clean    from './clean.task.js';\nimport css      from './compile/css.compile.js';\nimport tools    from './compile/tools.compile.js'\nimport js       from './compile/js.compile.js';\nimport html     from './compile/html.compile.js';\nimport formal   from './debug/formal.mode.js';\n\nmodule.exports = function (gulp, config, $, param = true) {\n    return $.q.fcall(() => true).then(function () {\n        return clean(gulp, config, $);\n    }).then(function () {\n        return css(gulp, config, $);\n    }).then(function () {\n        return tools(gulp, config, $);\n    }).then(function () {\n        return js(gulp, config, $);\n    }).then(function () {\n        return html(gulp, config, $);\n    }).then(function () {\n        return config.isDev ? formal(gulp, config, $) : true;\n    }).then(function () {\n        return param;\n    });\n};\n</code></pre>\n<p>这里用到了 Node.js 的 q 模块</p>\n<h2> </h2>\n<h3>小任务脚本 <code>css.compile.js</code></h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nmodule.exports = function (gulp, config, $, param = true) {\n    return $.q.fcall(() => true).then(function () {\n        return config.great_promise(function (base, def) {\n            let startTime = new Date();\n            config.jobStart($, startTime, 'Make css version', base);\n\n            gulp.src([\n                `${base}/public/css/*.css`,\n                `!${base}/public/css/*-*.css`\n            ])\n            .pipe($.plumber())\n            .pipe($.sourcemaps.write('maps', {\n                includeContent: false\n            }))\n            .pipe($.rev())\n            .pipe(gulp.dest(`${base}/public/css`))\n            .pipe($.rev.manifest())\n            .pipe(gulp.dest(`${base}/public/css`))\n            .on('end', function () {\n                let endTime = new Date();\n                config.jobEnd($, endTime, 'Make css version', endTime.getTime() - startTime.getTime(), base);\n\n                def.resolve();\n            });\n        });\n    }).then(function () {\n        return config.great_promise(function (base, def) {\n            let startTime = new Date();\n            config.jobStart($, startTime, 'Change links', base);\n\n            gulp.src([\n                `${base}/public/css/rev-manifest.json`,\n                `${base}/WEB-INF/livecast/layout/*links.ftl`\n            ])\n            .pipe($.plumber())\n            .pipe($.if(/\\.ftl$/, $.replace(/main(\\S*).css/g, 'main.css')))\n            .pipe($.revCollector())\n            .pipe(gulp.dest(`${base}/WEB-INF/livecast/layout/`))\n            .on('end', function () {\n                let endTime = new Date();\n                config.jobEnd($, endTime, 'Change links', endTime.getTime() - startTime.getTime(), base);\n\n                def.resolve();\n            });\n        });\n    }).then(function () {\n        return param;\n    });\n};\n</code></pre>\n<h2> </h2>\n<h3>运行后效果</h3>\n<img src=\"https://i.imgur.com/l6Jgsyi.jpg\" />\n<p>可以看到 <code>Recover links</code> 任务开始的顺序是 crm -> student -> teacher，最后完成顺序是 crm -> teacher -> student。</p>\n<p>每个具体任务间是串行，三个项目目录间同一个任务是并行的。</p>\n<hr>","frontmatter":{"path":"/HZuzV2Mry3o0cjvWK2JEBiBX","title":"重构你的 gulpfile","author":"Sir0xb","date":"2016-08-12 16:18:55 +0800"}}},"pageContext":{}}